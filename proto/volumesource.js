/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.k8s.io.api.core.v1.VolumeSource');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource');
goog.require('proto.k8s.io.api.core.v1.AzureDiskVolumeSource');
goog.require('proto.k8s.io.api.core.v1.AzureFileVolumeSource');
goog.require('proto.k8s.io.api.core.v1.CephFSVolumeSource');
goog.require('proto.k8s.io.api.core.v1.CinderVolumeSource');
goog.require('proto.k8s.io.api.core.v1.ConfigMapVolumeSource');
goog.require('proto.k8s.io.api.core.v1.DownwardAPIVolumeSource');
goog.require('proto.k8s.io.api.core.v1.EmptyDirVolumeSource');
goog.require('proto.k8s.io.api.core.v1.FCVolumeSource');
goog.require('proto.k8s.io.api.core.v1.FlexVolumeSource');
goog.require('proto.k8s.io.api.core.v1.FlockerVolumeSource');
goog.require('proto.k8s.io.api.core.v1.GCEPersistentDiskVolumeSource');
goog.require('proto.k8s.io.api.core.v1.GitRepoVolumeSource');
goog.require('proto.k8s.io.api.core.v1.GlusterfsVolumeSource');
goog.require('proto.k8s.io.api.core.v1.HostPathVolumeSource');
goog.require('proto.k8s.io.api.core.v1.ISCSIVolumeSource');
goog.require('proto.k8s.io.api.core.v1.NFSVolumeSource');
goog.require('proto.k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource');
goog.require('proto.k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource');
goog.require('proto.k8s.io.api.core.v1.PortworxVolumeSource');
goog.require('proto.k8s.io.api.core.v1.ProjectedVolumeSource');
goog.require('proto.k8s.io.api.core.v1.QuobyteVolumeSource');
goog.require('proto.k8s.io.api.core.v1.RBDVolumeSource');
goog.require('proto.k8s.io.api.core.v1.ScaleIOVolumeSource');
goog.require('proto.k8s.io.api.core.v1.SecretVolumeSource');
goog.require('proto.k8s.io.api.core.v1.StorageOSVolumeSource');
goog.require('proto.k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.k8s.io.api.core.v1.VolumeSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.k8s.io.api.core.v1.VolumeSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.k8s.io.api.core.v1.VolumeSource.displayName = 'proto.k8s.io.api.core.v1.VolumeSource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.toObject = function(opt_includeInstance) {
  return proto.k8s.io.api.core.v1.VolumeSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.k8s.io.api.core.v1.VolumeSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.k8s.io.api.core.v1.VolumeSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostpath: (f = msg.getHostpath()) && proto.k8s.io.api.core.v1.HostPathVolumeSource.toObject(includeInstance, f),
    emptydir: (f = msg.getEmptydir()) && proto.k8s.io.api.core.v1.EmptyDirVolumeSource.toObject(includeInstance, f),
    gcepersistentdisk: (f = msg.getGcepersistentdisk()) && proto.k8s.io.api.core.v1.GCEPersistentDiskVolumeSource.toObject(includeInstance, f),
    awselasticblockstore: (f = msg.getAwselasticblockstore()) && proto.k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource.toObject(includeInstance, f),
    gitrepo: (f = msg.getGitrepo()) && proto.k8s.io.api.core.v1.GitRepoVolumeSource.toObject(includeInstance, f),
    secret: (f = msg.getSecret()) && proto.k8s.io.api.core.v1.SecretVolumeSource.toObject(includeInstance, f),
    nfs: (f = msg.getNfs()) && proto.k8s.io.api.core.v1.NFSVolumeSource.toObject(includeInstance, f),
    iscsi: (f = msg.getIscsi()) && proto.k8s.io.api.core.v1.ISCSIVolumeSource.toObject(includeInstance, f),
    glusterfs: (f = msg.getGlusterfs()) && proto.k8s.io.api.core.v1.GlusterfsVolumeSource.toObject(includeInstance, f),
    persistentvolumeclaim: (f = msg.getPersistentvolumeclaim()) && proto.k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource.toObject(includeInstance, f),
    rbd: (f = msg.getRbd()) && proto.k8s.io.api.core.v1.RBDVolumeSource.toObject(includeInstance, f),
    flexvolume: (f = msg.getFlexvolume()) && proto.k8s.io.api.core.v1.FlexVolumeSource.toObject(includeInstance, f),
    cinder: (f = msg.getCinder()) && proto.k8s.io.api.core.v1.CinderVolumeSource.toObject(includeInstance, f),
    cephfs: (f = msg.getCephfs()) && proto.k8s.io.api.core.v1.CephFSVolumeSource.toObject(includeInstance, f),
    flocker: (f = msg.getFlocker()) && proto.k8s.io.api.core.v1.FlockerVolumeSource.toObject(includeInstance, f),
    downwardapi: (f = msg.getDownwardapi()) && proto.k8s.io.api.core.v1.DownwardAPIVolumeSource.toObject(includeInstance, f),
    fc: (f = msg.getFc()) && proto.k8s.io.api.core.v1.FCVolumeSource.toObject(includeInstance, f),
    azurefile: (f = msg.getAzurefile()) && proto.k8s.io.api.core.v1.AzureFileVolumeSource.toObject(includeInstance, f),
    configmap: (f = msg.getConfigmap()) && proto.k8s.io.api.core.v1.ConfigMapVolumeSource.toObject(includeInstance, f),
    vspherevolume: (f = msg.getVspherevolume()) && proto.k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource.toObject(includeInstance, f),
    quobyte: (f = msg.getQuobyte()) && proto.k8s.io.api.core.v1.QuobyteVolumeSource.toObject(includeInstance, f),
    azuredisk: (f = msg.getAzuredisk()) && proto.k8s.io.api.core.v1.AzureDiskVolumeSource.toObject(includeInstance, f),
    photonpersistentdisk: (f = msg.getPhotonpersistentdisk()) && proto.k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource.toObject(includeInstance, f),
    projected: (f = msg.getProjected()) && proto.k8s.io.api.core.v1.ProjectedVolumeSource.toObject(includeInstance, f),
    portworxvolume: (f = msg.getPortworxvolume()) && proto.k8s.io.api.core.v1.PortworxVolumeSource.toObject(includeInstance, f),
    scaleio: (f = msg.getScaleio()) && proto.k8s.io.api.core.v1.ScaleIOVolumeSource.toObject(includeInstance, f),
    storageos: (f = msg.getStorageos()) && proto.k8s.io.api.core.v1.StorageOSVolumeSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.k8s.io.api.core.v1.VolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.k8s.io.api.core.v1.VolumeSource;
  return proto.k8s.io.api.core.v1.VolumeSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.k8s.io.api.core.v1.VolumeSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.k8s.io.api.core.v1.VolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.k8s.io.api.core.v1.HostPathVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.HostPathVolumeSource.deserializeBinaryFromReader);
      msg.setHostpath(value);
      break;
    case 2:
      var value = new proto.k8s.io.api.core.v1.EmptyDirVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.EmptyDirVolumeSource.deserializeBinaryFromReader);
      msg.setEmptydir(value);
      break;
    case 3:
      var value = new proto.k8s.io.api.core.v1.GCEPersistentDiskVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.GCEPersistentDiskVolumeSource.deserializeBinaryFromReader);
      msg.setGcepersistentdisk(value);
      break;
    case 4:
      var value = new proto.k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource.deserializeBinaryFromReader);
      msg.setAwselasticblockstore(value);
      break;
    case 5:
      var value = new proto.k8s.io.api.core.v1.GitRepoVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.GitRepoVolumeSource.deserializeBinaryFromReader);
      msg.setGitrepo(value);
      break;
    case 6:
      var value = new proto.k8s.io.api.core.v1.SecretVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.SecretVolumeSource.deserializeBinaryFromReader);
      msg.setSecret(value);
      break;
    case 7:
      var value = new proto.k8s.io.api.core.v1.NFSVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.NFSVolumeSource.deserializeBinaryFromReader);
      msg.setNfs(value);
      break;
    case 8:
      var value = new proto.k8s.io.api.core.v1.ISCSIVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.ISCSIVolumeSource.deserializeBinaryFromReader);
      msg.setIscsi(value);
      break;
    case 9:
      var value = new proto.k8s.io.api.core.v1.GlusterfsVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.GlusterfsVolumeSource.deserializeBinaryFromReader);
      msg.setGlusterfs(value);
      break;
    case 10:
      var value = new proto.k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource.deserializeBinaryFromReader);
      msg.setPersistentvolumeclaim(value);
      break;
    case 11:
      var value = new proto.k8s.io.api.core.v1.RBDVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.RBDVolumeSource.deserializeBinaryFromReader);
      msg.setRbd(value);
      break;
    case 12:
      var value = new proto.k8s.io.api.core.v1.FlexVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.FlexVolumeSource.deserializeBinaryFromReader);
      msg.setFlexvolume(value);
      break;
    case 13:
      var value = new proto.k8s.io.api.core.v1.CinderVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.CinderVolumeSource.deserializeBinaryFromReader);
      msg.setCinder(value);
      break;
    case 14:
      var value = new proto.k8s.io.api.core.v1.CephFSVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.CephFSVolumeSource.deserializeBinaryFromReader);
      msg.setCephfs(value);
      break;
    case 15:
      var value = new proto.k8s.io.api.core.v1.FlockerVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.FlockerVolumeSource.deserializeBinaryFromReader);
      msg.setFlocker(value);
      break;
    case 16:
      var value = new proto.k8s.io.api.core.v1.DownwardAPIVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.DownwardAPIVolumeSource.deserializeBinaryFromReader);
      msg.setDownwardapi(value);
      break;
    case 17:
      var value = new proto.k8s.io.api.core.v1.FCVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.FCVolumeSource.deserializeBinaryFromReader);
      msg.setFc(value);
      break;
    case 18:
      var value = new proto.k8s.io.api.core.v1.AzureFileVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.AzureFileVolumeSource.deserializeBinaryFromReader);
      msg.setAzurefile(value);
      break;
    case 19:
      var value = new proto.k8s.io.api.core.v1.ConfigMapVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.ConfigMapVolumeSource.deserializeBinaryFromReader);
      msg.setConfigmap(value);
      break;
    case 20:
      var value = new proto.k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource.deserializeBinaryFromReader);
      msg.setVspherevolume(value);
      break;
    case 21:
      var value = new proto.k8s.io.api.core.v1.QuobyteVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.QuobyteVolumeSource.deserializeBinaryFromReader);
      msg.setQuobyte(value);
      break;
    case 22:
      var value = new proto.k8s.io.api.core.v1.AzureDiskVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.AzureDiskVolumeSource.deserializeBinaryFromReader);
      msg.setAzuredisk(value);
      break;
    case 23:
      var value = new proto.k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource.deserializeBinaryFromReader);
      msg.setPhotonpersistentdisk(value);
      break;
    case 26:
      var value = new proto.k8s.io.api.core.v1.ProjectedVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.ProjectedVolumeSource.deserializeBinaryFromReader);
      msg.setProjected(value);
      break;
    case 24:
      var value = new proto.k8s.io.api.core.v1.PortworxVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.PortworxVolumeSource.deserializeBinaryFromReader);
      msg.setPortworxvolume(value);
      break;
    case 25:
      var value = new proto.k8s.io.api.core.v1.ScaleIOVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.ScaleIOVolumeSource.deserializeBinaryFromReader);
      msg.setScaleio(value);
      break;
    case 27:
      var value = new proto.k8s.io.api.core.v1.StorageOSVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.StorageOSVolumeSource.deserializeBinaryFromReader);
      msg.setStorageos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.k8s.io.api.core.v1.VolumeSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.k8s.io.api.core.v1.VolumeSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.k8s.io.api.core.v1.VolumeSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostpath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.k8s.io.api.core.v1.HostPathVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getEmptydir();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.k8s.io.api.core.v1.EmptyDirVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getGcepersistentdisk();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.k8s.io.api.core.v1.GCEPersistentDiskVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getAwselasticblockstore();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getGitrepo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.k8s.io.api.core.v1.GitRepoVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getSecret();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.k8s.io.api.core.v1.SecretVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getNfs();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.k8s.io.api.core.v1.NFSVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getIscsi();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.k8s.io.api.core.v1.ISCSIVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getGlusterfs();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.k8s.io.api.core.v1.GlusterfsVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getPersistentvolumeclaim();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getRbd();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.k8s.io.api.core.v1.RBDVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getFlexvolume();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.k8s.io.api.core.v1.FlexVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getCinder();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.k8s.io.api.core.v1.CinderVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getCephfs();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.k8s.io.api.core.v1.CephFSVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getFlocker();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.k8s.io.api.core.v1.FlockerVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getDownwardapi();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.k8s.io.api.core.v1.DownwardAPIVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getFc();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.k8s.io.api.core.v1.FCVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getAzurefile();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.k8s.io.api.core.v1.AzureFileVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getConfigmap();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.k8s.io.api.core.v1.ConfigMapVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getVspherevolume();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getQuobyte();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.k8s.io.api.core.v1.QuobyteVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getAzuredisk();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.k8s.io.api.core.v1.AzureDiskVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getPhotonpersistentdisk();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getProjected();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.k8s.io.api.core.v1.ProjectedVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getPortworxvolume();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.k8s.io.api.core.v1.PortworxVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getScaleio();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.k8s.io.api.core.v1.ScaleIOVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getStorageos();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.k8s.io.api.core.v1.StorageOSVolumeSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional HostPathVolumeSource hostPath = 1;
 * @return {?proto.k8s.io.api.core.v1.HostPathVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getHostpath = function() {
  return /** @type{?proto.k8s.io.api.core.v1.HostPathVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.HostPathVolumeSource, 1));
};


/** @param {?proto.k8s.io.api.core.v1.HostPathVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setHostpath = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearHostpath = function() {
  this.setHostpath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasHostpath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EmptyDirVolumeSource emptyDir = 2;
 * @return {?proto.k8s.io.api.core.v1.EmptyDirVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getEmptydir = function() {
  return /** @type{?proto.k8s.io.api.core.v1.EmptyDirVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.EmptyDirVolumeSource, 2));
};


/** @param {?proto.k8s.io.api.core.v1.EmptyDirVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setEmptydir = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearEmptydir = function() {
  this.setEmptydir(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasEmptydir = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GCEPersistentDiskVolumeSource gcePersistentDisk = 3;
 * @return {?proto.k8s.io.api.core.v1.GCEPersistentDiskVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getGcepersistentdisk = function() {
  return /** @type{?proto.k8s.io.api.core.v1.GCEPersistentDiskVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.GCEPersistentDiskVolumeSource, 3));
};


/** @param {?proto.k8s.io.api.core.v1.GCEPersistentDiskVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setGcepersistentdisk = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearGcepersistentdisk = function() {
  this.setGcepersistentdisk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasGcepersistentdisk = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 4;
 * @return {?proto.k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getAwselasticblockstore = function() {
  return /** @type{?proto.k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource, 4));
};


/** @param {?proto.k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setAwselasticblockstore = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearAwselasticblockstore = function() {
  this.setAwselasticblockstore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasAwselasticblockstore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GitRepoVolumeSource gitRepo = 5;
 * @return {?proto.k8s.io.api.core.v1.GitRepoVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getGitrepo = function() {
  return /** @type{?proto.k8s.io.api.core.v1.GitRepoVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.GitRepoVolumeSource, 5));
};


/** @param {?proto.k8s.io.api.core.v1.GitRepoVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setGitrepo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearGitrepo = function() {
  this.setGitrepo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasGitrepo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SecretVolumeSource secret = 6;
 * @return {?proto.k8s.io.api.core.v1.SecretVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getSecret = function() {
  return /** @type{?proto.k8s.io.api.core.v1.SecretVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.SecretVolumeSource, 6));
};


/** @param {?proto.k8s.io.api.core.v1.SecretVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setSecret = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearSecret = function() {
  this.setSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional NFSVolumeSource nfs = 7;
 * @return {?proto.k8s.io.api.core.v1.NFSVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getNfs = function() {
  return /** @type{?proto.k8s.io.api.core.v1.NFSVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.NFSVolumeSource, 7));
};


/** @param {?proto.k8s.io.api.core.v1.NFSVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setNfs = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearNfs = function() {
  this.setNfs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasNfs = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ISCSIVolumeSource iscsi = 8;
 * @return {?proto.k8s.io.api.core.v1.ISCSIVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getIscsi = function() {
  return /** @type{?proto.k8s.io.api.core.v1.ISCSIVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.ISCSIVolumeSource, 8));
};


/** @param {?proto.k8s.io.api.core.v1.ISCSIVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setIscsi = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearIscsi = function() {
  this.setIscsi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasIscsi = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional GlusterfsVolumeSource glusterfs = 9;
 * @return {?proto.k8s.io.api.core.v1.GlusterfsVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getGlusterfs = function() {
  return /** @type{?proto.k8s.io.api.core.v1.GlusterfsVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.GlusterfsVolumeSource, 9));
};


/** @param {?proto.k8s.io.api.core.v1.GlusterfsVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setGlusterfs = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearGlusterfs = function() {
  this.setGlusterfs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasGlusterfs = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PersistentVolumeClaimVolumeSource persistentVolumeClaim = 10;
 * @return {?proto.k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getPersistentvolumeclaim = function() {
  return /** @type{?proto.k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource, 10));
};


/** @param {?proto.k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setPersistentvolumeclaim = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearPersistentvolumeclaim = function() {
  this.setPersistentvolumeclaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasPersistentvolumeclaim = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RBDVolumeSource rbd = 11;
 * @return {?proto.k8s.io.api.core.v1.RBDVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getRbd = function() {
  return /** @type{?proto.k8s.io.api.core.v1.RBDVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.RBDVolumeSource, 11));
};


/** @param {?proto.k8s.io.api.core.v1.RBDVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setRbd = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearRbd = function() {
  this.setRbd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasRbd = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional FlexVolumeSource flexVolume = 12;
 * @return {?proto.k8s.io.api.core.v1.FlexVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getFlexvolume = function() {
  return /** @type{?proto.k8s.io.api.core.v1.FlexVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.FlexVolumeSource, 12));
};


/** @param {?proto.k8s.io.api.core.v1.FlexVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setFlexvolume = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearFlexvolume = function() {
  this.setFlexvolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasFlexvolume = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CinderVolumeSource cinder = 13;
 * @return {?proto.k8s.io.api.core.v1.CinderVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getCinder = function() {
  return /** @type{?proto.k8s.io.api.core.v1.CinderVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.CinderVolumeSource, 13));
};


/** @param {?proto.k8s.io.api.core.v1.CinderVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setCinder = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearCinder = function() {
  this.setCinder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasCinder = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CephFSVolumeSource cephfs = 14;
 * @return {?proto.k8s.io.api.core.v1.CephFSVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getCephfs = function() {
  return /** @type{?proto.k8s.io.api.core.v1.CephFSVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.CephFSVolumeSource, 14));
};


/** @param {?proto.k8s.io.api.core.v1.CephFSVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setCephfs = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearCephfs = function() {
  this.setCephfs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasCephfs = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional FlockerVolumeSource flocker = 15;
 * @return {?proto.k8s.io.api.core.v1.FlockerVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getFlocker = function() {
  return /** @type{?proto.k8s.io.api.core.v1.FlockerVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.FlockerVolumeSource, 15));
};


/** @param {?proto.k8s.io.api.core.v1.FlockerVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setFlocker = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearFlocker = function() {
  this.setFlocker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasFlocker = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional DownwardAPIVolumeSource downwardAPI = 16;
 * @return {?proto.k8s.io.api.core.v1.DownwardAPIVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getDownwardapi = function() {
  return /** @type{?proto.k8s.io.api.core.v1.DownwardAPIVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.DownwardAPIVolumeSource, 16));
};


/** @param {?proto.k8s.io.api.core.v1.DownwardAPIVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setDownwardapi = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearDownwardapi = function() {
  this.setDownwardapi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasDownwardapi = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional FCVolumeSource fc = 17;
 * @return {?proto.k8s.io.api.core.v1.FCVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getFc = function() {
  return /** @type{?proto.k8s.io.api.core.v1.FCVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.FCVolumeSource, 17));
};


/** @param {?proto.k8s.io.api.core.v1.FCVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setFc = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearFc = function() {
  this.setFc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasFc = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional AzureFileVolumeSource azureFile = 18;
 * @return {?proto.k8s.io.api.core.v1.AzureFileVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getAzurefile = function() {
  return /** @type{?proto.k8s.io.api.core.v1.AzureFileVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.AzureFileVolumeSource, 18));
};


/** @param {?proto.k8s.io.api.core.v1.AzureFileVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setAzurefile = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearAzurefile = function() {
  this.setAzurefile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasAzurefile = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ConfigMapVolumeSource configMap = 19;
 * @return {?proto.k8s.io.api.core.v1.ConfigMapVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getConfigmap = function() {
  return /** @type{?proto.k8s.io.api.core.v1.ConfigMapVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.ConfigMapVolumeSource, 19));
};


/** @param {?proto.k8s.io.api.core.v1.ConfigMapVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setConfigmap = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearConfigmap = function() {
  this.setConfigmap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasConfigmap = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional VsphereVirtualDiskVolumeSource vsphereVolume = 20;
 * @return {?proto.k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getVspherevolume = function() {
  return /** @type{?proto.k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource, 20));
};


/** @param {?proto.k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setVspherevolume = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearVspherevolume = function() {
  this.setVspherevolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasVspherevolume = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional QuobyteVolumeSource quobyte = 21;
 * @return {?proto.k8s.io.api.core.v1.QuobyteVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getQuobyte = function() {
  return /** @type{?proto.k8s.io.api.core.v1.QuobyteVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.QuobyteVolumeSource, 21));
};


/** @param {?proto.k8s.io.api.core.v1.QuobyteVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setQuobyte = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearQuobyte = function() {
  this.setQuobyte(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasQuobyte = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional AzureDiskVolumeSource azureDisk = 22;
 * @return {?proto.k8s.io.api.core.v1.AzureDiskVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getAzuredisk = function() {
  return /** @type{?proto.k8s.io.api.core.v1.AzureDiskVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.AzureDiskVolumeSource, 22));
};


/** @param {?proto.k8s.io.api.core.v1.AzureDiskVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setAzuredisk = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearAzuredisk = function() {
  this.setAzuredisk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasAzuredisk = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional PhotonPersistentDiskVolumeSource photonPersistentDisk = 23;
 * @return {?proto.k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getPhotonpersistentdisk = function() {
  return /** @type{?proto.k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource, 23));
};


/** @param {?proto.k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setPhotonpersistentdisk = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearPhotonpersistentdisk = function() {
  this.setPhotonpersistentdisk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasPhotonpersistentdisk = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional ProjectedVolumeSource projected = 26;
 * @return {?proto.k8s.io.api.core.v1.ProjectedVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getProjected = function() {
  return /** @type{?proto.k8s.io.api.core.v1.ProjectedVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.ProjectedVolumeSource, 26));
};


/** @param {?proto.k8s.io.api.core.v1.ProjectedVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setProjected = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearProjected = function() {
  this.setProjected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasProjected = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional PortworxVolumeSource portworxVolume = 24;
 * @return {?proto.k8s.io.api.core.v1.PortworxVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getPortworxvolume = function() {
  return /** @type{?proto.k8s.io.api.core.v1.PortworxVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.PortworxVolumeSource, 24));
};


/** @param {?proto.k8s.io.api.core.v1.PortworxVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setPortworxvolume = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearPortworxvolume = function() {
  this.setPortworxvolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasPortworxvolume = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional ScaleIOVolumeSource scaleIO = 25;
 * @return {?proto.k8s.io.api.core.v1.ScaleIOVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getScaleio = function() {
  return /** @type{?proto.k8s.io.api.core.v1.ScaleIOVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.ScaleIOVolumeSource, 25));
};


/** @param {?proto.k8s.io.api.core.v1.ScaleIOVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setScaleio = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearScaleio = function() {
  this.setScaleio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasScaleio = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional StorageOSVolumeSource storageos = 27;
 * @return {?proto.k8s.io.api.core.v1.StorageOSVolumeSource}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.getStorageos = function() {
  return /** @type{?proto.k8s.io.api.core.v1.StorageOSVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.StorageOSVolumeSource, 27));
};


/** @param {?proto.k8s.io.api.core.v1.StorageOSVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.VolumeSource.prototype.setStorageos = function(value) {
  jspb.Message.setWrapperField(this, 27, value);
};


proto.k8s.io.api.core.v1.VolumeSource.prototype.clearStorageos = function() {
  this.setStorageos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.VolumeSource.prototype.hasStorageos = function() {
  return jspb.Message.getField(this, 27) != null;
};


