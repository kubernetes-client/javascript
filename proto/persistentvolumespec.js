/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.k8s.io.api.core.v1.PersistentVolumeSpec');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.k8s.io.api.core.v1.ObjectReference');
goog.require('proto.k8s.io.api.core.v1.PersistentVolumeSource');
goog.require('proto.k8s.io.api.core.v1.VolumeNodeAffinity');
goog.require('proto.k8s.io.apimachinery.pkg.api.resource.Quantity');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.k8s.io.api.core.v1.PersistentVolumeSpec.repeatedFields_, null);
};
goog.inherits(proto.k8s.io.api.core.v1.PersistentVolumeSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.k8s.io.api.core.v1.PersistentVolumeSpec.displayName = 'proto.k8s.io.api.core.v1.PersistentVolumeSpec';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.repeatedFields_ = [3,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.k8s.io.api.core.v1.PersistentVolumeSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.k8s.io.api.core.v1.PersistentVolumeSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    capacityMap: (f = msg.getCapacityMap()) ? f.toObject(includeInstance, proto.k8s.io.apimachinery.pkg.api.resource.Quantity.toObject) : [],
    persistentvolumesource: (f = msg.getPersistentvolumesource()) && proto.k8s.io.api.core.v1.PersistentVolumeSource.toObject(includeInstance, f),
    accessmodesList: jspb.Message.getRepeatedField(msg, 3),
    claimref: (f = msg.getClaimref()) && proto.k8s.io.api.core.v1.ObjectReference.toObject(includeInstance, f),
    persistentvolumereclaimpolicy: jspb.Message.getField(msg, 5),
    storageclassname: jspb.Message.getField(msg, 6),
    mountoptionsList: jspb.Message.getRepeatedField(msg, 7),
    volumemode: jspb.Message.getField(msg, 8),
    nodeaffinity: (f = msg.getNodeaffinity()) && proto.k8s.io.api.core.v1.VolumeNodeAffinity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.k8s.io.api.core.v1.PersistentVolumeSpec}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.k8s.io.api.core.v1.PersistentVolumeSpec;
  return proto.k8s.io.api.core.v1.PersistentVolumeSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.k8s.io.api.core.v1.PersistentVolumeSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.k8s.io.api.core.v1.PersistentVolumeSpec}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getCapacityMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.k8s.io.apimachinery.pkg.api.resource.Quantity.deserializeBinaryFromReader, "");
         });
      break;
    case 2:
      var value = new proto.k8s.io.api.core.v1.PersistentVolumeSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.PersistentVolumeSource.deserializeBinaryFromReader);
      msg.setPersistentvolumesource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccessmodes(value);
      break;
    case 4:
      var value = new proto.k8s.io.api.core.v1.ObjectReference;
      reader.readMessage(value,proto.k8s.io.api.core.v1.ObjectReference.deserializeBinaryFromReader);
      msg.setClaimref(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPersistentvolumereclaimpolicy(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageclassname(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addMountoptions(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolumemode(value);
      break;
    case 9:
      var value = new proto.k8s.io.api.core.v1.VolumeNodeAffinity;
      reader.readMessage(value,proto.k8s.io.api.core.v1.VolumeNodeAffinity.deserializeBinaryFromReader);
      msg.setNodeaffinity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.k8s.io.api.core.v1.PersistentVolumeSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.k8s.io.api.core.v1.PersistentVolumeSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCapacityMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.k8s.io.apimachinery.pkg.api.resource.Quantity.serializeBinaryToWriter);
  }
  f = message.getPersistentvolumesource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.k8s.io.api.core.v1.PersistentVolumeSource.serializeBinaryToWriter
    );
  }
  f = message.getAccessmodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getClaimref();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.k8s.io.api.core.v1.ObjectReference.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMountoptionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNodeaffinity();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.k8s.io.api.core.v1.VolumeNodeAffinity.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> capacity = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.k8s.io.apimachinery.pkg.api.resource.Quantity>}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.getCapacityMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.k8s.io.apimachinery.pkg.api.resource.Quantity>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.k8s.io.apimachinery.pkg.api.resource.Quantity));
};


proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.clearCapacityMap = function() {
  this.getCapacityMap().clear();
};


/**
 * optional PersistentVolumeSource persistentVolumeSource = 2;
 * @return {?proto.k8s.io.api.core.v1.PersistentVolumeSource}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.getPersistentvolumesource = function() {
  return /** @type{?proto.k8s.io.api.core.v1.PersistentVolumeSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.PersistentVolumeSource, 2));
};


/** @param {?proto.k8s.io.api.core.v1.PersistentVolumeSource|undefined} value */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.setPersistentvolumesource = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.clearPersistentvolumesource = function() {
  this.setPersistentvolumesource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.hasPersistentvolumesource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string accessModes = 3;
 * @return {!Array<string>}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.getAccessmodesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.setAccessmodesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.addAccessmodes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.clearAccessmodesList = function() {
  this.setAccessmodesList([]);
};


/**
 * optional ObjectReference claimRef = 4;
 * @return {?proto.k8s.io.api.core.v1.ObjectReference}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.getClaimref = function() {
  return /** @type{?proto.k8s.io.api.core.v1.ObjectReference} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.ObjectReference, 4));
};


/** @param {?proto.k8s.io.api.core.v1.ObjectReference|undefined} value */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.setClaimref = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.clearClaimref = function() {
  this.setClaimref(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.hasClaimref = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string persistentVolumeReclaimPolicy = 5;
 * @return {string}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.getPersistentvolumereclaimpolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.setPersistentvolumereclaimpolicy = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.clearPersistentvolumereclaimpolicy = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.hasPersistentvolumereclaimpolicy = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string storageClassName = 6;
 * @return {string}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.getStorageclassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.setStorageclassname = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.clearStorageclassname = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.hasStorageclassname = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string mountOptions = 7;
 * @return {!Array<string>}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.getMountoptionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.setMountoptionsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.addMountoptions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.clearMountoptionsList = function() {
  this.setMountoptionsList([]);
};


/**
 * optional string volumeMode = 8;
 * @return {string}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.getVolumemode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.setVolumemode = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.clearVolumemode = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.hasVolumemode = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional VolumeNodeAffinity nodeAffinity = 9;
 * @return {?proto.k8s.io.api.core.v1.VolumeNodeAffinity}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.getNodeaffinity = function() {
  return /** @type{?proto.k8s.io.api.core.v1.VolumeNodeAffinity} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.VolumeNodeAffinity, 9));
};


/** @param {?proto.k8s.io.api.core.v1.VolumeNodeAffinity|undefined} value */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.setNodeaffinity = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.clearNodeaffinity = function() {
  this.setNodeaffinity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.PersistentVolumeSpec.prototype.hasNodeaffinity = function() {
  return jspb.Message.getField(this, 9) != null;
};


