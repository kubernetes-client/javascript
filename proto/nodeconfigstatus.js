/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.k8s.io.api.core.v1.NodeConfigStatus');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.k8s.io.api.core.v1.NodeConfigSource');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.k8s.io.api.core.v1.NodeConfigStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.k8s.io.api.core.v1.NodeConfigStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.k8s.io.api.core.v1.NodeConfigStatus.displayName = 'proto.k8s.io.api.core.v1.NodeConfigStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.k8s.io.api.core.v1.NodeConfigStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.k8s.io.api.core.v1.NodeConfigStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    assigned: (f = msg.getAssigned()) && proto.k8s.io.api.core.v1.NodeConfigSource.toObject(includeInstance, f),
    active: (f = msg.getActive()) && proto.k8s.io.api.core.v1.NodeConfigSource.toObject(includeInstance, f),
    lastknowngood: (f = msg.getLastknowngood()) && proto.k8s.io.api.core.v1.NodeConfigSource.toObject(includeInstance, f),
    error: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.k8s.io.api.core.v1.NodeConfigStatus}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.k8s.io.api.core.v1.NodeConfigStatus;
  return proto.k8s.io.api.core.v1.NodeConfigStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.k8s.io.api.core.v1.NodeConfigStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.k8s.io.api.core.v1.NodeConfigStatus}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.k8s.io.api.core.v1.NodeConfigSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.NodeConfigSource.deserializeBinaryFromReader);
      msg.setAssigned(value);
      break;
    case 2:
      var value = new proto.k8s.io.api.core.v1.NodeConfigSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.NodeConfigSource.deserializeBinaryFromReader);
      msg.setActive(value);
      break;
    case 3:
      var value = new proto.k8s.io.api.core.v1.NodeConfigSource;
      reader.readMessage(value,proto.k8s.io.api.core.v1.NodeConfigSource.deserializeBinaryFromReader);
      msg.setLastknowngood(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.k8s.io.api.core.v1.NodeConfigStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.k8s.io.api.core.v1.NodeConfigStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssigned();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.k8s.io.api.core.v1.NodeConfigSource.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.k8s.io.api.core.v1.NodeConfigSource.serializeBinaryToWriter
    );
  }
  f = message.getLastknowngood();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.k8s.io.api.core.v1.NodeConfigSource.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional NodeConfigSource assigned = 1;
 * @return {?proto.k8s.io.api.core.v1.NodeConfigSource}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.getAssigned = function() {
  return /** @type{?proto.k8s.io.api.core.v1.NodeConfigSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.NodeConfigSource, 1));
};


/** @param {?proto.k8s.io.api.core.v1.NodeConfigSource|undefined} value */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.setAssigned = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.clearAssigned = function() {
  this.setAssigned(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.hasAssigned = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NodeConfigSource active = 2;
 * @return {?proto.k8s.io.api.core.v1.NodeConfigSource}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.getActive = function() {
  return /** @type{?proto.k8s.io.api.core.v1.NodeConfigSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.NodeConfigSource, 2));
};


/** @param {?proto.k8s.io.api.core.v1.NodeConfigSource|undefined} value */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.setActive = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.clearActive = function() {
  this.setActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.hasActive = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NodeConfigSource lastKnownGood = 3;
 * @return {?proto.k8s.io.api.core.v1.NodeConfigSource}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.getLastknowngood = function() {
  return /** @type{?proto.k8s.io.api.core.v1.NodeConfigSource} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.NodeConfigSource, 3));
};


/** @param {?proto.k8s.io.api.core.v1.NodeConfigSource|undefined} value */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.setLastknowngood = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.clearLastknowngood = function() {
  this.setLastknowngood(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.hasLastknowngood = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string error = 4;
 * @return {string}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.clearError = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.NodeConfigStatus.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};


