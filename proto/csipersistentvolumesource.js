/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.k8s.io.api.core.v1.CSIPersistentVolumeSource');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.k8s.io.api.core.v1.SecretReference');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.k8s.io.api.core.v1.CSIPersistentVolumeSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.displayName = 'proto.k8s.io.api.core.v1.CSIPersistentVolumeSource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.toObject = function(opt_includeInstance) {
  return proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.k8s.io.api.core.v1.CSIPersistentVolumeSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    driver: jspb.Message.getField(msg, 1),
    volumehandle: jspb.Message.getField(msg, 2),
    readonly: jspb.Message.getField(msg, 3),
    fstype: jspb.Message.getField(msg, 4),
    volumeattributesMap: (f = msg.getVolumeattributesMap()) ? f.toObject(includeInstance, undefined) : [],
    controllerpublishsecretref: (f = msg.getControllerpublishsecretref()) && proto.k8s.io.api.core.v1.SecretReference.toObject(includeInstance, f),
    nodestagesecretref: (f = msg.getNodestagesecretref()) && proto.k8s.io.api.core.v1.SecretReference.toObject(includeInstance, f),
    nodepublishsecretref: (f = msg.getNodepublishsecretref()) && proto.k8s.io.api.core.v1.SecretReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.k8s.io.api.core.v1.CSIPersistentVolumeSource}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.k8s.io.api.core.v1.CSIPersistentVolumeSource;
  return proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.k8s.io.api.core.v1.CSIPersistentVolumeSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.k8s.io.api.core.v1.CSIPersistentVolumeSource}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriver(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolumehandle(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadonly(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFstype(value);
      break;
    case 5:
      var value = msg.getVolumeattributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 6:
      var value = new proto.k8s.io.api.core.v1.SecretReference;
      reader.readMessage(value,proto.k8s.io.api.core.v1.SecretReference.deserializeBinaryFromReader);
      msg.setControllerpublishsecretref(value);
      break;
    case 7:
      var value = new proto.k8s.io.api.core.v1.SecretReference;
      reader.readMessage(value,proto.k8s.io.api.core.v1.SecretReference.deserializeBinaryFromReader);
      msg.setNodestagesecretref(value);
      break;
    case 8:
      var value = new proto.k8s.io.api.core.v1.SecretReference;
      reader.readMessage(value,proto.k8s.io.api.core.v1.SecretReference.deserializeBinaryFromReader);
      msg.setNodepublishsecretref(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.k8s.io.api.core.v1.CSIPersistentVolumeSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVolumeattributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getControllerpublishsecretref();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.k8s.io.api.core.v1.SecretReference.serializeBinaryToWriter
    );
  }
  f = message.getNodestagesecretref();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.k8s.io.api.core.v1.SecretReference.serializeBinaryToWriter
    );
  }
  f = message.getNodepublishsecretref();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.k8s.io.api.core.v1.SecretReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional string driver = 1;
 * @return {string}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.getDriver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.setDriver = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.clearDriver = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.hasDriver = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string volumeHandle = 2;
 * @return {string}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.getVolumehandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.setVolumehandle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.clearVolumehandle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.hasVolumehandle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool readOnly = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.getReadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.setReadonly = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.clearReadonly = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.hasReadonly = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string fsType = 4;
 * @return {string}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.getFstype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.setFstype = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.clearFstype = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.hasFstype = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, string> volumeAttributes = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.getVolumeattributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.clearVolumeattributesMap = function() {
  this.getVolumeattributesMap().clear();
};


/**
 * optional SecretReference controllerPublishSecretRef = 6;
 * @return {?proto.k8s.io.api.core.v1.SecretReference}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.getControllerpublishsecretref = function() {
  return /** @type{?proto.k8s.io.api.core.v1.SecretReference} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.SecretReference, 6));
};


/** @param {?proto.k8s.io.api.core.v1.SecretReference|undefined} value */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.setControllerpublishsecretref = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.clearControllerpublishsecretref = function() {
  this.setControllerpublishsecretref(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.hasControllerpublishsecretref = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SecretReference nodeStageSecretRef = 7;
 * @return {?proto.k8s.io.api.core.v1.SecretReference}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.getNodestagesecretref = function() {
  return /** @type{?proto.k8s.io.api.core.v1.SecretReference} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.SecretReference, 7));
};


/** @param {?proto.k8s.io.api.core.v1.SecretReference|undefined} value */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.setNodestagesecretref = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.clearNodestagesecretref = function() {
  this.setNodestagesecretref(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.hasNodestagesecretref = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SecretReference nodePublishSecretRef = 8;
 * @return {?proto.k8s.io.api.core.v1.SecretReference}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.getNodepublishsecretref = function() {
  return /** @type{?proto.k8s.io.api.core.v1.SecretReference} */ (
    jspb.Message.getWrapperField(this, proto.k8s.io.api.core.v1.SecretReference, 8));
};


/** @param {?proto.k8s.io.api.core.v1.SecretReference|undefined} value */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.setNodepublishsecretref = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.clearNodepublishsecretref = function() {
  this.setNodepublishsecretref(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.k8s.io.api.core.v1.CSIPersistentVolumeSource.prototype.hasNodepublishsecretref = function() {
  return jspb.Message.getField(this, 8) != null;
};


