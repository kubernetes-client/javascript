"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var request = require("request");
var Promise = require("bluebird");
var defaultBasePath = 'https://localhost';
var AdmissionregistrationV1beta1ServiceReference = (function () {
    function AdmissionregistrationV1beta1ServiceReference() {
    }
    return AdmissionregistrationV1beta1ServiceReference;
}());
exports.AdmissionregistrationV1beta1ServiceReference = AdmissionregistrationV1beta1ServiceReference;
var ApiregistrationV1beta1ServiceReference = (function () {
    function ApiregistrationV1beta1ServiceReference() {
    }
    return ApiregistrationV1beta1ServiceReference;
}());
exports.ApiregistrationV1beta1ServiceReference = ApiregistrationV1beta1ServiceReference;
var AppsV1beta1Deployment = (function () {
    function AppsV1beta1Deployment() {
    }
    return AppsV1beta1Deployment;
}());
exports.AppsV1beta1Deployment = AppsV1beta1Deployment;
var AppsV1beta1DeploymentCondition = (function () {
    function AppsV1beta1DeploymentCondition() {
    }
    return AppsV1beta1DeploymentCondition;
}());
exports.AppsV1beta1DeploymentCondition = AppsV1beta1DeploymentCondition;
var AppsV1beta1DeploymentList = (function () {
    function AppsV1beta1DeploymentList() {
    }
    return AppsV1beta1DeploymentList;
}());
exports.AppsV1beta1DeploymentList = AppsV1beta1DeploymentList;
var AppsV1beta1DeploymentRollback = (function () {
    function AppsV1beta1DeploymentRollback() {
    }
    return AppsV1beta1DeploymentRollback;
}());
exports.AppsV1beta1DeploymentRollback = AppsV1beta1DeploymentRollback;
var AppsV1beta1DeploymentSpec = (function () {
    function AppsV1beta1DeploymentSpec() {
    }
    return AppsV1beta1DeploymentSpec;
}());
exports.AppsV1beta1DeploymentSpec = AppsV1beta1DeploymentSpec;
var AppsV1beta1DeploymentStatus = (function () {
    function AppsV1beta1DeploymentStatus() {
    }
    return AppsV1beta1DeploymentStatus;
}());
exports.AppsV1beta1DeploymentStatus = AppsV1beta1DeploymentStatus;
var AppsV1beta1DeploymentStrategy = (function () {
    function AppsV1beta1DeploymentStrategy() {
    }
    return AppsV1beta1DeploymentStrategy;
}());
exports.AppsV1beta1DeploymentStrategy = AppsV1beta1DeploymentStrategy;
var AppsV1beta1RollbackConfig = (function () {
    function AppsV1beta1RollbackConfig() {
    }
    return AppsV1beta1RollbackConfig;
}());
exports.AppsV1beta1RollbackConfig = AppsV1beta1RollbackConfig;
var AppsV1beta1RollingUpdateDeployment = (function () {
    function AppsV1beta1RollingUpdateDeployment() {
    }
    return AppsV1beta1RollingUpdateDeployment;
}());
exports.AppsV1beta1RollingUpdateDeployment = AppsV1beta1RollingUpdateDeployment;
var AppsV1beta1Scale = (function () {
    function AppsV1beta1Scale() {
    }
    return AppsV1beta1Scale;
}());
exports.AppsV1beta1Scale = AppsV1beta1Scale;
var AppsV1beta1ScaleSpec = (function () {
    function AppsV1beta1ScaleSpec() {
    }
    return AppsV1beta1ScaleSpec;
}());
exports.AppsV1beta1ScaleSpec = AppsV1beta1ScaleSpec;
var AppsV1beta1ScaleStatus = (function () {
    function AppsV1beta1ScaleStatus() {
    }
    return AppsV1beta1ScaleStatus;
}());
exports.AppsV1beta1ScaleStatus = AppsV1beta1ScaleStatus;
var ExtensionsV1beta1AllowedFlexVolume = (function () {
    function ExtensionsV1beta1AllowedFlexVolume() {
    }
    return ExtensionsV1beta1AllowedFlexVolume;
}());
exports.ExtensionsV1beta1AllowedFlexVolume = ExtensionsV1beta1AllowedFlexVolume;
var ExtensionsV1beta1AllowedHostPath = (function () {
    function ExtensionsV1beta1AllowedHostPath() {
    }
    return ExtensionsV1beta1AllowedHostPath;
}());
exports.ExtensionsV1beta1AllowedHostPath = ExtensionsV1beta1AllowedHostPath;
var ExtensionsV1beta1Deployment = (function () {
    function ExtensionsV1beta1Deployment() {
    }
    return ExtensionsV1beta1Deployment;
}());
exports.ExtensionsV1beta1Deployment = ExtensionsV1beta1Deployment;
var ExtensionsV1beta1DeploymentCondition = (function () {
    function ExtensionsV1beta1DeploymentCondition() {
    }
    return ExtensionsV1beta1DeploymentCondition;
}());
exports.ExtensionsV1beta1DeploymentCondition = ExtensionsV1beta1DeploymentCondition;
var ExtensionsV1beta1DeploymentList = (function () {
    function ExtensionsV1beta1DeploymentList() {
    }
    return ExtensionsV1beta1DeploymentList;
}());
exports.ExtensionsV1beta1DeploymentList = ExtensionsV1beta1DeploymentList;
var ExtensionsV1beta1DeploymentRollback = (function () {
    function ExtensionsV1beta1DeploymentRollback() {
    }
    return ExtensionsV1beta1DeploymentRollback;
}());
exports.ExtensionsV1beta1DeploymentRollback = ExtensionsV1beta1DeploymentRollback;
var ExtensionsV1beta1DeploymentSpec = (function () {
    function ExtensionsV1beta1DeploymentSpec() {
    }
    return ExtensionsV1beta1DeploymentSpec;
}());
exports.ExtensionsV1beta1DeploymentSpec = ExtensionsV1beta1DeploymentSpec;
var ExtensionsV1beta1DeploymentStatus = (function () {
    function ExtensionsV1beta1DeploymentStatus() {
    }
    return ExtensionsV1beta1DeploymentStatus;
}());
exports.ExtensionsV1beta1DeploymentStatus = ExtensionsV1beta1DeploymentStatus;
var ExtensionsV1beta1DeploymentStrategy = (function () {
    function ExtensionsV1beta1DeploymentStrategy() {
    }
    return ExtensionsV1beta1DeploymentStrategy;
}());
exports.ExtensionsV1beta1DeploymentStrategy = ExtensionsV1beta1DeploymentStrategy;
var ExtensionsV1beta1FSGroupStrategyOptions = (function () {
    function ExtensionsV1beta1FSGroupStrategyOptions() {
    }
    return ExtensionsV1beta1FSGroupStrategyOptions;
}());
exports.ExtensionsV1beta1FSGroupStrategyOptions = ExtensionsV1beta1FSGroupStrategyOptions;
var ExtensionsV1beta1HostPortRange = (function () {
    function ExtensionsV1beta1HostPortRange() {
    }
    return ExtensionsV1beta1HostPortRange;
}());
exports.ExtensionsV1beta1HostPortRange = ExtensionsV1beta1HostPortRange;
var ExtensionsV1beta1IDRange = (function () {
    function ExtensionsV1beta1IDRange() {
    }
    return ExtensionsV1beta1IDRange;
}());
exports.ExtensionsV1beta1IDRange = ExtensionsV1beta1IDRange;
var ExtensionsV1beta1PodSecurityPolicy = (function () {
    function ExtensionsV1beta1PodSecurityPolicy() {
    }
    return ExtensionsV1beta1PodSecurityPolicy;
}());
exports.ExtensionsV1beta1PodSecurityPolicy = ExtensionsV1beta1PodSecurityPolicy;
var ExtensionsV1beta1PodSecurityPolicyList = (function () {
    function ExtensionsV1beta1PodSecurityPolicyList() {
    }
    return ExtensionsV1beta1PodSecurityPolicyList;
}());
exports.ExtensionsV1beta1PodSecurityPolicyList = ExtensionsV1beta1PodSecurityPolicyList;
var ExtensionsV1beta1PodSecurityPolicySpec = (function () {
    function ExtensionsV1beta1PodSecurityPolicySpec() {
    }
    return ExtensionsV1beta1PodSecurityPolicySpec;
}());
exports.ExtensionsV1beta1PodSecurityPolicySpec = ExtensionsV1beta1PodSecurityPolicySpec;
var ExtensionsV1beta1RollbackConfig = (function () {
    function ExtensionsV1beta1RollbackConfig() {
    }
    return ExtensionsV1beta1RollbackConfig;
}());
exports.ExtensionsV1beta1RollbackConfig = ExtensionsV1beta1RollbackConfig;
var ExtensionsV1beta1RollingUpdateDeployment = (function () {
    function ExtensionsV1beta1RollingUpdateDeployment() {
    }
    return ExtensionsV1beta1RollingUpdateDeployment;
}());
exports.ExtensionsV1beta1RollingUpdateDeployment = ExtensionsV1beta1RollingUpdateDeployment;
var ExtensionsV1beta1RunAsUserStrategyOptions = (function () {
    function ExtensionsV1beta1RunAsUserStrategyOptions() {
    }
    return ExtensionsV1beta1RunAsUserStrategyOptions;
}());
exports.ExtensionsV1beta1RunAsUserStrategyOptions = ExtensionsV1beta1RunAsUserStrategyOptions;
var ExtensionsV1beta1SELinuxStrategyOptions = (function () {
    function ExtensionsV1beta1SELinuxStrategyOptions() {
    }
    return ExtensionsV1beta1SELinuxStrategyOptions;
}());
exports.ExtensionsV1beta1SELinuxStrategyOptions = ExtensionsV1beta1SELinuxStrategyOptions;
var ExtensionsV1beta1Scale = (function () {
    function ExtensionsV1beta1Scale() {
    }
    return ExtensionsV1beta1Scale;
}());
exports.ExtensionsV1beta1Scale = ExtensionsV1beta1Scale;
var ExtensionsV1beta1ScaleSpec = (function () {
    function ExtensionsV1beta1ScaleSpec() {
    }
    return ExtensionsV1beta1ScaleSpec;
}());
exports.ExtensionsV1beta1ScaleSpec = ExtensionsV1beta1ScaleSpec;
var ExtensionsV1beta1ScaleStatus = (function () {
    function ExtensionsV1beta1ScaleStatus() {
    }
    return ExtensionsV1beta1ScaleStatus;
}());
exports.ExtensionsV1beta1ScaleStatus = ExtensionsV1beta1ScaleStatus;
var ExtensionsV1beta1SupplementalGroupsStrategyOptions = (function () {
    function ExtensionsV1beta1SupplementalGroupsStrategyOptions() {
    }
    return ExtensionsV1beta1SupplementalGroupsStrategyOptions;
}());
exports.ExtensionsV1beta1SupplementalGroupsStrategyOptions = ExtensionsV1beta1SupplementalGroupsStrategyOptions;
var PolicyV1beta1AllowedFlexVolume = (function () {
    function PolicyV1beta1AllowedFlexVolume() {
    }
    return PolicyV1beta1AllowedFlexVolume;
}());
exports.PolicyV1beta1AllowedFlexVolume = PolicyV1beta1AllowedFlexVolume;
var PolicyV1beta1AllowedHostPath = (function () {
    function PolicyV1beta1AllowedHostPath() {
    }
    return PolicyV1beta1AllowedHostPath;
}());
exports.PolicyV1beta1AllowedHostPath = PolicyV1beta1AllowedHostPath;
var PolicyV1beta1FSGroupStrategyOptions = (function () {
    function PolicyV1beta1FSGroupStrategyOptions() {
    }
    return PolicyV1beta1FSGroupStrategyOptions;
}());
exports.PolicyV1beta1FSGroupStrategyOptions = PolicyV1beta1FSGroupStrategyOptions;
var PolicyV1beta1HostPortRange = (function () {
    function PolicyV1beta1HostPortRange() {
    }
    return PolicyV1beta1HostPortRange;
}());
exports.PolicyV1beta1HostPortRange = PolicyV1beta1HostPortRange;
var PolicyV1beta1IDRange = (function () {
    function PolicyV1beta1IDRange() {
    }
    return PolicyV1beta1IDRange;
}());
exports.PolicyV1beta1IDRange = PolicyV1beta1IDRange;
var PolicyV1beta1PodSecurityPolicy = (function () {
    function PolicyV1beta1PodSecurityPolicy() {
    }
    return PolicyV1beta1PodSecurityPolicy;
}());
exports.PolicyV1beta1PodSecurityPolicy = PolicyV1beta1PodSecurityPolicy;
var PolicyV1beta1PodSecurityPolicyList = (function () {
    function PolicyV1beta1PodSecurityPolicyList() {
    }
    return PolicyV1beta1PodSecurityPolicyList;
}());
exports.PolicyV1beta1PodSecurityPolicyList = PolicyV1beta1PodSecurityPolicyList;
var PolicyV1beta1PodSecurityPolicySpec = (function () {
    function PolicyV1beta1PodSecurityPolicySpec() {
    }
    return PolicyV1beta1PodSecurityPolicySpec;
}());
exports.PolicyV1beta1PodSecurityPolicySpec = PolicyV1beta1PodSecurityPolicySpec;
var PolicyV1beta1RunAsUserStrategyOptions = (function () {
    function PolicyV1beta1RunAsUserStrategyOptions() {
    }
    return PolicyV1beta1RunAsUserStrategyOptions;
}());
exports.PolicyV1beta1RunAsUserStrategyOptions = PolicyV1beta1RunAsUserStrategyOptions;
var PolicyV1beta1SELinuxStrategyOptions = (function () {
    function PolicyV1beta1SELinuxStrategyOptions() {
    }
    return PolicyV1beta1SELinuxStrategyOptions;
}());
exports.PolicyV1beta1SELinuxStrategyOptions = PolicyV1beta1SELinuxStrategyOptions;
var PolicyV1beta1SupplementalGroupsStrategyOptions = (function () {
    function PolicyV1beta1SupplementalGroupsStrategyOptions() {
    }
    return PolicyV1beta1SupplementalGroupsStrategyOptions;
}());
exports.PolicyV1beta1SupplementalGroupsStrategyOptions = PolicyV1beta1SupplementalGroupsStrategyOptions;
var RuntimeRawExtension = (function () {
    function RuntimeRawExtension() {
    }
    return RuntimeRawExtension;
}());
exports.RuntimeRawExtension = RuntimeRawExtension;
var V1APIGroup = (function () {
    function V1APIGroup() {
    }
    return V1APIGroup;
}());
exports.V1APIGroup = V1APIGroup;
var V1APIGroupList = (function () {
    function V1APIGroupList() {
    }
    return V1APIGroupList;
}());
exports.V1APIGroupList = V1APIGroupList;
var V1APIResource = (function () {
    function V1APIResource() {
    }
    return V1APIResource;
}());
exports.V1APIResource = V1APIResource;
var V1APIResourceList = (function () {
    function V1APIResourceList() {
    }
    return V1APIResourceList;
}());
exports.V1APIResourceList = V1APIResourceList;
var V1APIService = (function () {
    function V1APIService() {
    }
    return V1APIService;
}());
exports.V1APIService = V1APIService;
var V1APIServiceCondition = (function () {
    function V1APIServiceCondition() {
    }
    return V1APIServiceCondition;
}());
exports.V1APIServiceCondition = V1APIServiceCondition;
var V1APIServiceList = (function () {
    function V1APIServiceList() {
    }
    return V1APIServiceList;
}());
exports.V1APIServiceList = V1APIServiceList;
var V1APIServiceSpec = (function () {
    function V1APIServiceSpec() {
    }
    return V1APIServiceSpec;
}());
exports.V1APIServiceSpec = V1APIServiceSpec;
var V1APIServiceStatus = (function () {
    function V1APIServiceStatus() {
    }
    return V1APIServiceStatus;
}());
exports.V1APIServiceStatus = V1APIServiceStatus;
var V1APIVersions = (function () {
    function V1APIVersions() {
    }
    return V1APIVersions;
}());
exports.V1APIVersions = V1APIVersions;
var V1AWSElasticBlockStoreVolumeSource = (function () {
    function V1AWSElasticBlockStoreVolumeSource() {
    }
    return V1AWSElasticBlockStoreVolumeSource;
}());
exports.V1AWSElasticBlockStoreVolumeSource = V1AWSElasticBlockStoreVolumeSource;
var V1Affinity = (function () {
    function V1Affinity() {
    }
    return V1Affinity;
}());
exports.V1Affinity = V1Affinity;
var V1AggregationRule = (function () {
    function V1AggregationRule() {
    }
    return V1AggregationRule;
}());
exports.V1AggregationRule = V1AggregationRule;
var V1AttachedVolume = (function () {
    function V1AttachedVolume() {
    }
    return V1AttachedVolume;
}());
exports.V1AttachedVolume = V1AttachedVolume;
var V1AzureDiskVolumeSource = (function () {
    function V1AzureDiskVolumeSource() {
    }
    return V1AzureDiskVolumeSource;
}());
exports.V1AzureDiskVolumeSource = V1AzureDiskVolumeSource;
var V1AzureFilePersistentVolumeSource = (function () {
    function V1AzureFilePersistentVolumeSource() {
    }
    return V1AzureFilePersistentVolumeSource;
}());
exports.V1AzureFilePersistentVolumeSource = V1AzureFilePersistentVolumeSource;
var V1AzureFileVolumeSource = (function () {
    function V1AzureFileVolumeSource() {
    }
    return V1AzureFileVolumeSource;
}());
exports.V1AzureFileVolumeSource = V1AzureFileVolumeSource;
var V1Binding = (function () {
    function V1Binding() {
    }
    return V1Binding;
}());
exports.V1Binding = V1Binding;
var V1CSIPersistentVolumeSource = (function () {
    function V1CSIPersistentVolumeSource() {
    }
    return V1CSIPersistentVolumeSource;
}());
exports.V1CSIPersistentVolumeSource = V1CSIPersistentVolumeSource;
var V1Capabilities = (function () {
    function V1Capabilities() {
    }
    return V1Capabilities;
}());
exports.V1Capabilities = V1Capabilities;
var V1CephFSPersistentVolumeSource = (function () {
    function V1CephFSPersistentVolumeSource() {
    }
    return V1CephFSPersistentVolumeSource;
}());
exports.V1CephFSPersistentVolumeSource = V1CephFSPersistentVolumeSource;
var V1CephFSVolumeSource = (function () {
    function V1CephFSVolumeSource() {
    }
    return V1CephFSVolumeSource;
}());
exports.V1CephFSVolumeSource = V1CephFSVolumeSource;
var V1CinderPersistentVolumeSource = (function () {
    function V1CinderPersistentVolumeSource() {
    }
    return V1CinderPersistentVolumeSource;
}());
exports.V1CinderPersistentVolumeSource = V1CinderPersistentVolumeSource;
var V1CinderVolumeSource = (function () {
    function V1CinderVolumeSource() {
    }
    return V1CinderVolumeSource;
}());
exports.V1CinderVolumeSource = V1CinderVolumeSource;
var V1ClientIPConfig = (function () {
    function V1ClientIPConfig() {
    }
    return V1ClientIPConfig;
}());
exports.V1ClientIPConfig = V1ClientIPConfig;
var V1ClusterRole = (function () {
    function V1ClusterRole() {
    }
    return V1ClusterRole;
}());
exports.V1ClusterRole = V1ClusterRole;
var V1ClusterRoleBinding = (function () {
    function V1ClusterRoleBinding() {
    }
    return V1ClusterRoleBinding;
}());
exports.V1ClusterRoleBinding = V1ClusterRoleBinding;
var V1ClusterRoleBindingList = (function () {
    function V1ClusterRoleBindingList() {
    }
    return V1ClusterRoleBindingList;
}());
exports.V1ClusterRoleBindingList = V1ClusterRoleBindingList;
var V1ClusterRoleList = (function () {
    function V1ClusterRoleList() {
    }
    return V1ClusterRoleList;
}());
exports.V1ClusterRoleList = V1ClusterRoleList;
var V1ComponentCondition = (function () {
    function V1ComponentCondition() {
    }
    return V1ComponentCondition;
}());
exports.V1ComponentCondition = V1ComponentCondition;
var V1ComponentStatus = (function () {
    function V1ComponentStatus() {
    }
    return V1ComponentStatus;
}());
exports.V1ComponentStatus = V1ComponentStatus;
var V1ComponentStatusList = (function () {
    function V1ComponentStatusList() {
    }
    return V1ComponentStatusList;
}());
exports.V1ComponentStatusList = V1ComponentStatusList;
var V1ConfigMap = (function () {
    function V1ConfigMap() {
    }
    return V1ConfigMap;
}());
exports.V1ConfigMap = V1ConfigMap;
var V1ConfigMapEnvSource = (function () {
    function V1ConfigMapEnvSource() {
    }
    return V1ConfigMapEnvSource;
}());
exports.V1ConfigMapEnvSource = V1ConfigMapEnvSource;
var V1ConfigMapKeySelector = (function () {
    function V1ConfigMapKeySelector() {
    }
    return V1ConfigMapKeySelector;
}());
exports.V1ConfigMapKeySelector = V1ConfigMapKeySelector;
var V1ConfigMapList = (function () {
    function V1ConfigMapList() {
    }
    return V1ConfigMapList;
}());
exports.V1ConfigMapList = V1ConfigMapList;
var V1ConfigMapNodeConfigSource = (function () {
    function V1ConfigMapNodeConfigSource() {
    }
    return V1ConfigMapNodeConfigSource;
}());
exports.V1ConfigMapNodeConfigSource = V1ConfigMapNodeConfigSource;
var V1ConfigMapProjection = (function () {
    function V1ConfigMapProjection() {
    }
    return V1ConfigMapProjection;
}());
exports.V1ConfigMapProjection = V1ConfigMapProjection;
var V1ConfigMapVolumeSource = (function () {
    function V1ConfigMapVolumeSource() {
    }
    return V1ConfigMapVolumeSource;
}());
exports.V1ConfigMapVolumeSource = V1ConfigMapVolumeSource;
var V1Container = (function () {
    function V1Container() {
    }
    return V1Container;
}());
exports.V1Container = V1Container;
var V1ContainerImage = (function () {
    function V1ContainerImage() {
    }
    return V1ContainerImage;
}());
exports.V1ContainerImage = V1ContainerImage;
var V1ContainerPort = (function () {
    function V1ContainerPort() {
    }
    return V1ContainerPort;
}());
exports.V1ContainerPort = V1ContainerPort;
var V1ContainerState = (function () {
    function V1ContainerState() {
    }
    return V1ContainerState;
}());
exports.V1ContainerState = V1ContainerState;
var V1ContainerStateRunning = (function () {
    function V1ContainerStateRunning() {
    }
    return V1ContainerStateRunning;
}());
exports.V1ContainerStateRunning = V1ContainerStateRunning;
var V1ContainerStateTerminated = (function () {
    function V1ContainerStateTerminated() {
    }
    return V1ContainerStateTerminated;
}());
exports.V1ContainerStateTerminated = V1ContainerStateTerminated;
var V1ContainerStateWaiting = (function () {
    function V1ContainerStateWaiting() {
    }
    return V1ContainerStateWaiting;
}());
exports.V1ContainerStateWaiting = V1ContainerStateWaiting;
var V1ContainerStatus = (function () {
    function V1ContainerStatus() {
    }
    return V1ContainerStatus;
}());
exports.V1ContainerStatus = V1ContainerStatus;
var V1ControllerRevision = (function () {
    function V1ControllerRevision() {
    }
    return V1ControllerRevision;
}());
exports.V1ControllerRevision = V1ControllerRevision;
var V1ControllerRevisionList = (function () {
    function V1ControllerRevisionList() {
    }
    return V1ControllerRevisionList;
}());
exports.V1ControllerRevisionList = V1ControllerRevisionList;
var V1CrossVersionObjectReference = (function () {
    function V1CrossVersionObjectReference() {
    }
    return V1CrossVersionObjectReference;
}());
exports.V1CrossVersionObjectReference = V1CrossVersionObjectReference;
var V1DaemonEndpoint = (function () {
    function V1DaemonEndpoint() {
    }
    return V1DaemonEndpoint;
}());
exports.V1DaemonEndpoint = V1DaemonEndpoint;
var V1DaemonSet = (function () {
    function V1DaemonSet() {
    }
    return V1DaemonSet;
}());
exports.V1DaemonSet = V1DaemonSet;
var V1DaemonSetCondition = (function () {
    function V1DaemonSetCondition() {
    }
    return V1DaemonSetCondition;
}());
exports.V1DaemonSetCondition = V1DaemonSetCondition;
var V1DaemonSetList = (function () {
    function V1DaemonSetList() {
    }
    return V1DaemonSetList;
}());
exports.V1DaemonSetList = V1DaemonSetList;
var V1DaemonSetSpec = (function () {
    function V1DaemonSetSpec() {
    }
    return V1DaemonSetSpec;
}());
exports.V1DaemonSetSpec = V1DaemonSetSpec;
var V1DaemonSetStatus = (function () {
    function V1DaemonSetStatus() {
    }
    return V1DaemonSetStatus;
}());
exports.V1DaemonSetStatus = V1DaemonSetStatus;
var V1DaemonSetUpdateStrategy = (function () {
    function V1DaemonSetUpdateStrategy() {
    }
    return V1DaemonSetUpdateStrategy;
}());
exports.V1DaemonSetUpdateStrategy = V1DaemonSetUpdateStrategy;
var V1DeleteOptions = (function () {
    function V1DeleteOptions() {
    }
    return V1DeleteOptions;
}());
exports.V1DeleteOptions = V1DeleteOptions;
var V1Deployment = (function () {
    function V1Deployment() {
    }
    return V1Deployment;
}());
exports.V1Deployment = V1Deployment;
var V1DeploymentCondition = (function () {
    function V1DeploymentCondition() {
    }
    return V1DeploymentCondition;
}());
exports.V1DeploymentCondition = V1DeploymentCondition;
var V1DeploymentList = (function () {
    function V1DeploymentList() {
    }
    return V1DeploymentList;
}());
exports.V1DeploymentList = V1DeploymentList;
var V1DeploymentSpec = (function () {
    function V1DeploymentSpec() {
    }
    return V1DeploymentSpec;
}());
exports.V1DeploymentSpec = V1DeploymentSpec;
var V1DeploymentStatus = (function () {
    function V1DeploymentStatus() {
    }
    return V1DeploymentStatus;
}());
exports.V1DeploymentStatus = V1DeploymentStatus;
var V1DeploymentStrategy = (function () {
    function V1DeploymentStrategy() {
    }
    return V1DeploymentStrategy;
}());
exports.V1DeploymentStrategy = V1DeploymentStrategy;
var V1DownwardAPIProjection = (function () {
    function V1DownwardAPIProjection() {
    }
    return V1DownwardAPIProjection;
}());
exports.V1DownwardAPIProjection = V1DownwardAPIProjection;
var V1DownwardAPIVolumeFile = (function () {
    function V1DownwardAPIVolumeFile() {
    }
    return V1DownwardAPIVolumeFile;
}());
exports.V1DownwardAPIVolumeFile = V1DownwardAPIVolumeFile;
var V1DownwardAPIVolumeSource = (function () {
    function V1DownwardAPIVolumeSource() {
    }
    return V1DownwardAPIVolumeSource;
}());
exports.V1DownwardAPIVolumeSource = V1DownwardAPIVolumeSource;
var V1EmptyDirVolumeSource = (function () {
    function V1EmptyDirVolumeSource() {
    }
    return V1EmptyDirVolumeSource;
}());
exports.V1EmptyDirVolumeSource = V1EmptyDirVolumeSource;
var V1EndpointAddress = (function () {
    function V1EndpointAddress() {
    }
    return V1EndpointAddress;
}());
exports.V1EndpointAddress = V1EndpointAddress;
var V1EndpointPort = (function () {
    function V1EndpointPort() {
    }
    return V1EndpointPort;
}());
exports.V1EndpointPort = V1EndpointPort;
var V1EndpointSubset = (function () {
    function V1EndpointSubset() {
    }
    return V1EndpointSubset;
}());
exports.V1EndpointSubset = V1EndpointSubset;
var V1Endpoints = (function () {
    function V1Endpoints() {
    }
    return V1Endpoints;
}());
exports.V1Endpoints = V1Endpoints;
var V1EndpointsList = (function () {
    function V1EndpointsList() {
    }
    return V1EndpointsList;
}());
exports.V1EndpointsList = V1EndpointsList;
var V1EnvFromSource = (function () {
    function V1EnvFromSource() {
    }
    return V1EnvFromSource;
}());
exports.V1EnvFromSource = V1EnvFromSource;
var V1EnvVar = (function () {
    function V1EnvVar() {
    }
    return V1EnvVar;
}());
exports.V1EnvVar = V1EnvVar;
var V1EnvVarSource = (function () {
    function V1EnvVarSource() {
    }
    return V1EnvVarSource;
}());
exports.V1EnvVarSource = V1EnvVarSource;
var V1Event = (function () {
    function V1Event() {
    }
    return V1Event;
}());
exports.V1Event = V1Event;
var V1EventList = (function () {
    function V1EventList() {
    }
    return V1EventList;
}());
exports.V1EventList = V1EventList;
var V1EventSeries = (function () {
    function V1EventSeries() {
    }
    return V1EventSeries;
}());
exports.V1EventSeries = V1EventSeries;
var V1EventSource = (function () {
    function V1EventSource() {
    }
    return V1EventSource;
}());
exports.V1EventSource = V1EventSource;
var V1ExecAction = (function () {
    function V1ExecAction() {
    }
    return V1ExecAction;
}());
exports.V1ExecAction = V1ExecAction;
var V1FCVolumeSource = (function () {
    function V1FCVolumeSource() {
    }
    return V1FCVolumeSource;
}());
exports.V1FCVolumeSource = V1FCVolumeSource;
var V1FlexPersistentVolumeSource = (function () {
    function V1FlexPersistentVolumeSource() {
    }
    return V1FlexPersistentVolumeSource;
}());
exports.V1FlexPersistentVolumeSource = V1FlexPersistentVolumeSource;
var V1FlexVolumeSource = (function () {
    function V1FlexVolumeSource() {
    }
    return V1FlexVolumeSource;
}());
exports.V1FlexVolumeSource = V1FlexVolumeSource;
var V1FlockerVolumeSource = (function () {
    function V1FlockerVolumeSource() {
    }
    return V1FlockerVolumeSource;
}());
exports.V1FlockerVolumeSource = V1FlockerVolumeSource;
var V1GCEPersistentDiskVolumeSource = (function () {
    function V1GCEPersistentDiskVolumeSource() {
    }
    return V1GCEPersistentDiskVolumeSource;
}());
exports.V1GCEPersistentDiskVolumeSource = V1GCEPersistentDiskVolumeSource;
var V1GitRepoVolumeSource = (function () {
    function V1GitRepoVolumeSource() {
    }
    return V1GitRepoVolumeSource;
}());
exports.V1GitRepoVolumeSource = V1GitRepoVolumeSource;
var V1GlusterfsVolumeSource = (function () {
    function V1GlusterfsVolumeSource() {
    }
    return V1GlusterfsVolumeSource;
}());
exports.V1GlusterfsVolumeSource = V1GlusterfsVolumeSource;
var V1GroupVersionForDiscovery = (function () {
    function V1GroupVersionForDiscovery() {
    }
    return V1GroupVersionForDiscovery;
}());
exports.V1GroupVersionForDiscovery = V1GroupVersionForDiscovery;
var V1HTTPGetAction = (function () {
    function V1HTTPGetAction() {
    }
    return V1HTTPGetAction;
}());
exports.V1HTTPGetAction = V1HTTPGetAction;
var V1HTTPHeader = (function () {
    function V1HTTPHeader() {
    }
    return V1HTTPHeader;
}());
exports.V1HTTPHeader = V1HTTPHeader;
var V1Handler = (function () {
    function V1Handler() {
    }
    return V1Handler;
}());
exports.V1Handler = V1Handler;
var V1HorizontalPodAutoscaler = (function () {
    function V1HorizontalPodAutoscaler() {
    }
    return V1HorizontalPodAutoscaler;
}());
exports.V1HorizontalPodAutoscaler = V1HorizontalPodAutoscaler;
var V1HorizontalPodAutoscalerList = (function () {
    function V1HorizontalPodAutoscalerList() {
    }
    return V1HorizontalPodAutoscalerList;
}());
exports.V1HorizontalPodAutoscalerList = V1HorizontalPodAutoscalerList;
var V1HorizontalPodAutoscalerSpec = (function () {
    function V1HorizontalPodAutoscalerSpec() {
    }
    return V1HorizontalPodAutoscalerSpec;
}());
exports.V1HorizontalPodAutoscalerSpec = V1HorizontalPodAutoscalerSpec;
var V1HorizontalPodAutoscalerStatus = (function () {
    function V1HorizontalPodAutoscalerStatus() {
    }
    return V1HorizontalPodAutoscalerStatus;
}());
exports.V1HorizontalPodAutoscalerStatus = V1HorizontalPodAutoscalerStatus;
var V1HostAlias = (function () {
    function V1HostAlias() {
    }
    return V1HostAlias;
}());
exports.V1HostAlias = V1HostAlias;
var V1HostPathVolumeSource = (function () {
    function V1HostPathVolumeSource() {
    }
    return V1HostPathVolumeSource;
}());
exports.V1HostPathVolumeSource = V1HostPathVolumeSource;
var V1IPBlock = (function () {
    function V1IPBlock() {
    }
    return V1IPBlock;
}());
exports.V1IPBlock = V1IPBlock;
var V1ISCSIPersistentVolumeSource = (function () {
    function V1ISCSIPersistentVolumeSource() {
    }
    return V1ISCSIPersistentVolumeSource;
}());
exports.V1ISCSIPersistentVolumeSource = V1ISCSIPersistentVolumeSource;
var V1ISCSIVolumeSource = (function () {
    function V1ISCSIVolumeSource() {
    }
    return V1ISCSIVolumeSource;
}());
exports.V1ISCSIVolumeSource = V1ISCSIVolumeSource;
var V1Initializer = (function () {
    function V1Initializer() {
    }
    return V1Initializer;
}());
exports.V1Initializer = V1Initializer;
var V1Initializers = (function () {
    function V1Initializers() {
    }
    return V1Initializers;
}());
exports.V1Initializers = V1Initializers;
var V1Job = (function () {
    function V1Job() {
    }
    return V1Job;
}());
exports.V1Job = V1Job;
var V1JobCondition = (function () {
    function V1JobCondition() {
    }
    return V1JobCondition;
}());
exports.V1JobCondition = V1JobCondition;
var V1JobList = (function () {
    function V1JobList() {
    }
    return V1JobList;
}());
exports.V1JobList = V1JobList;
var V1JobSpec = (function () {
    function V1JobSpec() {
    }
    return V1JobSpec;
}());
exports.V1JobSpec = V1JobSpec;
var V1JobStatus = (function () {
    function V1JobStatus() {
    }
    return V1JobStatus;
}());
exports.V1JobStatus = V1JobStatus;
var V1KeyToPath = (function () {
    function V1KeyToPath() {
    }
    return V1KeyToPath;
}());
exports.V1KeyToPath = V1KeyToPath;
var V1LabelSelector = (function () {
    function V1LabelSelector() {
    }
    return V1LabelSelector;
}());
exports.V1LabelSelector = V1LabelSelector;
var V1LabelSelectorRequirement = (function () {
    function V1LabelSelectorRequirement() {
    }
    return V1LabelSelectorRequirement;
}());
exports.V1LabelSelectorRequirement = V1LabelSelectorRequirement;
var V1Lifecycle = (function () {
    function V1Lifecycle() {
    }
    return V1Lifecycle;
}());
exports.V1Lifecycle = V1Lifecycle;
var V1LimitRange = (function () {
    function V1LimitRange() {
    }
    return V1LimitRange;
}());
exports.V1LimitRange = V1LimitRange;
var V1LimitRangeItem = (function () {
    function V1LimitRangeItem() {
    }
    return V1LimitRangeItem;
}());
exports.V1LimitRangeItem = V1LimitRangeItem;
var V1LimitRangeList = (function () {
    function V1LimitRangeList() {
    }
    return V1LimitRangeList;
}());
exports.V1LimitRangeList = V1LimitRangeList;
var V1LimitRangeSpec = (function () {
    function V1LimitRangeSpec() {
    }
    return V1LimitRangeSpec;
}());
exports.V1LimitRangeSpec = V1LimitRangeSpec;
var V1ListMeta = (function () {
    function V1ListMeta() {
    }
    return V1ListMeta;
}());
exports.V1ListMeta = V1ListMeta;
var V1LoadBalancerIngress = (function () {
    function V1LoadBalancerIngress() {
    }
    return V1LoadBalancerIngress;
}());
exports.V1LoadBalancerIngress = V1LoadBalancerIngress;
var V1LoadBalancerStatus = (function () {
    function V1LoadBalancerStatus() {
    }
    return V1LoadBalancerStatus;
}());
exports.V1LoadBalancerStatus = V1LoadBalancerStatus;
var V1LocalObjectReference = (function () {
    function V1LocalObjectReference() {
    }
    return V1LocalObjectReference;
}());
exports.V1LocalObjectReference = V1LocalObjectReference;
var V1LocalSubjectAccessReview = (function () {
    function V1LocalSubjectAccessReview() {
    }
    return V1LocalSubjectAccessReview;
}());
exports.V1LocalSubjectAccessReview = V1LocalSubjectAccessReview;
var V1LocalVolumeSource = (function () {
    function V1LocalVolumeSource() {
    }
    return V1LocalVolumeSource;
}());
exports.V1LocalVolumeSource = V1LocalVolumeSource;
var V1NFSVolumeSource = (function () {
    function V1NFSVolumeSource() {
    }
    return V1NFSVolumeSource;
}());
exports.V1NFSVolumeSource = V1NFSVolumeSource;
var V1Namespace = (function () {
    function V1Namespace() {
    }
    return V1Namespace;
}());
exports.V1Namespace = V1Namespace;
var V1NamespaceList = (function () {
    function V1NamespaceList() {
    }
    return V1NamespaceList;
}());
exports.V1NamespaceList = V1NamespaceList;
var V1NamespaceSpec = (function () {
    function V1NamespaceSpec() {
    }
    return V1NamespaceSpec;
}());
exports.V1NamespaceSpec = V1NamespaceSpec;
var V1NamespaceStatus = (function () {
    function V1NamespaceStatus() {
    }
    return V1NamespaceStatus;
}());
exports.V1NamespaceStatus = V1NamespaceStatus;
var V1NetworkPolicy = (function () {
    function V1NetworkPolicy() {
    }
    return V1NetworkPolicy;
}());
exports.V1NetworkPolicy = V1NetworkPolicy;
var V1NetworkPolicyEgressRule = (function () {
    function V1NetworkPolicyEgressRule() {
    }
    return V1NetworkPolicyEgressRule;
}());
exports.V1NetworkPolicyEgressRule = V1NetworkPolicyEgressRule;
var V1NetworkPolicyIngressRule = (function () {
    function V1NetworkPolicyIngressRule() {
    }
    return V1NetworkPolicyIngressRule;
}());
exports.V1NetworkPolicyIngressRule = V1NetworkPolicyIngressRule;
var V1NetworkPolicyList = (function () {
    function V1NetworkPolicyList() {
    }
    return V1NetworkPolicyList;
}());
exports.V1NetworkPolicyList = V1NetworkPolicyList;
var V1NetworkPolicyPeer = (function () {
    function V1NetworkPolicyPeer() {
    }
    return V1NetworkPolicyPeer;
}());
exports.V1NetworkPolicyPeer = V1NetworkPolicyPeer;
var V1NetworkPolicyPort = (function () {
    function V1NetworkPolicyPort() {
    }
    return V1NetworkPolicyPort;
}());
exports.V1NetworkPolicyPort = V1NetworkPolicyPort;
var V1NetworkPolicySpec = (function () {
    function V1NetworkPolicySpec() {
    }
    return V1NetworkPolicySpec;
}());
exports.V1NetworkPolicySpec = V1NetworkPolicySpec;
var V1Node = (function () {
    function V1Node() {
    }
    return V1Node;
}());
exports.V1Node = V1Node;
var V1NodeAddress = (function () {
    function V1NodeAddress() {
    }
    return V1NodeAddress;
}());
exports.V1NodeAddress = V1NodeAddress;
var V1NodeAffinity = (function () {
    function V1NodeAffinity() {
    }
    return V1NodeAffinity;
}());
exports.V1NodeAffinity = V1NodeAffinity;
var V1NodeCondition = (function () {
    function V1NodeCondition() {
    }
    return V1NodeCondition;
}());
exports.V1NodeCondition = V1NodeCondition;
var V1NodeConfigSource = (function () {
    function V1NodeConfigSource() {
    }
    return V1NodeConfigSource;
}());
exports.V1NodeConfigSource = V1NodeConfigSource;
var V1NodeConfigStatus = (function () {
    function V1NodeConfigStatus() {
    }
    return V1NodeConfigStatus;
}());
exports.V1NodeConfigStatus = V1NodeConfigStatus;
var V1NodeDaemonEndpoints = (function () {
    function V1NodeDaemonEndpoints() {
    }
    return V1NodeDaemonEndpoints;
}());
exports.V1NodeDaemonEndpoints = V1NodeDaemonEndpoints;
var V1NodeList = (function () {
    function V1NodeList() {
    }
    return V1NodeList;
}());
exports.V1NodeList = V1NodeList;
var V1NodeSelector = (function () {
    function V1NodeSelector() {
    }
    return V1NodeSelector;
}());
exports.V1NodeSelector = V1NodeSelector;
var V1NodeSelectorRequirement = (function () {
    function V1NodeSelectorRequirement() {
    }
    return V1NodeSelectorRequirement;
}());
exports.V1NodeSelectorRequirement = V1NodeSelectorRequirement;
var V1NodeSelectorTerm = (function () {
    function V1NodeSelectorTerm() {
    }
    return V1NodeSelectorTerm;
}());
exports.V1NodeSelectorTerm = V1NodeSelectorTerm;
var V1NodeSpec = (function () {
    function V1NodeSpec() {
    }
    return V1NodeSpec;
}());
exports.V1NodeSpec = V1NodeSpec;
var V1NodeStatus = (function () {
    function V1NodeStatus() {
    }
    return V1NodeStatus;
}());
exports.V1NodeStatus = V1NodeStatus;
var V1NodeSystemInfo = (function () {
    function V1NodeSystemInfo() {
    }
    return V1NodeSystemInfo;
}());
exports.V1NodeSystemInfo = V1NodeSystemInfo;
var V1NonResourceAttributes = (function () {
    function V1NonResourceAttributes() {
    }
    return V1NonResourceAttributes;
}());
exports.V1NonResourceAttributes = V1NonResourceAttributes;
var V1NonResourceRule = (function () {
    function V1NonResourceRule() {
    }
    return V1NonResourceRule;
}());
exports.V1NonResourceRule = V1NonResourceRule;
var V1ObjectFieldSelector = (function () {
    function V1ObjectFieldSelector() {
    }
    return V1ObjectFieldSelector;
}());
exports.V1ObjectFieldSelector = V1ObjectFieldSelector;
var V1ObjectMeta = (function () {
    function V1ObjectMeta() {
    }
    return V1ObjectMeta;
}());
exports.V1ObjectMeta = V1ObjectMeta;
var V1ObjectReference = (function () {
    function V1ObjectReference() {
    }
    return V1ObjectReference;
}());
exports.V1ObjectReference = V1ObjectReference;
var V1OwnerReference = (function () {
    function V1OwnerReference() {
    }
    return V1OwnerReference;
}());
exports.V1OwnerReference = V1OwnerReference;
var V1PersistentVolume = (function () {
    function V1PersistentVolume() {
    }
    return V1PersistentVolume;
}());
exports.V1PersistentVolume = V1PersistentVolume;
var V1PersistentVolumeClaim = (function () {
    function V1PersistentVolumeClaim() {
    }
    return V1PersistentVolumeClaim;
}());
exports.V1PersistentVolumeClaim = V1PersistentVolumeClaim;
var V1PersistentVolumeClaimCondition = (function () {
    function V1PersistentVolumeClaimCondition() {
    }
    return V1PersistentVolumeClaimCondition;
}());
exports.V1PersistentVolumeClaimCondition = V1PersistentVolumeClaimCondition;
var V1PersistentVolumeClaimList = (function () {
    function V1PersistentVolumeClaimList() {
    }
    return V1PersistentVolumeClaimList;
}());
exports.V1PersistentVolumeClaimList = V1PersistentVolumeClaimList;
var V1PersistentVolumeClaimSpec = (function () {
    function V1PersistentVolumeClaimSpec() {
    }
    return V1PersistentVolumeClaimSpec;
}());
exports.V1PersistentVolumeClaimSpec = V1PersistentVolumeClaimSpec;
var V1PersistentVolumeClaimStatus = (function () {
    function V1PersistentVolumeClaimStatus() {
    }
    return V1PersistentVolumeClaimStatus;
}());
exports.V1PersistentVolumeClaimStatus = V1PersistentVolumeClaimStatus;
var V1PersistentVolumeClaimVolumeSource = (function () {
    function V1PersistentVolumeClaimVolumeSource() {
    }
    return V1PersistentVolumeClaimVolumeSource;
}());
exports.V1PersistentVolumeClaimVolumeSource = V1PersistentVolumeClaimVolumeSource;
var V1PersistentVolumeList = (function () {
    function V1PersistentVolumeList() {
    }
    return V1PersistentVolumeList;
}());
exports.V1PersistentVolumeList = V1PersistentVolumeList;
var V1PersistentVolumeSpec = (function () {
    function V1PersistentVolumeSpec() {
    }
    return V1PersistentVolumeSpec;
}());
exports.V1PersistentVolumeSpec = V1PersistentVolumeSpec;
var V1PersistentVolumeStatus = (function () {
    function V1PersistentVolumeStatus() {
    }
    return V1PersistentVolumeStatus;
}());
exports.V1PersistentVolumeStatus = V1PersistentVolumeStatus;
var V1PhotonPersistentDiskVolumeSource = (function () {
    function V1PhotonPersistentDiskVolumeSource() {
    }
    return V1PhotonPersistentDiskVolumeSource;
}());
exports.V1PhotonPersistentDiskVolumeSource = V1PhotonPersistentDiskVolumeSource;
var V1Pod = (function () {
    function V1Pod() {
    }
    return V1Pod;
}());
exports.V1Pod = V1Pod;
var V1PodAffinity = (function () {
    function V1PodAffinity() {
    }
    return V1PodAffinity;
}());
exports.V1PodAffinity = V1PodAffinity;
var V1PodAffinityTerm = (function () {
    function V1PodAffinityTerm() {
    }
    return V1PodAffinityTerm;
}());
exports.V1PodAffinityTerm = V1PodAffinityTerm;
var V1PodAntiAffinity = (function () {
    function V1PodAntiAffinity() {
    }
    return V1PodAntiAffinity;
}());
exports.V1PodAntiAffinity = V1PodAntiAffinity;
var V1PodCondition = (function () {
    function V1PodCondition() {
    }
    return V1PodCondition;
}());
exports.V1PodCondition = V1PodCondition;
var V1PodDNSConfig = (function () {
    function V1PodDNSConfig() {
    }
    return V1PodDNSConfig;
}());
exports.V1PodDNSConfig = V1PodDNSConfig;
var V1PodDNSConfigOption = (function () {
    function V1PodDNSConfigOption() {
    }
    return V1PodDNSConfigOption;
}());
exports.V1PodDNSConfigOption = V1PodDNSConfigOption;
var V1PodList = (function () {
    function V1PodList() {
    }
    return V1PodList;
}());
exports.V1PodList = V1PodList;
var V1PodReadinessGate = (function () {
    function V1PodReadinessGate() {
    }
    return V1PodReadinessGate;
}());
exports.V1PodReadinessGate = V1PodReadinessGate;
var V1PodSecurityContext = (function () {
    function V1PodSecurityContext() {
    }
    return V1PodSecurityContext;
}());
exports.V1PodSecurityContext = V1PodSecurityContext;
var V1PodSpec = (function () {
    function V1PodSpec() {
    }
    return V1PodSpec;
}());
exports.V1PodSpec = V1PodSpec;
var V1PodStatus = (function () {
    function V1PodStatus() {
    }
    return V1PodStatus;
}());
exports.V1PodStatus = V1PodStatus;
var V1PodTemplate = (function () {
    function V1PodTemplate() {
    }
    return V1PodTemplate;
}());
exports.V1PodTemplate = V1PodTemplate;
var V1PodTemplateList = (function () {
    function V1PodTemplateList() {
    }
    return V1PodTemplateList;
}());
exports.V1PodTemplateList = V1PodTemplateList;
var V1PodTemplateSpec = (function () {
    function V1PodTemplateSpec() {
    }
    return V1PodTemplateSpec;
}());
exports.V1PodTemplateSpec = V1PodTemplateSpec;
var V1PolicyRule = (function () {
    function V1PolicyRule() {
    }
    return V1PolicyRule;
}());
exports.V1PolicyRule = V1PolicyRule;
var V1PortworxVolumeSource = (function () {
    function V1PortworxVolumeSource() {
    }
    return V1PortworxVolumeSource;
}());
exports.V1PortworxVolumeSource = V1PortworxVolumeSource;
var V1Preconditions = (function () {
    function V1Preconditions() {
    }
    return V1Preconditions;
}());
exports.V1Preconditions = V1Preconditions;
var V1PreferredSchedulingTerm = (function () {
    function V1PreferredSchedulingTerm() {
    }
    return V1PreferredSchedulingTerm;
}());
exports.V1PreferredSchedulingTerm = V1PreferredSchedulingTerm;
var V1Probe = (function () {
    function V1Probe() {
    }
    return V1Probe;
}());
exports.V1Probe = V1Probe;
var V1ProjectedVolumeSource = (function () {
    function V1ProjectedVolumeSource() {
    }
    return V1ProjectedVolumeSource;
}());
exports.V1ProjectedVolumeSource = V1ProjectedVolumeSource;
var V1QuobyteVolumeSource = (function () {
    function V1QuobyteVolumeSource() {
    }
    return V1QuobyteVolumeSource;
}());
exports.V1QuobyteVolumeSource = V1QuobyteVolumeSource;
var V1RBDPersistentVolumeSource = (function () {
    function V1RBDPersistentVolumeSource() {
    }
    return V1RBDPersistentVolumeSource;
}());
exports.V1RBDPersistentVolumeSource = V1RBDPersistentVolumeSource;
var V1RBDVolumeSource = (function () {
    function V1RBDVolumeSource() {
    }
    return V1RBDVolumeSource;
}());
exports.V1RBDVolumeSource = V1RBDVolumeSource;
var V1ReplicaSet = (function () {
    function V1ReplicaSet() {
    }
    return V1ReplicaSet;
}());
exports.V1ReplicaSet = V1ReplicaSet;
var V1ReplicaSetCondition = (function () {
    function V1ReplicaSetCondition() {
    }
    return V1ReplicaSetCondition;
}());
exports.V1ReplicaSetCondition = V1ReplicaSetCondition;
var V1ReplicaSetList = (function () {
    function V1ReplicaSetList() {
    }
    return V1ReplicaSetList;
}());
exports.V1ReplicaSetList = V1ReplicaSetList;
var V1ReplicaSetSpec = (function () {
    function V1ReplicaSetSpec() {
    }
    return V1ReplicaSetSpec;
}());
exports.V1ReplicaSetSpec = V1ReplicaSetSpec;
var V1ReplicaSetStatus = (function () {
    function V1ReplicaSetStatus() {
    }
    return V1ReplicaSetStatus;
}());
exports.V1ReplicaSetStatus = V1ReplicaSetStatus;
var V1ReplicationController = (function () {
    function V1ReplicationController() {
    }
    return V1ReplicationController;
}());
exports.V1ReplicationController = V1ReplicationController;
var V1ReplicationControllerCondition = (function () {
    function V1ReplicationControllerCondition() {
    }
    return V1ReplicationControllerCondition;
}());
exports.V1ReplicationControllerCondition = V1ReplicationControllerCondition;
var V1ReplicationControllerList = (function () {
    function V1ReplicationControllerList() {
    }
    return V1ReplicationControllerList;
}());
exports.V1ReplicationControllerList = V1ReplicationControllerList;
var V1ReplicationControllerSpec = (function () {
    function V1ReplicationControllerSpec() {
    }
    return V1ReplicationControllerSpec;
}());
exports.V1ReplicationControllerSpec = V1ReplicationControllerSpec;
var V1ReplicationControllerStatus = (function () {
    function V1ReplicationControllerStatus() {
    }
    return V1ReplicationControllerStatus;
}());
exports.V1ReplicationControllerStatus = V1ReplicationControllerStatus;
var V1ResourceAttributes = (function () {
    function V1ResourceAttributes() {
    }
    return V1ResourceAttributes;
}());
exports.V1ResourceAttributes = V1ResourceAttributes;
var V1ResourceFieldSelector = (function () {
    function V1ResourceFieldSelector() {
    }
    return V1ResourceFieldSelector;
}());
exports.V1ResourceFieldSelector = V1ResourceFieldSelector;
var V1ResourceQuota = (function () {
    function V1ResourceQuota() {
    }
    return V1ResourceQuota;
}());
exports.V1ResourceQuota = V1ResourceQuota;
var V1ResourceQuotaList = (function () {
    function V1ResourceQuotaList() {
    }
    return V1ResourceQuotaList;
}());
exports.V1ResourceQuotaList = V1ResourceQuotaList;
var V1ResourceQuotaSpec = (function () {
    function V1ResourceQuotaSpec() {
    }
    return V1ResourceQuotaSpec;
}());
exports.V1ResourceQuotaSpec = V1ResourceQuotaSpec;
var V1ResourceQuotaStatus = (function () {
    function V1ResourceQuotaStatus() {
    }
    return V1ResourceQuotaStatus;
}());
exports.V1ResourceQuotaStatus = V1ResourceQuotaStatus;
var V1ResourceRequirements = (function () {
    function V1ResourceRequirements() {
    }
    return V1ResourceRequirements;
}());
exports.V1ResourceRequirements = V1ResourceRequirements;
var V1ResourceRule = (function () {
    function V1ResourceRule() {
    }
    return V1ResourceRule;
}());
exports.V1ResourceRule = V1ResourceRule;
var V1Role = (function () {
    function V1Role() {
    }
    return V1Role;
}());
exports.V1Role = V1Role;
var V1RoleBinding = (function () {
    function V1RoleBinding() {
    }
    return V1RoleBinding;
}());
exports.V1RoleBinding = V1RoleBinding;
var V1RoleBindingList = (function () {
    function V1RoleBindingList() {
    }
    return V1RoleBindingList;
}());
exports.V1RoleBindingList = V1RoleBindingList;
var V1RoleList = (function () {
    function V1RoleList() {
    }
    return V1RoleList;
}());
exports.V1RoleList = V1RoleList;
var V1RoleRef = (function () {
    function V1RoleRef() {
    }
    return V1RoleRef;
}());
exports.V1RoleRef = V1RoleRef;
var V1RollingUpdateDaemonSet = (function () {
    function V1RollingUpdateDaemonSet() {
    }
    return V1RollingUpdateDaemonSet;
}());
exports.V1RollingUpdateDaemonSet = V1RollingUpdateDaemonSet;
var V1RollingUpdateDeployment = (function () {
    function V1RollingUpdateDeployment() {
    }
    return V1RollingUpdateDeployment;
}());
exports.V1RollingUpdateDeployment = V1RollingUpdateDeployment;
var V1RollingUpdateStatefulSetStrategy = (function () {
    function V1RollingUpdateStatefulSetStrategy() {
    }
    return V1RollingUpdateStatefulSetStrategy;
}());
exports.V1RollingUpdateStatefulSetStrategy = V1RollingUpdateStatefulSetStrategy;
var V1SELinuxOptions = (function () {
    function V1SELinuxOptions() {
    }
    return V1SELinuxOptions;
}());
exports.V1SELinuxOptions = V1SELinuxOptions;
var V1Scale = (function () {
    function V1Scale() {
    }
    return V1Scale;
}());
exports.V1Scale = V1Scale;
var V1ScaleIOPersistentVolumeSource = (function () {
    function V1ScaleIOPersistentVolumeSource() {
    }
    return V1ScaleIOPersistentVolumeSource;
}());
exports.V1ScaleIOPersistentVolumeSource = V1ScaleIOPersistentVolumeSource;
var V1ScaleIOVolumeSource = (function () {
    function V1ScaleIOVolumeSource() {
    }
    return V1ScaleIOVolumeSource;
}());
exports.V1ScaleIOVolumeSource = V1ScaleIOVolumeSource;
var V1ScaleSpec = (function () {
    function V1ScaleSpec() {
    }
    return V1ScaleSpec;
}());
exports.V1ScaleSpec = V1ScaleSpec;
var V1ScaleStatus = (function () {
    function V1ScaleStatus() {
    }
    return V1ScaleStatus;
}());
exports.V1ScaleStatus = V1ScaleStatus;
var V1ScopeSelector = (function () {
    function V1ScopeSelector() {
    }
    return V1ScopeSelector;
}());
exports.V1ScopeSelector = V1ScopeSelector;
var V1ScopedResourceSelectorRequirement = (function () {
    function V1ScopedResourceSelectorRequirement() {
    }
    return V1ScopedResourceSelectorRequirement;
}());
exports.V1ScopedResourceSelectorRequirement = V1ScopedResourceSelectorRequirement;
var V1Secret = (function () {
    function V1Secret() {
    }
    return V1Secret;
}());
exports.V1Secret = V1Secret;
var V1SecretEnvSource = (function () {
    function V1SecretEnvSource() {
    }
    return V1SecretEnvSource;
}());
exports.V1SecretEnvSource = V1SecretEnvSource;
var V1SecretKeySelector = (function () {
    function V1SecretKeySelector() {
    }
    return V1SecretKeySelector;
}());
exports.V1SecretKeySelector = V1SecretKeySelector;
var V1SecretList = (function () {
    function V1SecretList() {
    }
    return V1SecretList;
}());
exports.V1SecretList = V1SecretList;
var V1SecretProjection = (function () {
    function V1SecretProjection() {
    }
    return V1SecretProjection;
}());
exports.V1SecretProjection = V1SecretProjection;
var V1SecretReference = (function () {
    function V1SecretReference() {
    }
    return V1SecretReference;
}());
exports.V1SecretReference = V1SecretReference;
var V1SecretVolumeSource = (function () {
    function V1SecretVolumeSource() {
    }
    return V1SecretVolumeSource;
}());
exports.V1SecretVolumeSource = V1SecretVolumeSource;
var V1SecurityContext = (function () {
    function V1SecurityContext() {
    }
    return V1SecurityContext;
}());
exports.V1SecurityContext = V1SecurityContext;
var V1SelfSubjectAccessReview = (function () {
    function V1SelfSubjectAccessReview() {
    }
    return V1SelfSubjectAccessReview;
}());
exports.V1SelfSubjectAccessReview = V1SelfSubjectAccessReview;
var V1SelfSubjectAccessReviewSpec = (function () {
    function V1SelfSubjectAccessReviewSpec() {
    }
    return V1SelfSubjectAccessReviewSpec;
}());
exports.V1SelfSubjectAccessReviewSpec = V1SelfSubjectAccessReviewSpec;
var V1SelfSubjectRulesReview = (function () {
    function V1SelfSubjectRulesReview() {
    }
    return V1SelfSubjectRulesReview;
}());
exports.V1SelfSubjectRulesReview = V1SelfSubjectRulesReview;
var V1SelfSubjectRulesReviewSpec = (function () {
    function V1SelfSubjectRulesReviewSpec() {
    }
    return V1SelfSubjectRulesReviewSpec;
}());
exports.V1SelfSubjectRulesReviewSpec = V1SelfSubjectRulesReviewSpec;
var V1ServerAddressByClientCIDR = (function () {
    function V1ServerAddressByClientCIDR() {
    }
    return V1ServerAddressByClientCIDR;
}());
exports.V1ServerAddressByClientCIDR = V1ServerAddressByClientCIDR;
var V1Service = (function () {
    function V1Service() {
    }
    return V1Service;
}());
exports.V1Service = V1Service;
var V1ServiceAccount = (function () {
    function V1ServiceAccount() {
    }
    return V1ServiceAccount;
}());
exports.V1ServiceAccount = V1ServiceAccount;
var V1ServiceAccountList = (function () {
    function V1ServiceAccountList() {
    }
    return V1ServiceAccountList;
}());
exports.V1ServiceAccountList = V1ServiceAccountList;
var V1ServiceAccountTokenProjection = (function () {
    function V1ServiceAccountTokenProjection() {
    }
    return V1ServiceAccountTokenProjection;
}());
exports.V1ServiceAccountTokenProjection = V1ServiceAccountTokenProjection;
var V1ServiceList = (function () {
    function V1ServiceList() {
    }
    return V1ServiceList;
}());
exports.V1ServiceList = V1ServiceList;
var V1ServicePort = (function () {
    function V1ServicePort() {
    }
    return V1ServicePort;
}());
exports.V1ServicePort = V1ServicePort;
var V1ServiceReference = (function () {
    function V1ServiceReference() {
    }
    return V1ServiceReference;
}());
exports.V1ServiceReference = V1ServiceReference;
var V1ServiceSpec = (function () {
    function V1ServiceSpec() {
    }
    return V1ServiceSpec;
}());
exports.V1ServiceSpec = V1ServiceSpec;
var V1ServiceStatus = (function () {
    function V1ServiceStatus() {
    }
    return V1ServiceStatus;
}());
exports.V1ServiceStatus = V1ServiceStatus;
var V1SessionAffinityConfig = (function () {
    function V1SessionAffinityConfig() {
    }
    return V1SessionAffinityConfig;
}());
exports.V1SessionAffinityConfig = V1SessionAffinityConfig;
var V1StatefulSet = (function () {
    function V1StatefulSet() {
    }
    return V1StatefulSet;
}());
exports.V1StatefulSet = V1StatefulSet;
var V1StatefulSetCondition = (function () {
    function V1StatefulSetCondition() {
    }
    return V1StatefulSetCondition;
}());
exports.V1StatefulSetCondition = V1StatefulSetCondition;
var V1StatefulSetList = (function () {
    function V1StatefulSetList() {
    }
    return V1StatefulSetList;
}());
exports.V1StatefulSetList = V1StatefulSetList;
var V1StatefulSetSpec = (function () {
    function V1StatefulSetSpec() {
    }
    return V1StatefulSetSpec;
}());
exports.V1StatefulSetSpec = V1StatefulSetSpec;
var V1StatefulSetStatus = (function () {
    function V1StatefulSetStatus() {
    }
    return V1StatefulSetStatus;
}());
exports.V1StatefulSetStatus = V1StatefulSetStatus;
var V1StatefulSetUpdateStrategy = (function () {
    function V1StatefulSetUpdateStrategy() {
    }
    return V1StatefulSetUpdateStrategy;
}());
exports.V1StatefulSetUpdateStrategy = V1StatefulSetUpdateStrategy;
var V1Status = (function () {
    function V1Status() {
    }
    return V1Status;
}());
exports.V1Status = V1Status;
var V1StatusCause = (function () {
    function V1StatusCause() {
    }
    return V1StatusCause;
}());
exports.V1StatusCause = V1StatusCause;
var V1StatusDetails = (function () {
    function V1StatusDetails() {
    }
    return V1StatusDetails;
}());
exports.V1StatusDetails = V1StatusDetails;
var V1StorageClass = (function () {
    function V1StorageClass() {
    }
    return V1StorageClass;
}());
exports.V1StorageClass = V1StorageClass;
var V1StorageClassList = (function () {
    function V1StorageClassList() {
    }
    return V1StorageClassList;
}());
exports.V1StorageClassList = V1StorageClassList;
var V1StorageOSPersistentVolumeSource = (function () {
    function V1StorageOSPersistentVolumeSource() {
    }
    return V1StorageOSPersistentVolumeSource;
}());
exports.V1StorageOSPersistentVolumeSource = V1StorageOSPersistentVolumeSource;
var V1StorageOSVolumeSource = (function () {
    function V1StorageOSVolumeSource() {
    }
    return V1StorageOSVolumeSource;
}());
exports.V1StorageOSVolumeSource = V1StorageOSVolumeSource;
var V1Subject = (function () {
    function V1Subject() {
    }
    return V1Subject;
}());
exports.V1Subject = V1Subject;
var V1SubjectAccessReview = (function () {
    function V1SubjectAccessReview() {
    }
    return V1SubjectAccessReview;
}());
exports.V1SubjectAccessReview = V1SubjectAccessReview;
var V1SubjectAccessReviewSpec = (function () {
    function V1SubjectAccessReviewSpec() {
    }
    return V1SubjectAccessReviewSpec;
}());
exports.V1SubjectAccessReviewSpec = V1SubjectAccessReviewSpec;
var V1SubjectAccessReviewStatus = (function () {
    function V1SubjectAccessReviewStatus() {
    }
    return V1SubjectAccessReviewStatus;
}());
exports.V1SubjectAccessReviewStatus = V1SubjectAccessReviewStatus;
var V1SubjectRulesReviewStatus = (function () {
    function V1SubjectRulesReviewStatus() {
    }
    return V1SubjectRulesReviewStatus;
}());
exports.V1SubjectRulesReviewStatus = V1SubjectRulesReviewStatus;
var V1Sysctl = (function () {
    function V1Sysctl() {
    }
    return V1Sysctl;
}());
exports.V1Sysctl = V1Sysctl;
var V1TCPSocketAction = (function () {
    function V1TCPSocketAction() {
    }
    return V1TCPSocketAction;
}());
exports.V1TCPSocketAction = V1TCPSocketAction;
var V1Taint = (function () {
    function V1Taint() {
    }
    return V1Taint;
}());
exports.V1Taint = V1Taint;
var V1TokenReview = (function () {
    function V1TokenReview() {
    }
    return V1TokenReview;
}());
exports.V1TokenReview = V1TokenReview;
var V1TokenReviewSpec = (function () {
    function V1TokenReviewSpec() {
    }
    return V1TokenReviewSpec;
}());
exports.V1TokenReviewSpec = V1TokenReviewSpec;
var V1TokenReviewStatus = (function () {
    function V1TokenReviewStatus() {
    }
    return V1TokenReviewStatus;
}());
exports.V1TokenReviewStatus = V1TokenReviewStatus;
var V1Toleration = (function () {
    function V1Toleration() {
    }
    return V1Toleration;
}());
exports.V1Toleration = V1Toleration;
var V1TopologySelectorLabelRequirement = (function () {
    function V1TopologySelectorLabelRequirement() {
    }
    return V1TopologySelectorLabelRequirement;
}());
exports.V1TopologySelectorLabelRequirement = V1TopologySelectorLabelRequirement;
var V1TopologySelectorTerm = (function () {
    function V1TopologySelectorTerm() {
    }
    return V1TopologySelectorTerm;
}());
exports.V1TopologySelectorTerm = V1TopologySelectorTerm;
var V1UserInfo = (function () {
    function V1UserInfo() {
    }
    return V1UserInfo;
}());
exports.V1UserInfo = V1UserInfo;
var V1Volume = (function () {
    function V1Volume() {
    }
    return V1Volume;
}());
exports.V1Volume = V1Volume;
var V1VolumeDevice = (function () {
    function V1VolumeDevice() {
    }
    return V1VolumeDevice;
}());
exports.V1VolumeDevice = V1VolumeDevice;
var V1VolumeMount = (function () {
    function V1VolumeMount() {
    }
    return V1VolumeMount;
}());
exports.V1VolumeMount = V1VolumeMount;
var V1VolumeNodeAffinity = (function () {
    function V1VolumeNodeAffinity() {
    }
    return V1VolumeNodeAffinity;
}());
exports.V1VolumeNodeAffinity = V1VolumeNodeAffinity;
var V1VolumeProjection = (function () {
    function V1VolumeProjection() {
    }
    return V1VolumeProjection;
}());
exports.V1VolumeProjection = V1VolumeProjection;
var V1VsphereVirtualDiskVolumeSource = (function () {
    function V1VsphereVirtualDiskVolumeSource() {
    }
    return V1VsphereVirtualDiskVolumeSource;
}());
exports.V1VsphereVirtualDiskVolumeSource = V1VsphereVirtualDiskVolumeSource;
var V1WatchEvent = (function () {
    function V1WatchEvent() {
    }
    return V1WatchEvent;
}());
exports.V1WatchEvent = V1WatchEvent;
var V1WeightedPodAffinityTerm = (function () {
    function V1WeightedPodAffinityTerm() {
    }
    return V1WeightedPodAffinityTerm;
}());
exports.V1WeightedPodAffinityTerm = V1WeightedPodAffinityTerm;
var V1alpha1AggregationRule = (function () {
    function V1alpha1AggregationRule() {
    }
    return V1alpha1AggregationRule;
}());
exports.V1alpha1AggregationRule = V1alpha1AggregationRule;
var V1alpha1ClusterRole = (function () {
    function V1alpha1ClusterRole() {
    }
    return V1alpha1ClusterRole;
}());
exports.V1alpha1ClusterRole = V1alpha1ClusterRole;
var V1alpha1ClusterRoleBinding = (function () {
    function V1alpha1ClusterRoleBinding() {
    }
    return V1alpha1ClusterRoleBinding;
}());
exports.V1alpha1ClusterRoleBinding = V1alpha1ClusterRoleBinding;
var V1alpha1ClusterRoleBindingList = (function () {
    function V1alpha1ClusterRoleBindingList() {
    }
    return V1alpha1ClusterRoleBindingList;
}());
exports.V1alpha1ClusterRoleBindingList = V1alpha1ClusterRoleBindingList;
var V1alpha1ClusterRoleList = (function () {
    function V1alpha1ClusterRoleList() {
    }
    return V1alpha1ClusterRoleList;
}());
exports.V1alpha1ClusterRoleList = V1alpha1ClusterRoleList;
var V1alpha1Initializer = (function () {
    function V1alpha1Initializer() {
    }
    return V1alpha1Initializer;
}());
exports.V1alpha1Initializer = V1alpha1Initializer;
var V1alpha1InitializerConfiguration = (function () {
    function V1alpha1InitializerConfiguration() {
    }
    return V1alpha1InitializerConfiguration;
}());
exports.V1alpha1InitializerConfiguration = V1alpha1InitializerConfiguration;
var V1alpha1InitializerConfigurationList = (function () {
    function V1alpha1InitializerConfigurationList() {
    }
    return V1alpha1InitializerConfigurationList;
}());
exports.V1alpha1InitializerConfigurationList = V1alpha1InitializerConfigurationList;
var V1alpha1PodPreset = (function () {
    function V1alpha1PodPreset() {
    }
    return V1alpha1PodPreset;
}());
exports.V1alpha1PodPreset = V1alpha1PodPreset;
var V1alpha1PodPresetList = (function () {
    function V1alpha1PodPresetList() {
    }
    return V1alpha1PodPresetList;
}());
exports.V1alpha1PodPresetList = V1alpha1PodPresetList;
var V1alpha1PodPresetSpec = (function () {
    function V1alpha1PodPresetSpec() {
    }
    return V1alpha1PodPresetSpec;
}());
exports.V1alpha1PodPresetSpec = V1alpha1PodPresetSpec;
var V1alpha1PolicyRule = (function () {
    function V1alpha1PolicyRule() {
    }
    return V1alpha1PolicyRule;
}());
exports.V1alpha1PolicyRule = V1alpha1PolicyRule;
var V1alpha1PriorityClass = (function () {
    function V1alpha1PriorityClass() {
    }
    return V1alpha1PriorityClass;
}());
exports.V1alpha1PriorityClass = V1alpha1PriorityClass;
var V1alpha1PriorityClassList = (function () {
    function V1alpha1PriorityClassList() {
    }
    return V1alpha1PriorityClassList;
}());
exports.V1alpha1PriorityClassList = V1alpha1PriorityClassList;
var V1alpha1Role = (function () {
    function V1alpha1Role() {
    }
    return V1alpha1Role;
}());
exports.V1alpha1Role = V1alpha1Role;
var V1alpha1RoleBinding = (function () {
    function V1alpha1RoleBinding() {
    }
    return V1alpha1RoleBinding;
}());
exports.V1alpha1RoleBinding = V1alpha1RoleBinding;
var V1alpha1RoleBindingList = (function () {
    function V1alpha1RoleBindingList() {
    }
    return V1alpha1RoleBindingList;
}());
exports.V1alpha1RoleBindingList = V1alpha1RoleBindingList;
var V1alpha1RoleList = (function () {
    function V1alpha1RoleList() {
    }
    return V1alpha1RoleList;
}());
exports.V1alpha1RoleList = V1alpha1RoleList;
var V1alpha1RoleRef = (function () {
    function V1alpha1RoleRef() {
    }
    return V1alpha1RoleRef;
}());
exports.V1alpha1RoleRef = V1alpha1RoleRef;
var V1alpha1Rule = (function () {
    function V1alpha1Rule() {
    }
    return V1alpha1Rule;
}());
exports.V1alpha1Rule = V1alpha1Rule;
var V1alpha1Subject = (function () {
    function V1alpha1Subject() {
    }
    return V1alpha1Subject;
}());
exports.V1alpha1Subject = V1alpha1Subject;
var V1alpha1VolumeAttachment = (function () {
    function V1alpha1VolumeAttachment() {
    }
    return V1alpha1VolumeAttachment;
}());
exports.V1alpha1VolumeAttachment = V1alpha1VolumeAttachment;
var V1alpha1VolumeAttachmentList = (function () {
    function V1alpha1VolumeAttachmentList() {
    }
    return V1alpha1VolumeAttachmentList;
}());
exports.V1alpha1VolumeAttachmentList = V1alpha1VolumeAttachmentList;
var V1alpha1VolumeAttachmentSource = (function () {
    function V1alpha1VolumeAttachmentSource() {
    }
    return V1alpha1VolumeAttachmentSource;
}());
exports.V1alpha1VolumeAttachmentSource = V1alpha1VolumeAttachmentSource;
var V1alpha1VolumeAttachmentSpec = (function () {
    function V1alpha1VolumeAttachmentSpec() {
    }
    return V1alpha1VolumeAttachmentSpec;
}());
exports.V1alpha1VolumeAttachmentSpec = V1alpha1VolumeAttachmentSpec;
var V1alpha1VolumeAttachmentStatus = (function () {
    function V1alpha1VolumeAttachmentStatus() {
    }
    return V1alpha1VolumeAttachmentStatus;
}());
exports.V1alpha1VolumeAttachmentStatus = V1alpha1VolumeAttachmentStatus;
var V1alpha1VolumeError = (function () {
    function V1alpha1VolumeError() {
    }
    return V1alpha1VolumeError;
}());
exports.V1alpha1VolumeError = V1alpha1VolumeError;
var V1beta1APIService = (function () {
    function V1beta1APIService() {
    }
    return V1beta1APIService;
}());
exports.V1beta1APIService = V1beta1APIService;
var V1beta1APIServiceCondition = (function () {
    function V1beta1APIServiceCondition() {
    }
    return V1beta1APIServiceCondition;
}());
exports.V1beta1APIServiceCondition = V1beta1APIServiceCondition;
var V1beta1APIServiceList = (function () {
    function V1beta1APIServiceList() {
    }
    return V1beta1APIServiceList;
}());
exports.V1beta1APIServiceList = V1beta1APIServiceList;
var V1beta1APIServiceSpec = (function () {
    function V1beta1APIServiceSpec() {
    }
    return V1beta1APIServiceSpec;
}());
exports.V1beta1APIServiceSpec = V1beta1APIServiceSpec;
var V1beta1APIServiceStatus = (function () {
    function V1beta1APIServiceStatus() {
    }
    return V1beta1APIServiceStatus;
}());
exports.V1beta1APIServiceStatus = V1beta1APIServiceStatus;
var V1beta1AggregationRule = (function () {
    function V1beta1AggregationRule() {
    }
    return V1beta1AggregationRule;
}());
exports.V1beta1AggregationRule = V1beta1AggregationRule;
var V1beta1CertificateSigningRequest = (function () {
    function V1beta1CertificateSigningRequest() {
    }
    return V1beta1CertificateSigningRequest;
}());
exports.V1beta1CertificateSigningRequest = V1beta1CertificateSigningRequest;
var V1beta1CertificateSigningRequestCondition = (function () {
    function V1beta1CertificateSigningRequestCondition() {
    }
    return V1beta1CertificateSigningRequestCondition;
}());
exports.V1beta1CertificateSigningRequestCondition = V1beta1CertificateSigningRequestCondition;
var V1beta1CertificateSigningRequestList = (function () {
    function V1beta1CertificateSigningRequestList() {
    }
    return V1beta1CertificateSigningRequestList;
}());
exports.V1beta1CertificateSigningRequestList = V1beta1CertificateSigningRequestList;
var V1beta1CertificateSigningRequestSpec = (function () {
    function V1beta1CertificateSigningRequestSpec() {
    }
    return V1beta1CertificateSigningRequestSpec;
}());
exports.V1beta1CertificateSigningRequestSpec = V1beta1CertificateSigningRequestSpec;
var V1beta1CertificateSigningRequestStatus = (function () {
    function V1beta1CertificateSigningRequestStatus() {
    }
    return V1beta1CertificateSigningRequestStatus;
}());
exports.V1beta1CertificateSigningRequestStatus = V1beta1CertificateSigningRequestStatus;
var V1beta1ClusterRole = (function () {
    function V1beta1ClusterRole() {
    }
    return V1beta1ClusterRole;
}());
exports.V1beta1ClusterRole = V1beta1ClusterRole;
var V1beta1ClusterRoleBinding = (function () {
    function V1beta1ClusterRoleBinding() {
    }
    return V1beta1ClusterRoleBinding;
}());
exports.V1beta1ClusterRoleBinding = V1beta1ClusterRoleBinding;
var V1beta1ClusterRoleBindingList = (function () {
    function V1beta1ClusterRoleBindingList() {
    }
    return V1beta1ClusterRoleBindingList;
}());
exports.V1beta1ClusterRoleBindingList = V1beta1ClusterRoleBindingList;
var V1beta1ClusterRoleList = (function () {
    function V1beta1ClusterRoleList() {
    }
    return V1beta1ClusterRoleList;
}());
exports.V1beta1ClusterRoleList = V1beta1ClusterRoleList;
var V1beta1ControllerRevision = (function () {
    function V1beta1ControllerRevision() {
    }
    return V1beta1ControllerRevision;
}());
exports.V1beta1ControllerRevision = V1beta1ControllerRevision;
var V1beta1ControllerRevisionList = (function () {
    function V1beta1ControllerRevisionList() {
    }
    return V1beta1ControllerRevisionList;
}());
exports.V1beta1ControllerRevisionList = V1beta1ControllerRevisionList;
var V1beta1CronJob = (function () {
    function V1beta1CronJob() {
    }
    return V1beta1CronJob;
}());
exports.V1beta1CronJob = V1beta1CronJob;
var V1beta1CronJobList = (function () {
    function V1beta1CronJobList() {
    }
    return V1beta1CronJobList;
}());
exports.V1beta1CronJobList = V1beta1CronJobList;
var V1beta1CronJobSpec = (function () {
    function V1beta1CronJobSpec() {
    }
    return V1beta1CronJobSpec;
}());
exports.V1beta1CronJobSpec = V1beta1CronJobSpec;
var V1beta1CronJobStatus = (function () {
    function V1beta1CronJobStatus() {
    }
    return V1beta1CronJobStatus;
}());
exports.V1beta1CronJobStatus = V1beta1CronJobStatus;
var V1beta1CustomResourceColumnDefinition = (function () {
    function V1beta1CustomResourceColumnDefinition() {
    }
    return V1beta1CustomResourceColumnDefinition;
}());
exports.V1beta1CustomResourceColumnDefinition = V1beta1CustomResourceColumnDefinition;
var V1beta1CustomResourceDefinition = (function () {
    function V1beta1CustomResourceDefinition() {
    }
    return V1beta1CustomResourceDefinition;
}());
exports.V1beta1CustomResourceDefinition = V1beta1CustomResourceDefinition;
var V1beta1CustomResourceDefinitionCondition = (function () {
    function V1beta1CustomResourceDefinitionCondition() {
    }
    return V1beta1CustomResourceDefinitionCondition;
}());
exports.V1beta1CustomResourceDefinitionCondition = V1beta1CustomResourceDefinitionCondition;
var V1beta1CustomResourceDefinitionList = (function () {
    function V1beta1CustomResourceDefinitionList() {
    }
    return V1beta1CustomResourceDefinitionList;
}());
exports.V1beta1CustomResourceDefinitionList = V1beta1CustomResourceDefinitionList;
var V1beta1CustomResourceDefinitionNames = (function () {
    function V1beta1CustomResourceDefinitionNames() {
    }
    return V1beta1CustomResourceDefinitionNames;
}());
exports.V1beta1CustomResourceDefinitionNames = V1beta1CustomResourceDefinitionNames;
var V1beta1CustomResourceDefinitionSpec = (function () {
    function V1beta1CustomResourceDefinitionSpec() {
    }
    return V1beta1CustomResourceDefinitionSpec;
}());
exports.V1beta1CustomResourceDefinitionSpec = V1beta1CustomResourceDefinitionSpec;
var V1beta1CustomResourceDefinitionStatus = (function () {
    function V1beta1CustomResourceDefinitionStatus() {
    }
    return V1beta1CustomResourceDefinitionStatus;
}());
exports.V1beta1CustomResourceDefinitionStatus = V1beta1CustomResourceDefinitionStatus;
var V1beta1CustomResourceDefinitionVersion = (function () {
    function V1beta1CustomResourceDefinitionVersion() {
    }
    return V1beta1CustomResourceDefinitionVersion;
}());
exports.V1beta1CustomResourceDefinitionVersion = V1beta1CustomResourceDefinitionVersion;
var V1beta1CustomResourceSubresourceScale = (function () {
    function V1beta1CustomResourceSubresourceScale() {
    }
    return V1beta1CustomResourceSubresourceScale;
}());
exports.V1beta1CustomResourceSubresourceScale = V1beta1CustomResourceSubresourceScale;
var V1beta1CustomResourceSubresources = (function () {
    function V1beta1CustomResourceSubresources() {
    }
    return V1beta1CustomResourceSubresources;
}());
exports.V1beta1CustomResourceSubresources = V1beta1CustomResourceSubresources;
var V1beta1CustomResourceValidation = (function () {
    function V1beta1CustomResourceValidation() {
    }
    return V1beta1CustomResourceValidation;
}());
exports.V1beta1CustomResourceValidation = V1beta1CustomResourceValidation;
var V1beta1DaemonSet = (function () {
    function V1beta1DaemonSet() {
    }
    return V1beta1DaemonSet;
}());
exports.V1beta1DaemonSet = V1beta1DaemonSet;
var V1beta1DaemonSetCondition = (function () {
    function V1beta1DaemonSetCondition() {
    }
    return V1beta1DaemonSetCondition;
}());
exports.V1beta1DaemonSetCondition = V1beta1DaemonSetCondition;
var V1beta1DaemonSetList = (function () {
    function V1beta1DaemonSetList() {
    }
    return V1beta1DaemonSetList;
}());
exports.V1beta1DaemonSetList = V1beta1DaemonSetList;
var V1beta1DaemonSetSpec = (function () {
    function V1beta1DaemonSetSpec() {
    }
    return V1beta1DaemonSetSpec;
}());
exports.V1beta1DaemonSetSpec = V1beta1DaemonSetSpec;
var V1beta1DaemonSetStatus = (function () {
    function V1beta1DaemonSetStatus() {
    }
    return V1beta1DaemonSetStatus;
}());
exports.V1beta1DaemonSetStatus = V1beta1DaemonSetStatus;
var V1beta1DaemonSetUpdateStrategy = (function () {
    function V1beta1DaemonSetUpdateStrategy() {
    }
    return V1beta1DaemonSetUpdateStrategy;
}());
exports.V1beta1DaemonSetUpdateStrategy = V1beta1DaemonSetUpdateStrategy;
var V1beta1Event = (function () {
    function V1beta1Event() {
    }
    return V1beta1Event;
}());
exports.V1beta1Event = V1beta1Event;
var V1beta1EventList = (function () {
    function V1beta1EventList() {
    }
    return V1beta1EventList;
}());
exports.V1beta1EventList = V1beta1EventList;
var V1beta1EventSeries = (function () {
    function V1beta1EventSeries() {
    }
    return V1beta1EventSeries;
}());
exports.V1beta1EventSeries = V1beta1EventSeries;
var V1beta1Eviction = (function () {
    function V1beta1Eviction() {
    }
    return V1beta1Eviction;
}());
exports.V1beta1Eviction = V1beta1Eviction;
var V1beta1ExternalDocumentation = (function () {
    function V1beta1ExternalDocumentation() {
    }
    return V1beta1ExternalDocumentation;
}());
exports.V1beta1ExternalDocumentation = V1beta1ExternalDocumentation;
var V1beta1HTTPIngressPath = (function () {
    function V1beta1HTTPIngressPath() {
    }
    return V1beta1HTTPIngressPath;
}());
exports.V1beta1HTTPIngressPath = V1beta1HTTPIngressPath;
var V1beta1HTTPIngressRuleValue = (function () {
    function V1beta1HTTPIngressRuleValue() {
    }
    return V1beta1HTTPIngressRuleValue;
}());
exports.V1beta1HTTPIngressRuleValue = V1beta1HTTPIngressRuleValue;
var V1beta1IPBlock = (function () {
    function V1beta1IPBlock() {
    }
    return V1beta1IPBlock;
}());
exports.V1beta1IPBlock = V1beta1IPBlock;
var V1beta1Ingress = (function () {
    function V1beta1Ingress() {
    }
    return V1beta1Ingress;
}());
exports.V1beta1Ingress = V1beta1Ingress;
var V1beta1IngressBackend = (function () {
    function V1beta1IngressBackend() {
    }
    return V1beta1IngressBackend;
}());
exports.V1beta1IngressBackend = V1beta1IngressBackend;
var V1beta1IngressList = (function () {
    function V1beta1IngressList() {
    }
    return V1beta1IngressList;
}());
exports.V1beta1IngressList = V1beta1IngressList;
var V1beta1IngressRule = (function () {
    function V1beta1IngressRule() {
    }
    return V1beta1IngressRule;
}());
exports.V1beta1IngressRule = V1beta1IngressRule;
var V1beta1IngressSpec = (function () {
    function V1beta1IngressSpec() {
    }
    return V1beta1IngressSpec;
}());
exports.V1beta1IngressSpec = V1beta1IngressSpec;
var V1beta1IngressStatus = (function () {
    function V1beta1IngressStatus() {
    }
    return V1beta1IngressStatus;
}());
exports.V1beta1IngressStatus = V1beta1IngressStatus;
var V1beta1IngressTLS = (function () {
    function V1beta1IngressTLS() {
    }
    return V1beta1IngressTLS;
}());
exports.V1beta1IngressTLS = V1beta1IngressTLS;
var V1beta1JSONSchemaProps = (function () {
    function V1beta1JSONSchemaProps() {
    }
    return V1beta1JSONSchemaProps;
}());
exports.V1beta1JSONSchemaProps = V1beta1JSONSchemaProps;
var V1beta1JobTemplateSpec = (function () {
    function V1beta1JobTemplateSpec() {
    }
    return V1beta1JobTemplateSpec;
}());
exports.V1beta1JobTemplateSpec = V1beta1JobTemplateSpec;
var V1beta1LocalSubjectAccessReview = (function () {
    function V1beta1LocalSubjectAccessReview() {
    }
    return V1beta1LocalSubjectAccessReview;
}());
exports.V1beta1LocalSubjectAccessReview = V1beta1LocalSubjectAccessReview;
var V1beta1MutatingWebhookConfiguration = (function () {
    function V1beta1MutatingWebhookConfiguration() {
    }
    return V1beta1MutatingWebhookConfiguration;
}());
exports.V1beta1MutatingWebhookConfiguration = V1beta1MutatingWebhookConfiguration;
var V1beta1MutatingWebhookConfigurationList = (function () {
    function V1beta1MutatingWebhookConfigurationList() {
    }
    return V1beta1MutatingWebhookConfigurationList;
}());
exports.V1beta1MutatingWebhookConfigurationList = V1beta1MutatingWebhookConfigurationList;
var V1beta1NetworkPolicy = (function () {
    function V1beta1NetworkPolicy() {
    }
    return V1beta1NetworkPolicy;
}());
exports.V1beta1NetworkPolicy = V1beta1NetworkPolicy;
var V1beta1NetworkPolicyEgressRule = (function () {
    function V1beta1NetworkPolicyEgressRule() {
    }
    return V1beta1NetworkPolicyEgressRule;
}());
exports.V1beta1NetworkPolicyEgressRule = V1beta1NetworkPolicyEgressRule;
var V1beta1NetworkPolicyIngressRule = (function () {
    function V1beta1NetworkPolicyIngressRule() {
    }
    return V1beta1NetworkPolicyIngressRule;
}());
exports.V1beta1NetworkPolicyIngressRule = V1beta1NetworkPolicyIngressRule;
var V1beta1NetworkPolicyList = (function () {
    function V1beta1NetworkPolicyList() {
    }
    return V1beta1NetworkPolicyList;
}());
exports.V1beta1NetworkPolicyList = V1beta1NetworkPolicyList;
var V1beta1NetworkPolicyPeer = (function () {
    function V1beta1NetworkPolicyPeer() {
    }
    return V1beta1NetworkPolicyPeer;
}());
exports.V1beta1NetworkPolicyPeer = V1beta1NetworkPolicyPeer;
var V1beta1NetworkPolicyPort = (function () {
    function V1beta1NetworkPolicyPort() {
    }
    return V1beta1NetworkPolicyPort;
}());
exports.V1beta1NetworkPolicyPort = V1beta1NetworkPolicyPort;
var V1beta1NetworkPolicySpec = (function () {
    function V1beta1NetworkPolicySpec() {
    }
    return V1beta1NetworkPolicySpec;
}());
exports.V1beta1NetworkPolicySpec = V1beta1NetworkPolicySpec;
var V1beta1NonResourceAttributes = (function () {
    function V1beta1NonResourceAttributes() {
    }
    return V1beta1NonResourceAttributes;
}());
exports.V1beta1NonResourceAttributes = V1beta1NonResourceAttributes;
var V1beta1NonResourceRule = (function () {
    function V1beta1NonResourceRule() {
    }
    return V1beta1NonResourceRule;
}());
exports.V1beta1NonResourceRule = V1beta1NonResourceRule;
var V1beta1PodDisruptionBudget = (function () {
    function V1beta1PodDisruptionBudget() {
    }
    return V1beta1PodDisruptionBudget;
}());
exports.V1beta1PodDisruptionBudget = V1beta1PodDisruptionBudget;
var V1beta1PodDisruptionBudgetList = (function () {
    function V1beta1PodDisruptionBudgetList() {
    }
    return V1beta1PodDisruptionBudgetList;
}());
exports.V1beta1PodDisruptionBudgetList = V1beta1PodDisruptionBudgetList;
var V1beta1PodDisruptionBudgetSpec = (function () {
    function V1beta1PodDisruptionBudgetSpec() {
    }
    return V1beta1PodDisruptionBudgetSpec;
}());
exports.V1beta1PodDisruptionBudgetSpec = V1beta1PodDisruptionBudgetSpec;
var V1beta1PodDisruptionBudgetStatus = (function () {
    function V1beta1PodDisruptionBudgetStatus() {
    }
    return V1beta1PodDisruptionBudgetStatus;
}());
exports.V1beta1PodDisruptionBudgetStatus = V1beta1PodDisruptionBudgetStatus;
var V1beta1PolicyRule = (function () {
    function V1beta1PolicyRule() {
    }
    return V1beta1PolicyRule;
}());
exports.V1beta1PolicyRule = V1beta1PolicyRule;
var V1beta1PriorityClass = (function () {
    function V1beta1PriorityClass() {
    }
    return V1beta1PriorityClass;
}());
exports.V1beta1PriorityClass = V1beta1PriorityClass;
var V1beta1PriorityClassList = (function () {
    function V1beta1PriorityClassList() {
    }
    return V1beta1PriorityClassList;
}());
exports.V1beta1PriorityClassList = V1beta1PriorityClassList;
var V1beta1ReplicaSet = (function () {
    function V1beta1ReplicaSet() {
    }
    return V1beta1ReplicaSet;
}());
exports.V1beta1ReplicaSet = V1beta1ReplicaSet;
var V1beta1ReplicaSetCondition = (function () {
    function V1beta1ReplicaSetCondition() {
    }
    return V1beta1ReplicaSetCondition;
}());
exports.V1beta1ReplicaSetCondition = V1beta1ReplicaSetCondition;
var V1beta1ReplicaSetList = (function () {
    function V1beta1ReplicaSetList() {
    }
    return V1beta1ReplicaSetList;
}());
exports.V1beta1ReplicaSetList = V1beta1ReplicaSetList;
var V1beta1ReplicaSetSpec = (function () {
    function V1beta1ReplicaSetSpec() {
    }
    return V1beta1ReplicaSetSpec;
}());
exports.V1beta1ReplicaSetSpec = V1beta1ReplicaSetSpec;
var V1beta1ReplicaSetStatus = (function () {
    function V1beta1ReplicaSetStatus() {
    }
    return V1beta1ReplicaSetStatus;
}());
exports.V1beta1ReplicaSetStatus = V1beta1ReplicaSetStatus;
var V1beta1ResourceAttributes = (function () {
    function V1beta1ResourceAttributes() {
    }
    return V1beta1ResourceAttributes;
}());
exports.V1beta1ResourceAttributes = V1beta1ResourceAttributes;
var V1beta1ResourceRule = (function () {
    function V1beta1ResourceRule() {
    }
    return V1beta1ResourceRule;
}());
exports.V1beta1ResourceRule = V1beta1ResourceRule;
var V1beta1Role = (function () {
    function V1beta1Role() {
    }
    return V1beta1Role;
}());
exports.V1beta1Role = V1beta1Role;
var V1beta1RoleBinding = (function () {
    function V1beta1RoleBinding() {
    }
    return V1beta1RoleBinding;
}());
exports.V1beta1RoleBinding = V1beta1RoleBinding;
var V1beta1RoleBindingList = (function () {
    function V1beta1RoleBindingList() {
    }
    return V1beta1RoleBindingList;
}());
exports.V1beta1RoleBindingList = V1beta1RoleBindingList;
var V1beta1RoleList = (function () {
    function V1beta1RoleList() {
    }
    return V1beta1RoleList;
}());
exports.V1beta1RoleList = V1beta1RoleList;
var V1beta1RoleRef = (function () {
    function V1beta1RoleRef() {
    }
    return V1beta1RoleRef;
}());
exports.V1beta1RoleRef = V1beta1RoleRef;
var V1beta1RollingUpdateDaemonSet = (function () {
    function V1beta1RollingUpdateDaemonSet() {
    }
    return V1beta1RollingUpdateDaemonSet;
}());
exports.V1beta1RollingUpdateDaemonSet = V1beta1RollingUpdateDaemonSet;
var V1beta1RollingUpdateStatefulSetStrategy = (function () {
    function V1beta1RollingUpdateStatefulSetStrategy() {
    }
    return V1beta1RollingUpdateStatefulSetStrategy;
}());
exports.V1beta1RollingUpdateStatefulSetStrategy = V1beta1RollingUpdateStatefulSetStrategy;
var V1beta1RuleWithOperations = (function () {
    function V1beta1RuleWithOperations() {
    }
    return V1beta1RuleWithOperations;
}());
exports.V1beta1RuleWithOperations = V1beta1RuleWithOperations;
var V1beta1SelfSubjectAccessReview = (function () {
    function V1beta1SelfSubjectAccessReview() {
    }
    return V1beta1SelfSubjectAccessReview;
}());
exports.V1beta1SelfSubjectAccessReview = V1beta1SelfSubjectAccessReview;
var V1beta1SelfSubjectAccessReviewSpec = (function () {
    function V1beta1SelfSubjectAccessReviewSpec() {
    }
    return V1beta1SelfSubjectAccessReviewSpec;
}());
exports.V1beta1SelfSubjectAccessReviewSpec = V1beta1SelfSubjectAccessReviewSpec;
var V1beta1SelfSubjectRulesReview = (function () {
    function V1beta1SelfSubjectRulesReview() {
    }
    return V1beta1SelfSubjectRulesReview;
}());
exports.V1beta1SelfSubjectRulesReview = V1beta1SelfSubjectRulesReview;
var V1beta1SelfSubjectRulesReviewSpec = (function () {
    function V1beta1SelfSubjectRulesReviewSpec() {
    }
    return V1beta1SelfSubjectRulesReviewSpec;
}());
exports.V1beta1SelfSubjectRulesReviewSpec = V1beta1SelfSubjectRulesReviewSpec;
var V1beta1StatefulSet = (function () {
    function V1beta1StatefulSet() {
    }
    return V1beta1StatefulSet;
}());
exports.V1beta1StatefulSet = V1beta1StatefulSet;
var V1beta1StatefulSetCondition = (function () {
    function V1beta1StatefulSetCondition() {
    }
    return V1beta1StatefulSetCondition;
}());
exports.V1beta1StatefulSetCondition = V1beta1StatefulSetCondition;
var V1beta1StatefulSetList = (function () {
    function V1beta1StatefulSetList() {
    }
    return V1beta1StatefulSetList;
}());
exports.V1beta1StatefulSetList = V1beta1StatefulSetList;
var V1beta1StatefulSetSpec = (function () {
    function V1beta1StatefulSetSpec() {
    }
    return V1beta1StatefulSetSpec;
}());
exports.V1beta1StatefulSetSpec = V1beta1StatefulSetSpec;
var V1beta1StatefulSetStatus = (function () {
    function V1beta1StatefulSetStatus() {
    }
    return V1beta1StatefulSetStatus;
}());
exports.V1beta1StatefulSetStatus = V1beta1StatefulSetStatus;
var V1beta1StatefulSetUpdateStrategy = (function () {
    function V1beta1StatefulSetUpdateStrategy() {
    }
    return V1beta1StatefulSetUpdateStrategy;
}());
exports.V1beta1StatefulSetUpdateStrategy = V1beta1StatefulSetUpdateStrategy;
var V1beta1StorageClass = (function () {
    function V1beta1StorageClass() {
    }
    return V1beta1StorageClass;
}());
exports.V1beta1StorageClass = V1beta1StorageClass;
var V1beta1StorageClassList = (function () {
    function V1beta1StorageClassList() {
    }
    return V1beta1StorageClassList;
}());
exports.V1beta1StorageClassList = V1beta1StorageClassList;
var V1beta1Subject = (function () {
    function V1beta1Subject() {
    }
    return V1beta1Subject;
}());
exports.V1beta1Subject = V1beta1Subject;
var V1beta1SubjectAccessReview = (function () {
    function V1beta1SubjectAccessReview() {
    }
    return V1beta1SubjectAccessReview;
}());
exports.V1beta1SubjectAccessReview = V1beta1SubjectAccessReview;
var V1beta1SubjectAccessReviewSpec = (function () {
    function V1beta1SubjectAccessReviewSpec() {
    }
    return V1beta1SubjectAccessReviewSpec;
}());
exports.V1beta1SubjectAccessReviewSpec = V1beta1SubjectAccessReviewSpec;
var V1beta1SubjectAccessReviewStatus = (function () {
    function V1beta1SubjectAccessReviewStatus() {
    }
    return V1beta1SubjectAccessReviewStatus;
}());
exports.V1beta1SubjectAccessReviewStatus = V1beta1SubjectAccessReviewStatus;
var V1beta1SubjectRulesReviewStatus = (function () {
    function V1beta1SubjectRulesReviewStatus() {
    }
    return V1beta1SubjectRulesReviewStatus;
}());
exports.V1beta1SubjectRulesReviewStatus = V1beta1SubjectRulesReviewStatus;
var V1beta1TokenReview = (function () {
    function V1beta1TokenReview() {
    }
    return V1beta1TokenReview;
}());
exports.V1beta1TokenReview = V1beta1TokenReview;
var V1beta1TokenReviewSpec = (function () {
    function V1beta1TokenReviewSpec() {
    }
    return V1beta1TokenReviewSpec;
}());
exports.V1beta1TokenReviewSpec = V1beta1TokenReviewSpec;
var V1beta1TokenReviewStatus = (function () {
    function V1beta1TokenReviewStatus() {
    }
    return V1beta1TokenReviewStatus;
}());
exports.V1beta1TokenReviewStatus = V1beta1TokenReviewStatus;
var V1beta1UserInfo = (function () {
    function V1beta1UserInfo() {
    }
    return V1beta1UserInfo;
}());
exports.V1beta1UserInfo = V1beta1UserInfo;
var V1beta1ValidatingWebhookConfiguration = (function () {
    function V1beta1ValidatingWebhookConfiguration() {
    }
    return V1beta1ValidatingWebhookConfiguration;
}());
exports.V1beta1ValidatingWebhookConfiguration = V1beta1ValidatingWebhookConfiguration;
var V1beta1ValidatingWebhookConfigurationList = (function () {
    function V1beta1ValidatingWebhookConfigurationList() {
    }
    return V1beta1ValidatingWebhookConfigurationList;
}());
exports.V1beta1ValidatingWebhookConfigurationList = V1beta1ValidatingWebhookConfigurationList;
var V1beta1VolumeAttachment = (function () {
    function V1beta1VolumeAttachment() {
    }
    return V1beta1VolumeAttachment;
}());
exports.V1beta1VolumeAttachment = V1beta1VolumeAttachment;
var V1beta1VolumeAttachmentList = (function () {
    function V1beta1VolumeAttachmentList() {
    }
    return V1beta1VolumeAttachmentList;
}());
exports.V1beta1VolumeAttachmentList = V1beta1VolumeAttachmentList;
var V1beta1VolumeAttachmentSource = (function () {
    function V1beta1VolumeAttachmentSource() {
    }
    return V1beta1VolumeAttachmentSource;
}());
exports.V1beta1VolumeAttachmentSource = V1beta1VolumeAttachmentSource;
var V1beta1VolumeAttachmentSpec = (function () {
    function V1beta1VolumeAttachmentSpec() {
    }
    return V1beta1VolumeAttachmentSpec;
}());
exports.V1beta1VolumeAttachmentSpec = V1beta1VolumeAttachmentSpec;
var V1beta1VolumeAttachmentStatus = (function () {
    function V1beta1VolumeAttachmentStatus() {
    }
    return V1beta1VolumeAttachmentStatus;
}());
exports.V1beta1VolumeAttachmentStatus = V1beta1VolumeAttachmentStatus;
var V1beta1VolumeError = (function () {
    function V1beta1VolumeError() {
    }
    return V1beta1VolumeError;
}());
exports.V1beta1VolumeError = V1beta1VolumeError;
var V1beta1Webhook = (function () {
    function V1beta1Webhook() {
    }
    return V1beta1Webhook;
}());
exports.V1beta1Webhook = V1beta1Webhook;
var V1beta1WebhookClientConfig = (function () {
    function V1beta1WebhookClientConfig() {
    }
    return V1beta1WebhookClientConfig;
}());
exports.V1beta1WebhookClientConfig = V1beta1WebhookClientConfig;
var V1beta2ControllerRevision = (function () {
    function V1beta2ControllerRevision() {
    }
    return V1beta2ControllerRevision;
}());
exports.V1beta2ControllerRevision = V1beta2ControllerRevision;
var V1beta2ControllerRevisionList = (function () {
    function V1beta2ControllerRevisionList() {
    }
    return V1beta2ControllerRevisionList;
}());
exports.V1beta2ControllerRevisionList = V1beta2ControllerRevisionList;
var V1beta2DaemonSet = (function () {
    function V1beta2DaemonSet() {
    }
    return V1beta2DaemonSet;
}());
exports.V1beta2DaemonSet = V1beta2DaemonSet;
var V1beta2DaemonSetCondition = (function () {
    function V1beta2DaemonSetCondition() {
    }
    return V1beta2DaemonSetCondition;
}());
exports.V1beta2DaemonSetCondition = V1beta2DaemonSetCondition;
var V1beta2DaemonSetList = (function () {
    function V1beta2DaemonSetList() {
    }
    return V1beta2DaemonSetList;
}());
exports.V1beta2DaemonSetList = V1beta2DaemonSetList;
var V1beta2DaemonSetSpec = (function () {
    function V1beta2DaemonSetSpec() {
    }
    return V1beta2DaemonSetSpec;
}());
exports.V1beta2DaemonSetSpec = V1beta2DaemonSetSpec;
var V1beta2DaemonSetStatus = (function () {
    function V1beta2DaemonSetStatus() {
    }
    return V1beta2DaemonSetStatus;
}());
exports.V1beta2DaemonSetStatus = V1beta2DaemonSetStatus;
var V1beta2DaemonSetUpdateStrategy = (function () {
    function V1beta2DaemonSetUpdateStrategy() {
    }
    return V1beta2DaemonSetUpdateStrategy;
}());
exports.V1beta2DaemonSetUpdateStrategy = V1beta2DaemonSetUpdateStrategy;
var V1beta2Deployment = (function () {
    function V1beta2Deployment() {
    }
    return V1beta2Deployment;
}());
exports.V1beta2Deployment = V1beta2Deployment;
var V1beta2DeploymentCondition = (function () {
    function V1beta2DeploymentCondition() {
    }
    return V1beta2DeploymentCondition;
}());
exports.V1beta2DeploymentCondition = V1beta2DeploymentCondition;
var V1beta2DeploymentList = (function () {
    function V1beta2DeploymentList() {
    }
    return V1beta2DeploymentList;
}());
exports.V1beta2DeploymentList = V1beta2DeploymentList;
var V1beta2DeploymentSpec = (function () {
    function V1beta2DeploymentSpec() {
    }
    return V1beta2DeploymentSpec;
}());
exports.V1beta2DeploymentSpec = V1beta2DeploymentSpec;
var V1beta2DeploymentStatus = (function () {
    function V1beta2DeploymentStatus() {
    }
    return V1beta2DeploymentStatus;
}());
exports.V1beta2DeploymentStatus = V1beta2DeploymentStatus;
var V1beta2DeploymentStrategy = (function () {
    function V1beta2DeploymentStrategy() {
    }
    return V1beta2DeploymentStrategy;
}());
exports.V1beta2DeploymentStrategy = V1beta2DeploymentStrategy;
var V1beta2ReplicaSet = (function () {
    function V1beta2ReplicaSet() {
    }
    return V1beta2ReplicaSet;
}());
exports.V1beta2ReplicaSet = V1beta2ReplicaSet;
var V1beta2ReplicaSetCondition = (function () {
    function V1beta2ReplicaSetCondition() {
    }
    return V1beta2ReplicaSetCondition;
}());
exports.V1beta2ReplicaSetCondition = V1beta2ReplicaSetCondition;
var V1beta2ReplicaSetList = (function () {
    function V1beta2ReplicaSetList() {
    }
    return V1beta2ReplicaSetList;
}());
exports.V1beta2ReplicaSetList = V1beta2ReplicaSetList;
var V1beta2ReplicaSetSpec = (function () {
    function V1beta2ReplicaSetSpec() {
    }
    return V1beta2ReplicaSetSpec;
}());
exports.V1beta2ReplicaSetSpec = V1beta2ReplicaSetSpec;
var V1beta2ReplicaSetStatus = (function () {
    function V1beta2ReplicaSetStatus() {
    }
    return V1beta2ReplicaSetStatus;
}());
exports.V1beta2ReplicaSetStatus = V1beta2ReplicaSetStatus;
var V1beta2RollingUpdateDaemonSet = (function () {
    function V1beta2RollingUpdateDaemonSet() {
    }
    return V1beta2RollingUpdateDaemonSet;
}());
exports.V1beta2RollingUpdateDaemonSet = V1beta2RollingUpdateDaemonSet;
var V1beta2RollingUpdateDeployment = (function () {
    function V1beta2RollingUpdateDeployment() {
    }
    return V1beta2RollingUpdateDeployment;
}());
exports.V1beta2RollingUpdateDeployment = V1beta2RollingUpdateDeployment;
var V1beta2RollingUpdateStatefulSetStrategy = (function () {
    function V1beta2RollingUpdateStatefulSetStrategy() {
    }
    return V1beta2RollingUpdateStatefulSetStrategy;
}());
exports.V1beta2RollingUpdateStatefulSetStrategy = V1beta2RollingUpdateStatefulSetStrategy;
var V1beta2Scale = (function () {
    function V1beta2Scale() {
    }
    return V1beta2Scale;
}());
exports.V1beta2Scale = V1beta2Scale;
var V1beta2ScaleSpec = (function () {
    function V1beta2ScaleSpec() {
    }
    return V1beta2ScaleSpec;
}());
exports.V1beta2ScaleSpec = V1beta2ScaleSpec;
var V1beta2ScaleStatus = (function () {
    function V1beta2ScaleStatus() {
    }
    return V1beta2ScaleStatus;
}());
exports.V1beta2ScaleStatus = V1beta2ScaleStatus;
var V1beta2StatefulSet = (function () {
    function V1beta2StatefulSet() {
    }
    return V1beta2StatefulSet;
}());
exports.V1beta2StatefulSet = V1beta2StatefulSet;
var V1beta2StatefulSetCondition = (function () {
    function V1beta2StatefulSetCondition() {
    }
    return V1beta2StatefulSetCondition;
}());
exports.V1beta2StatefulSetCondition = V1beta2StatefulSetCondition;
var V1beta2StatefulSetList = (function () {
    function V1beta2StatefulSetList() {
    }
    return V1beta2StatefulSetList;
}());
exports.V1beta2StatefulSetList = V1beta2StatefulSetList;
var V1beta2StatefulSetSpec = (function () {
    function V1beta2StatefulSetSpec() {
    }
    return V1beta2StatefulSetSpec;
}());
exports.V1beta2StatefulSetSpec = V1beta2StatefulSetSpec;
var V1beta2StatefulSetStatus = (function () {
    function V1beta2StatefulSetStatus() {
    }
    return V1beta2StatefulSetStatus;
}());
exports.V1beta2StatefulSetStatus = V1beta2StatefulSetStatus;
var V1beta2StatefulSetUpdateStrategy = (function () {
    function V1beta2StatefulSetUpdateStrategy() {
    }
    return V1beta2StatefulSetUpdateStrategy;
}());
exports.V1beta2StatefulSetUpdateStrategy = V1beta2StatefulSetUpdateStrategy;
var V2alpha1CronJob = (function () {
    function V2alpha1CronJob() {
    }
    return V2alpha1CronJob;
}());
exports.V2alpha1CronJob = V2alpha1CronJob;
var V2alpha1CronJobList = (function () {
    function V2alpha1CronJobList() {
    }
    return V2alpha1CronJobList;
}());
exports.V2alpha1CronJobList = V2alpha1CronJobList;
var V2alpha1CronJobSpec = (function () {
    function V2alpha1CronJobSpec() {
    }
    return V2alpha1CronJobSpec;
}());
exports.V2alpha1CronJobSpec = V2alpha1CronJobSpec;
var V2alpha1CronJobStatus = (function () {
    function V2alpha1CronJobStatus() {
    }
    return V2alpha1CronJobStatus;
}());
exports.V2alpha1CronJobStatus = V2alpha1CronJobStatus;
var V2alpha1JobTemplateSpec = (function () {
    function V2alpha1JobTemplateSpec() {
    }
    return V2alpha1JobTemplateSpec;
}());
exports.V2alpha1JobTemplateSpec = V2alpha1JobTemplateSpec;
var V2beta1CrossVersionObjectReference = (function () {
    function V2beta1CrossVersionObjectReference() {
    }
    return V2beta1CrossVersionObjectReference;
}());
exports.V2beta1CrossVersionObjectReference = V2beta1CrossVersionObjectReference;
var V2beta1ExternalMetricSource = (function () {
    function V2beta1ExternalMetricSource() {
    }
    return V2beta1ExternalMetricSource;
}());
exports.V2beta1ExternalMetricSource = V2beta1ExternalMetricSource;
var V2beta1ExternalMetricStatus = (function () {
    function V2beta1ExternalMetricStatus() {
    }
    return V2beta1ExternalMetricStatus;
}());
exports.V2beta1ExternalMetricStatus = V2beta1ExternalMetricStatus;
var V2beta1HorizontalPodAutoscaler = (function () {
    function V2beta1HorizontalPodAutoscaler() {
    }
    return V2beta1HorizontalPodAutoscaler;
}());
exports.V2beta1HorizontalPodAutoscaler = V2beta1HorizontalPodAutoscaler;
var V2beta1HorizontalPodAutoscalerCondition = (function () {
    function V2beta1HorizontalPodAutoscalerCondition() {
    }
    return V2beta1HorizontalPodAutoscalerCondition;
}());
exports.V2beta1HorizontalPodAutoscalerCondition = V2beta1HorizontalPodAutoscalerCondition;
var V2beta1HorizontalPodAutoscalerList = (function () {
    function V2beta1HorizontalPodAutoscalerList() {
    }
    return V2beta1HorizontalPodAutoscalerList;
}());
exports.V2beta1HorizontalPodAutoscalerList = V2beta1HorizontalPodAutoscalerList;
var V2beta1HorizontalPodAutoscalerSpec = (function () {
    function V2beta1HorizontalPodAutoscalerSpec() {
    }
    return V2beta1HorizontalPodAutoscalerSpec;
}());
exports.V2beta1HorizontalPodAutoscalerSpec = V2beta1HorizontalPodAutoscalerSpec;
var V2beta1HorizontalPodAutoscalerStatus = (function () {
    function V2beta1HorizontalPodAutoscalerStatus() {
    }
    return V2beta1HorizontalPodAutoscalerStatus;
}());
exports.V2beta1HorizontalPodAutoscalerStatus = V2beta1HorizontalPodAutoscalerStatus;
var V2beta1MetricSpec = (function () {
    function V2beta1MetricSpec() {
    }
    return V2beta1MetricSpec;
}());
exports.V2beta1MetricSpec = V2beta1MetricSpec;
var V2beta1MetricStatus = (function () {
    function V2beta1MetricStatus() {
    }
    return V2beta1MetricStatus;
}());
exports.V2beta1MetricStatus = V2beta1MetricStatus;
var V2beta1ObjectMetricSource = (function () {
    function V2beta1ObjectMetricSource() {
    }
    return V2beta1ObjectMetricSource;
}());
exports.V2beta1ObjectMetricSource = V2beta1ObjectMetricSource;
var V2beta1ObjectMetricStatus = (function () {
    function V2beta1ObjectMetricStatus() {
    }
    return V2beta1ObjectMetricStatus;
}());
exports.V2beta1ObjectMetricStatus = V2beta1ObjectMetricStatus;
var V2beta1PodsMetricSource = (function () {
    function V2beta1PodsMetricSource() {
    }
    return V2beta1PodsMetricSource;
}());
exports.V2beta1PodsMetricSource = V2beta1PodsMetricSource;
var V2beta1PodsMetricStatus = (function () {
    function V2beta1PodsMetricStatus() {
    }
    return V2beta1PodsMetricStatus;
}());
exports.V2beta1PodsMetricStatus = V2beta1PodsMetricStatus;
var V2beta1ResourceMetricSource = (function () {
    function V2beta1ResourceMetricSource() {
    }
    return V2beta1ResourceMetricSource;
}());
exports.V2beta1ResourceMetricSource = V2beta1ResourceMetricSource;
var V2beta1ResourceMetricStatus = (function () {
    function V2beta1ResourceMetricStatus() {
    }
    return V2beta1ResourceMetricStatus;
}());
exports.V2beta1ResourceMetricStatus = V2beta1ResourceMetricStatus;
var VersionInfo = (function () {
    function VersionInfo() {
    }
    return VersionInfo;
}());
exports.VersionInfo = VersionInfo;
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var OAuth = (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var VoidAuth = (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (_) {
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
var AdmissionregistrationApiApiKeys;
(function (AdmissionregistrationApiApiKeys) {
    AdmissionregistrationApiApiKeys[AdmissionregistrationApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(AdmissionregistrationApiApiKeys = exports.AdmissionregistrationApiApiKeys || (exports.AdmissionregistrationApiApiKeys = {}));
var AdmissionregistrationApi = (function () {
    function AdmissionregistrationApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AdmissionregistrationApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdmissionregistrationApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AdmissionregistrationApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AdmissionregistrationApi.prototype.setApiKey = function (key, value) {
        this.authentications[AdmissionregistrationApiApiKeys[key]].apiKey = value;
    };
    AdmissionregistrationApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AdmissionregistrationApi;
}());
exports.AdmissionregistrationApi = AdmissionregistrationApi;
var Admissionregistration_v1alpha1ApiApiKeys;
(function (Admissionregistration_v1alpha1ApiApiKeys) {
    Admissionregistration_v1alpha1ApiApiKeys[Admissionregistration_v1alpha1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Admissionregistration_v1alpha1ApiApiKeys = exports.Admissionregistration_v1alpha1ApiApiKeys || (exports.Admissionregistration_v1alpha1ApiApiKeys = {}));
var Admissionregistration_v1alpha1Api = (function () {
    function Admissionregistration_v1alpha1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Admissionregistration_v1alpha1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Admissionregistration_v1alpha1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Admissionregistration_v1alpha1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Admissionregistration_v1alpha1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Admissionregistration_v1alpha1ApiApiKeys[key]].apiKey = value;
    };
    Admissionregistration_v1alpha1Api.prototype.createInitializerConfiguration = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createInitializerConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1alpha1Api.prototype.deleteCollectionInitializerConfiguration = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1alpha1Api.prototype.deleteInitializerConfiguration = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteInitializerConfiguration.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteInitializerConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1alpha1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1alpha1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1alpha1Api.prototype.listInitializerConfiguration = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1alpha1Api.prototype.patchInitializerConfiguration = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchInitializerConfiguration.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchInitializerConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1alpha1Api.prototype.readInitializerConfiguration = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readInitializerConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1alpha1Api.prototype.replaceInitializerConfiguration = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceInitializerConfiguration.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceInitializerConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Admissionregistration_v1alpha1Api;
}());
exports.Admissionregistration_v1alpha1Api = Admissionregistration_v1alpha1Api;
var Admissionregistration_v1beta1ApiApiKeys;
(function (Admissionregistration_v1beta1ApiApiKeys) {
    Admissionregistration_v1beta1ApiApiKeys[Admissionregistration_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Admissionregistration_v1beta1ApiApiKeys = exports.Admissionregistration_v1beta1ApiApiKeys || (exports.Admissionregistration_v1beta1ApiApiKeys = {}));
var Admissionregistration_v1beta1Api = (function () {
    function Admissionregistration_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Admissionregistration_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Admissionregistration_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Admissionregistration_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Admissionregistration_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Admissionregistration_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Admissionregistration_v1beta1Api.prototype.createMutatingWebhookConfiguration = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createMutatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.createValidatingWebhookConfiguration = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createValidatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.deleteCollectionMutatingWebhookConfiguration = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.deleteCollectionValidatingWebhookConfiguration = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.deleteMutatingWebhookConfiguration = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteMutatingWebhookConfiguration.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteMutatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.deleteValidatingWebhookConfiguration = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteValidatingWebhookConfiguration.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteValidatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.listMutatingWebhookConfiguration = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.listValidatingWebhookConfiguration = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.patchMutatingWebhookConfiguration = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchMutatingWebhookConfiguration.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchMutatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.patchValidatingWebhookConfiguration = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchValidatingWebhookConfiguration.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchValidatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.readMutatingWebhookConfiguration = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readMutatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.readValidatingWebhookConfiguration = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readValidatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.replaceMutatingWebhookConfiguration = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceMutatingWebhookConfiguration.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceMutatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Admissionregistration_v1beta1Api.prototype.replaceValidatingWebhookConfiguration = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceValidatingWebhookConfiguration.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceValidatingWebhookConfiguration.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Admissionregistration_v1beta1Api;
}());
exports.Admissionregistration_v1beta1Api = Admissionregistration_v1beta1Api;
var ApiextensionsApiApiKeys;
(function (ApiextensionsApiApiKeys) {
    ApiextensionsApiApiKeys[ApiextensionsApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(ApiextensionsApiApiKeys = exports.ApiextensionsApiApiKeys || (exports.ApiextensionsApiApiKeys = {}));
var ApiextensionsApi = (function () {
    function ApiextensionsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ApiextensionsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApiextensionsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ApiextensionsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ApiextensionsApi.prototype.setApiKey = function (key, value) {
        this.authentications[ApiextensionsApiApiKeys[key]].apiKey = value;
    };
    ApiextensionsApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ApiextensionsApi;
}());
exports.ApiextensionsApi = ApiextensionsApi;
var Apiextensions_v1beta1ApiApiKeys;
(function (Apiextensions_v1beta1ApiApiKeys) {
    Apiextensions_v1beta1ApiApiKeys[Apiextensions_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Apiextensions_v1beta1ApiApiKeys = exports.Apiextensions_v1beta1ApiApiKeys || (exports.Apiextensions_v1beta1ApiApiKeys = {}));
var Apiextensions_v1beta1Api = (function () {
    function Apiextensions_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Apiextensions_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Apiextensions_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Apiextensions_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Apiextensions_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Apiextensions_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Apiextensions_v1beta1Api.prototype.createCustomResourceDefinition = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createCustomResourceDefinition.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.deleteCollectionCustomResourceDefinition = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.deleteCustomResourceDefinition = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteCustomResourceDefinition.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteCustomResourceDefinition.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.listCustomResourceDefinition = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.patchCustomResourceDefinition = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchCustomResourceDefinition.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchCustomResourceDefinition.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.patchCustomResourceDefinitionStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchCustomResourceDefinitionStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchCustomResourceDefinitionStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.readCustomResourceDefinition = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readCustomResourceDefinition.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.readCustomResourceDefinitionStatus = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readCustomResourceDefinitionStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.replaceCustomResourceDefinition = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceCustomResourceDefinition.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceCustomResourceDefinition.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiextensions_v1beta1Api.prototype.replaceCustomResourceDefinitionStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceCustomResourceDefinitionStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceCustomResourceDefinitionStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Apiextensions_v1beta1Api;
}());
exports.Apiextensions_v1beta1Api = Apiextensions_v1beta1Api;
var ApiregistrationApiApiKeys;
(function (ApiregistrationApiApiKeys) {
    ApiregistrationApiApiKeys[ApiregistrationApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(ApiregistrationApiApiKeys = exports.ApiregistrationApiApiKeys || (exports.ApiregistrationApiApiKeys = {}));
var ApiregistrationApi = (function () {
    function ApiregistrationApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ApiregistrationApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApiregistrationApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ApiregistrationApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ApiregistrationApi.prototype.setApiKey = function (key, value) {
        this.authentications[ApiregistrationApiApiKeys[key]].apiKey = value;
    };
    ApiregistrationApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ApiregistrationApi;
}());
exports.ApiregistrationApi = ApiregistrationApi;
var Apiregistration_v1ApiApiKeys;
(function (Apiregistration_v1ApiApiKeys) {
    Apiregistration_v1ApiApiKeys[Apiregistration_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Apiregistration_v1ApiApiKeys = exports.Apiregistration_v1ApiApiKeys || (exports.Apiregistration_v1ApiApiKeys = {}));
var Apiregistration_v1Api = (function () {
    function Apiregistration_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Apiregistration_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Apiregistration_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Apiregistration_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Apiregistration_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Apiregistration_v1ApiApiKeys[key]].apiKey = value;
    };
    Apiregistration_v1Api.prototype.createAPIService = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.deleteAPIService = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteAPIService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.deleteCollectionAPIService = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.listAPIService = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.patchAPIService = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchAPIService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.patchAPIServiceStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchAPIServiceStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchAPIServiceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.readAPIService = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.readAPIServiceStatus = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readAPIServiceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.replaceAPIService = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceAPIService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1Api.prototype.replaceAPIServiceStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1/apiservices/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceAPIServiceStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceAPIServiceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Apiregistration_v1Api;
}());
exports.Apiregistration_v1Api = Apiregistration_v1Api;
var Apiregistration_v1beta1ApiApiKeys;
(function (Apiregistration_v1beta1ApiApiKeys) {
    Apiregistration_v1beta1ApiApiKeys[Apiregistration_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Apiregistration_v1beta1ApiApiKeys = exports.Apiregistration_v1beta1ApiApiKeys || (exports.Apiregistration_v1beta1ApiApiKeys = {}));
var Apiregistration_v1beta1Api = (function () {
    function Apiregistration_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Apiregistration_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Apiregistration_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Apiregistration_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Apiregistration_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Apiregistration_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Apiregistration_v1beta1Api.prototype.createAPIService = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.deleteAPIService = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteAPIService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.deleteCollectionAPIService = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.listAPIService = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.patchAPIService = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchAPIService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.patchAPIServiceStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchAPIServiceStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchAPIServiceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.readAPIService = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.readAPIServiceStatus = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readAPIServiceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.replaceAPIService = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceAPIService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceAPIService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apiregistration_v1beta1Api.prototype.replaceAPIServiceStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceAPIServiceStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceAPIServiceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Apiregistration_v1beta1Api;
}());
exports.Apiregistration_v1beta1Api = Apiregistration_v1beta1Api;
var ApisApiApiKeys;
(function (ApisApiApiKeys) {
    ApisApiApiKeys[ApisApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(ApisApiApiKeys = exports.ApisApiApiKeys || (exports.ApisApiApiKeys = {}));
var ApisApi = (function () {
    function ApisApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ApisApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApisApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ApisApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ApisApi.prototype.setApiKey = function (key, value) {
        this.authentications[ApisApiApiKeys[key]].apiKey = value;
    };
    ApisApi.prototype.getAPIVersions = function () {
        var localVarPath = this.basePath + '/apis/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ApisApi;
}());
exports.ApisApi = ApisApi;
var AppsApiApiKeys;
(function (AppsApiApiKeys) {
    AppsApiApiKeys[AppsApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(AppsApiApiKeys = exports.AppsApiApiKeys || (exports.AppsApiApiKeys = {}));
var AppsApi = (function () {
    function AppsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AppsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AppsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AppsApi.prototype.setApiKey = function (key, value) {
        this.authentications[AppsApiApiKeys[key]].apiKey = value;
    };
    AppsApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/apps/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AppsApi;
}());
exports.AppsApi = AppsApi;
var Apps_v1ApiApiKeys;
(function (Apps_v1ApiApiKeys) {
    Apps_v1ApiApiKeys[Apps_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Apps_v1ApiApiKeys = exports.Apps_v1ApiApiKeys || (exports.Apps_v1ApiApiKeys = {}));
var Apps_v1Api = (function () {
    function Apps_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Apps_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Apps_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Apps_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Apps_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Apps_v1ApiApiKeys[key]].apiKey = value;
    };
    Apps_v1Api.prototype.createNamespacedControllerRevision = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/controllerrevisions'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.createNamespacedDaemonSet = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.createNamespacedDeployment = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.createNamespacedReplicaSet = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.createNamespacedStatefulSet = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteCollectionNamespacedControllerRevision = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/controllerrevisions'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteCollectionNamespacedDaemonSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteCollectionNamespacedDeployment = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteCollectionNamespacedReplicaSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteCollectionNamespacedStatefulSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteNamespacedControllerRevision = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteNamespacedDaemonSet = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteNamespacedDeployment = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteNamespacedReplicaSet = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.deleteNamespacedStatefulSet = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/apps/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listControllerRevisionForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/controllerrevisions';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listDaemonSetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/daemonsets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listDeploymentForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/deployments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listNamespacedControllerRevision = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/controllerrevisions'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listNamespacedDaemonSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listNamespacedDeployment = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listNamespacedReplicaSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listNamespacedStatefulSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listReplicaSetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/replicasets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.listStatefulSetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1/statefulsets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedControllerRevision = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedDaemonSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedDaemonSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDaemonSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDaemonSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDaemonSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedDeployment = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedDeploymentScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedDeploymentStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedReplicaSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedReplicaSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicaSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicaSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicaSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedReplicaSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicaSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicaSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicaSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedStatefulSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedStatefulSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedStatefulSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedStatefulSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedStatefulSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.patchNamespacedStatefulSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedStatefulSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedStatefulSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedStatefulSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedControllerRevision = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedDaemonSet = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedDaemonSetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDaemonSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDaemonSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedDeployment = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedDeploymentScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedDeploymentStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedReplicaSet = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedReplicaSetScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicaSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicaSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedReplicaSetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicaSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicaSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedStatefulSet = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedStatefulSetScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedStatefulSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedStatefulSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.readNamespacedStatefulSetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedStatefulSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedStatefulSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedControllerRevision = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedDaemonSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedDaemonSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDaemonSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDaemonSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDaemonSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedDeployment = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedDeploymentScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedDeploymentStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedReplicaSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedReplicaSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicaSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicaSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicaSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedReplicaSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicaSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicaSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicaSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedStatefulSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedStatefulSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedStatefulSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedStatefulSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedStatefulSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1Api.prototype.replaceNamespacedStatefulSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedStatefulSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedStatefulSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedStatefulSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Apps_v1Api;
}());
exports.Apps_v1Api = Apps_v1Api;
var Apps_v1beta1ApiApiKeys;
(function (Apps_v1beta1ApiApiKeys) {
    Apps_v1beta1ApiApiKeys[Apps_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Apps_v1beta1ApiApiKeys = exports.Apps_v1beta1ApiApiKeys || (exports.Apps_v1beta1ApiApiKeys = {}));
var Apps_v1beta1Api = (function () {
    function Apps_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Apps_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Apps_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Apps_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Apps_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Apps_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Apps_v1beta1Api.prototype.createNamespacedControllerRevision = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.createNamespacedDeployment = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.createNamespacedDeploymentRollback = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling createNamespacedDeploymentRollback.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedDeploymentRollback.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedDeploymentRollback.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.createNamespacedStatefulSet = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.deleteCollectionNamespacedControllerRevision = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.deleteCollectionNamespacedDeployment = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.deleteCollectionNamespacedStatefulSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.deleteNamespacedControllerRevision = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.deleteNamespacedDeployment = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.deleteNamespacedStatefulSet = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.listControllerRevisionForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/controllerrevisions';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.listDeploymentForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/deployments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.listNamespacedControllerRevision = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.listNamespacedDeployment = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.listNamespacedStatefulSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.listStatefulSetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/statefulsets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.patchNamespacedControllerRevision = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.patchNamespacedDeployment = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.patchNamespacedDeploymentScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.patchNamespacedDeploymentStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.patchNamespacedStatefulSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.patchNamespacedStatefulSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedStatefulSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedStatefulSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedStatefulSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.patchNamespacedStatefulSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedStatefulSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedStatefulSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedStatefulSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.readNamespacedControllerRevision = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.readNamespacedDeployment = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.readNamespacedDeploymentScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.readNamespacedDeploymentStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.readNamespacedStatefulSet = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.readNamespacedStatefulSetScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedStatefulSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedStatefulSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.readNamespacedStatefulSetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedStatefulSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedStatefulSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.replaceNamespacedControllerRevision = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.replaceNamespacedDeployment = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.replaceNamespacedDeploymentScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.replaceNamespacedDeploymentStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.replaceNamespacedStatefulSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.replaceNamespacedStatefulSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedStatefulSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedStatefulSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedStatefulSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta1Api.prototype.replaceNamespacedStatefulSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedStatefulSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedStatefulSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedStatefulSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Apps_v1beta1Api;
}());
exports.Apps_v1beta1Api = Apps_v1beta1Api;
var Apps_v1beta2ApiApiKeys;
(function (Apps_v1beta2ApiApiKeys) {
    Apps_v1beta2ApiApiKeys[Apps_v1beta2ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Apps_v1beta2ApiApiKeys = exports.Apps_v1beta2ApiApiKeys || (exports.Apps_v1beta2ApiApiKeys = {}));
var Apps_v1beta2Api = (function () {
    function Apps_v1beta2Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Apps_v1beta2Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Apps_v1beta2Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Apps_v1beta2Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Apps_v1beta2Api.prototype.setApiKey = function (key, value) {
        this.authentications[Apps_v1beta2ApiApiKeys[key]].apiKey = value;
    };
    Apps_v1beta2Api.prototype.createNamespacedControllerRevision = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.createNamespacedDaemonSet = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.createNamespacedDeployment = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.createNamespacedReplicaSet = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.createNamespacedStatefulSet = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteCollectionNamespacedControllerRevision = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteCollectionNamespacedDaemonSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteCollectionNamespacedDeployment = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteCollectionNamespacedReplicaSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteCollectionNamespacedStatefulSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteNamespacedControllerRevision = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteNamespacedDaemonSet = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteNamespacedDeployment = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteNamespacedReplicaSet = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.deleteNamespacedStatefulSet = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listControllerRevisionForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/controllerrevisions';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listDaemonSetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/daemonsets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listDeploymentForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/deployments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listNamespacedControllerRevision = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listNamespacedDaemonSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listNamespacedDeployment = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listNamespacedReplicaSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listNamespacedStatefulSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listReplicaSetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/replicasets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.listStatefulSetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/statefulsets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedControllerRevision = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedDaemonSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedDaemonSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDaemonSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDaemonSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDaemonSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedDeployment = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedDeploymentScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedDeploymentStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedReplicaSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedReplicaSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicaSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicaSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicaSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedReplicaSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicaSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicaSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicaSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedStatefulSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedStatefulSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedStatefulSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedStatefulSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedStatefulSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.patchNamespacedStatefulSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedStatefulSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedStatefulSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedStatefulSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedControllerRevision = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedDaemonSet = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedDaemonSetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDaemonSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDaemonSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedDeployment = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedDeploymentScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedDeploymentStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedReplicaSet = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedReplicaSetScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicaSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicaSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedReplicaSetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicaSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicaSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedStatefulSet = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedStatefulSetScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedStatefulSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedStatefulSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.readNamespacedStatefulSetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedStatefulSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedStatefulSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedControllerRevision = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedControllerRevision.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedControllerRevision.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedControllerRevision.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedDaemonSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedDaemonSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDaemonSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDaemonSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDaemonSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedDeployment = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedDeploymentScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedDeploymentStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedReplicaSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedReplicaSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicaSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicaSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicaSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedReplicaSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicaSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicaSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicaSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedStatefulSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedStatefulSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedStatefulSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedStatefulSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedStatefulSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedStatefulSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedStatefulSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedStatefulSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Apps_v1beta2Api.prototype.replaceNamespacedStatefulSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedStatefulSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedStatefulSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedStatefulSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Apps_v1beta2Api;
}());
exports.Apps_v1beta2Api = Apps_v1beta2Api;
var AuthenticationApiApiKeys;
(function (AuthenticationApiApiKeys) {
    AuthenticationApiApiKeys[AuthenticationApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(AuthenticationApiApiKeys = exports.AuthenticationApiApiKeys || (exports.AuthenticationApiApiKeys = {}));
var AuthenticationApi = (function () {
    function AuthenticationApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AuthenticationApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthenticationApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AuthenticationApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AuthenticationApi.prototype.setApiKey = function (key, value) {
        this.authentications[AuthenticationApiApiKeys[key]].apiKey = value;
    };
    AuthenticationApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/authentication.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AuthenticationApi;
}());
exports.AuthenticationApi = AuthenticationApi;
var Authentication_v1ApiApiKeys;
(function (Authentication_v1ApiApiKeys) {
    Authentication_v1ApiApiKeys[Authentication_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Authentication_v1ApiApiKeys = exports.Authentication_v1ApiApiKeys || (exports.Authentication_v1ApiApiKeys = {}));
var Authentication_v1Api = (function () {
    function Authentication_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Authentication_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authentication_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Authentication_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Authentication_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Authentication_v1ApiApiKeys[key]].apiKey = value;
    };
    Authentication_v1Api.prototype.createTokenReview = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/authentication.k8s.io/v1/tokenreviews';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createTokenReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authentication_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/authentication.k8s.io/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Authentication_v1Api;
}());
exports.Authentication_v1Api = Authentication_v1Api;
var Authentication_v1beta1ApiApiKeys;
(function (Authentication_v1beta1ApiApiKeys) {
    Authentication_v1beta1ApiApiKeys[Authentication_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Authentication_v1beta1ApiApiKeys = exports.Authentication_v1beta1ApiApiKeys || (exports.Authentication_v1beta1ApiApiKeys = {}));
var Authentication_v1beta1Api = (function () {
    function Authentication_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Authentication_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authentication_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Authentication_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Authentication_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Authentication_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Authentication_v1beta1Api.prototype.createTokenReview = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/authentication.k8s.io/v1beta1/tokenreviews';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createTokenReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authentication_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/authentication.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Authentication_v1beta1Api;
}());
exports.Authentication_v1beta1Api = Authentication_v1beta1Api;
var AuthorizationApiApiKeys;
(function (AuthorizationApiApiKeys) {
    AuthorizationApiApiKeys[AuthorizationApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(AuthorizationApiApiKeys = exports.AuthorizationApiApiKeys || (exports.AuthorizationApiApiKeys = {}));
var AuthorizationApi = (function () {
    function AuthorizationApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AuthorizationApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthorizationApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AuthorizationApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AuthorizationApi.prototype.setApiKey = function (key, value) {
        this.authentications[AuthorizationApiApiKeys[key]].apiKey = value;
    };
    AuthorizationApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AuthorizationApi;
}());
exports.AuthorizationApi = AuthorizationApi;
var Authorization_v1ApiApiKeys;
(function (Authorization_v1ApiApiKeys) {
    Authorization_v1ApiApiKeys[Authorization_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Authorization_v1ApiApiKeys = exports.Authorization_v1ApiApiKeys || (exports.Authorization_v1ApiApiKeys = {}));
var Authorization_v1Api = (function () {
    function Authorization_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Authorization_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authorization_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Authorization_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Authorization_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Authorization_v1ApiApiKeys[key]].apiKey = value;
    };
    Authorization_v1Api.prototype.createNamespacedLocalSubjectAccessReview = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedLocalSubjectAccessReview.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedLocalSubjectAccessReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authorization_v1Api.prototype.createSelfSubjectAccessReview = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1/selfsubjectaccessreviews';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createSelfSubjectAccessReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authorization_v1Api.prototype.createSelfSubjectRulesReview = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1/selfsubjectrulesreviews';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createSelfSubjectRulesReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authorization_v1Api.prototype.createSubjectAccessReview = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1/subjectaccessreviews';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createSubjectAccessReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authorization_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Authorization_v1Api;
}());
exports.Authorization_v1Api = Authorization_v1Api;
var Authorization_v1beta1ApiApiKeys;
(function (Authorization_v1beta1ApiApiKeys) {
    Authorization_v1beta1ApiApiKeys[Authorization_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Authorization_v1beta1ApiApiKeys = exports.Authorization_v1beta1ApiApiKeys || (exports.Authorization_v1beta1ApiApiKeys = {}));
var Authorization_v1beta1Api = (function () {
    function Authorization_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Authorization_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Authorization_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Authorization_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Authorization_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Authorization_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Authorization_v1beta1Api.prototype.createNamespacedLocalSubjectAccessReview = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedLocalSubjectAccessReview.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedLocalSubjectAccessReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authorization_v1beta1Api.prototype.createSelfSubjectAccessReview = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createSelfSubjectAccessReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authorization_v1beta1Api.prototype.createSelfSubjectRulesReview = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createSelfSubjectRulesReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authorization_v1beta1Api.prototype.createSubjectAccessReview = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1beta1/subjectaccessreviews';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createSubjectAccessReview.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Authorization_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/authorization.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Authorization_v1beta1Api;
}());
exports.Authorization_v1beta1Api = Authorization_v1beta1Api;
var AutoscalingApiApiKeys;
(function (AutoscalingApiApiKeys) {
    AutoscalingApiApiKeys[AutoscalingApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(AutoscalingApiApiKeys = exports.AutoscalingApiApiKeys || (exports.AutoscalingApiApiKeys = {}));
var AutoscalingApi = (function () {
    function AutoscalingApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AutoscalingApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoscalingApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AutoscalingApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AutoscalingApi.prototype.setApiKey = function (key, value) {
        this.authentications[AutoscalingApiApiKeys[key]].apiKey = value;
    };
    AutoscalingApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/autoscaling/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AutoscalingApi;
}());
exports.AutoscalingApi = AutoscalingApi;
var Autoscaling_v1ApiApiKeys;
(function (Autoscaling_v1ApiApiKeys) {
    Autoscaling_v1ApiApiKeys[Autoscaling_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Autoscaling_v1ApiApiKeys = exports.Autoscaling_v1ApiApiKeys || (exports.Autoscaling_v1ApiApiKeys = {}));
var Autoscaling_v1Api = (function () {
    function Autoscaling_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Autoscaling_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Autoscaling_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Autoscaling_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Autoscaling_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Autoscaling_v1ApiApiKeys[key]].apiKey = value;
    };
    Autoscaling_v1Api.prototype.createNamespacedHorizontalPodAutoscaler = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedHorizontalPodAutoscaler.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.deleteCollectionNamespacedHorizontalPodAutoscaler = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.deleteNamespacedHorizontalPodAutoscaler = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedHorizontalPodAutoscaler.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedHorizontalPodAutoscaler.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.listHorizontalPodAutoscalerForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/horizontalpodautoscalers';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.listNamespacedHorizontalPodAutoscaler = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.patchNamespacedHorizontalPodAutoscaler = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedHorizontalPodAutoscaler.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedHorizontalPodAutoscaler.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.patchNamespacedHorizontalPodAutoscalerStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.readNamespacedHorizontalPodAutoscaler = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedHorizontalPodAutoscaler.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.readNamespacedHorizontalPodAutoscalerStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.replaceNamespacedHorizontalPodAutoscaler = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedHorizontalPodAutoscaler.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedHorizontalPodAutoscaler.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v1Api.prototype.replaceNamespacedHorizontalPodAutoscalerStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Autoscaling_v1Api;
}());
exports.Autoscaling_v1Api = Autoscaling_v1Api;
var Autoscaling_v2beta1ApiApiKeys;
(function (Autoscaling_v2beta1ApiApiKeys) {
    Autoscaling_v2beta1ApiApiKeys[Autoscaling_v2beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Autoscaling_v2beta1ApiApiKeys = exports.Autoscaling_v2beta1ApiApiKeys || (exports.Autoscaling_v2beta1ApiApiKeys = {}));
var Autoscaling_v2beta1Api = (function () {
    function Autoscaling_v2beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Autoscaling_v2beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Autoscaling_v2beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Autoscaling_v2beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Autoscaling_v2beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Autoscaling_v2beta1ApiApiKeys[key]].apiKey = value;
    };
    Autoscaling_v2beta1Api.prototype.createNamespacedHorizontalPodAutoscaler = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedHorizontalPodAutoscaler.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.deleteCollectionNamespacedHorizontalPodAutoscaler = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.deleteNamespacedHorizontalPodAutoscaler = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedHorizontalPodAutoscaler.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedHorizontalPodAutoscaler.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.listHorizontalPodAutoscalerForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/horizontalpodautoscalers';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.listNamespacedHorizontalPodAutoscaler = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.patchNamespacedHorizontalPodAutoscaler = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedHorizontalPodAutoscaler.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedHorizontalPodAutoscaler.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.patchNamespacedHorizontalPodAutoscalerStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.readNamespacedHorizontalPodAutoscaler = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedHorizontalPodAutoscaler.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.readNamespacedHorizontalPodAutoscalerStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.replaceNamespacedHorizontalPodAutoscaler = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedHorizontalPodAutoscaler.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedHorizontalPodAutoscaler.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedHorizontalPodAutoscaler.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Autoscaling_v2beta1Api.prototype.replaceNamespacedHorizontalPodAutoscalerStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedHorizontalPodAutoscalerStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Autoscaling_v2beta1Api;
}());
exports.Autoscaling_v2beta1Api = Autoscaling_v2beta1Api;
var BatchApiApiKeys;
(function (BatchApiApiKeys) {
    BatchApiApiKeys[BatchApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(BatchApiApiKeys = exports.BatchApiApiKeys || (exports.BatchApiApiKeys = {}));
var BatchApi = (function () {
    function BatchApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(BatchApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BatchApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    BatchApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    BatchApi.prototype.setApiKey = function (key, value) {
        this.authentications[BatchApiApiKeys[key]].apiKey = value;
    };
    BatchApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/batch/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return BatchApi;
}());
exports.BatchApi = BatchApi;
var Batch_v1ApiApiKeys;
(function (Batch_v1ApiApiKeys) {
    Batch_v1ApiApiKeys[Batch_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Batch_v1ApiApiKeys = exports.Batch_v1ApiApiKeys || (exports.Batch_v1ApiApiKeys = {}));
var Batch_v1Api = (function () {
    function Batch_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Batch_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Batch_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Batch_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Batch_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Batch_v1ApiApiKeys[key]].apiKey = value;
    };
    Batch_v1Api.prototype.createNamespacedJob = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.deleteCollectionNamespacedJob = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.deleteNamespacedJob = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/batch/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.listJobForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/batch/v1/jobs';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.listNamespacedJob = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.patchNamespacedJob = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.patchNamespacedJobStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedJobStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedJobStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedJobStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.readNamespacedJob = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.readNamespacedJobStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedJobStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedJobStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.replaceNamespacedJob = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1Api.prototype.replaceNamespacedJobStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedJobStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedJobStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedJobStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Batch_v1Api;
}());
exports.Batch_v1Api = Batch_v1Api;
var Batch_v1beta1ApiApiKeys;
(function (Batch_v1beta1ApiApiKeys) {
    Batch_v1beta1ApiApiKeys[Batch_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Batch_v1beta1ApiApiKeys = exports.Batch_v1beta1ApiApiKeys || (exports.Batch_v1beta1ApiApiKeys = {}));
var Batch_v1beta1Api = (function () {
    function Batch_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Batch_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Batch_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Batch_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Batch_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Batch_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Batch_v1beta1Api.prototype.createNamespacedCronJob = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedCronJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.deleteCollectionNamespacedCronJob = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.deleteNamespacedCronJob = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedCronJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedCronJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.listCronJobForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/cronjobs';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.listNamespacedCronJob = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.patchNamespacedCronJob = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedCronJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCronJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.patchNamespacedCronJobStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedCronJobStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCronJobStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedCronJobStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.readNamespacedCronJob = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedCronJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.readNamespacedCronJobStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedCronJobStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedCronJobStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.replaceNamespacedCronJob = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCronJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCronJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v1beta1Api.prototype.replaceNamespacedCronJobStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCronJobStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCronJobStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCronJobStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Batch_v1beta1Api;
}());
exports.Batch_v1beta1Api = Batch_v1beta1Api;
var Batch_v2alpha1ApiApiKeys;
(function (Batch_v2alpha1ApiApiKeys) {
    Batch_v2alpha1ApiApiKeys[Batch_v2alpha1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Batch_v2alpha1ApiApiKeys = exports.Batch_v2alpha1ApiApiKeys || (exports.Batch_v2alpha1ApiApiKeys = {}));
var Batch_v2alpha1Api = (function () {
    function Batch_v2alpha1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Batch_v2alpha1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Batch_v2alpha1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Batch_v2alpha1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Batch_v2alpha1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Batch_v2alpha1ApiApiKeys[key]].apiKey = value;
    };
    Batch_v2alpha1Api.prototype.createNamespacedCronJob = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedCronJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.deleteCollectionNamespacedCronJob = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.deleteNamespacedCronJob = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedCronJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedCronJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.listCronJobForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/cronjobs';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.listNamespacedCronJob = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.patchNamespacedCronJob = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedCronJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCronJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.patchNamespacedCronJobStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedCronJobStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCronJobStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedCronJobStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.readNamespacedCronJob = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedCronJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.readNamespacedCronJobStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedCronJobStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedCronJobStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.replaceNamespacedCronJob = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCronJob.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCronJob.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCronJob.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Batch_v2alpha1Api.prototype.replaceNamespacedCronJobStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCronJobStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCronJobStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCronJobStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Batch_v2alpha1Api;
}());
exports.Batch_v2alpha1Api = Batch_v2alpha1Api;
var CertificatesApiApiKeys;
(function (CertificatesApiApiKeys) {
    CertificatesApiApiKeys[CertificatesApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(CertificatesApiApiKeys = exports.CertificatesApiApiKeys || (exports.CertificatesApiApiKeys = {}));
var CertificatesApi = (function () {
    function CertificatesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CertificatesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CertificatesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    CertificatesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    CertificatesApi.prototype.setApiKey = function (key, value) {
        this.authentications[CertificatesApiApiKeys[key]].apiKey = value;
    };
    CertificatesApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return CertificatesApi;
}());
exports.CertificatesApi = CertificatesApi;
var Certificates_v1beta1ApiApiKeys;
(function (Certificates_v1beta1ApiApiKeys) {
    Certificates_v1beta1ApiApiKeys[Certificates_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Certificates_v1beta1ApiApiKeys = exports.Certificates_v1beta1ApiApiKeys || (exports.Certificates_v1beta1ApiApiKeys = {}));
var Certificates_v1beta1Api = (function () {
    function Certificates_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Certificates_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Certificates_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Certificates_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Certificates_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Certificates_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Certificates_v1beta1Api.prototype.createCertificateSigningRequest = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createCertificateSigningRequest.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.deleteCertificateSigningRequest = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteCertificateSigningRequest.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteCertificateSigningRequest.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.deleteCollectionCertificateSigningRequest = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.listCertificateSigningRequest = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.patchCertificateSigningRequest = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchCertificateSigningRequest.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchCertificateSigningRequest.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.patchCertificateSigningRequestStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchCertificateSigningRequestStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchCertificateSigningRequestStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.readCertificateSigningRequest = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readCertificateSigningRequest.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.readCertificateSigningRequestStatus = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readCertificateSigningRequestStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.replaceCertificateSigningRequest = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceCertificateSigningRequest.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceCertificateSigningRequest.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.replaceCertificateSigningRequestApproval = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceCertificateSigningRequestApproval.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceCertificateSigningRequestApproval.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Certificates_v1beta1Api.prototype.replaceCertificateSigningRequestStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceCertificateSigningRequestStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceCertificateSigningRequestStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Certificates_v1beta1Api;
}());
exports.Certificates_v1beta1Api = Certificates_v1beta1Api;
var CoreApiApiKeys;
(function (CoreApiApiKeys) {
    CoreApiApiKeys[CoreApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(CoreApiApiKeys = exports.CoreApiApiKeys || (exports.CoreApiApiKeys = {}));
var CoreApi = (function () {
    function CoreApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CoreApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    CoreApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    CoreApi.prototype.setApiKey = function (key, value) {
        this.authentications[CoreApiApiKeys[key]].apiKey = value;
    };
    CoreApi.prototype.getAPIVersions = function () {
        var localVarPath = this.basePath + '/api/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return CoreApi;
}());
exports.CoreApi = CoreApi;
var Core_v1ApiApiKeys;
(function (Core_v1ApiApiKeys) {
    Core_v1ApiApiKeys[Core_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Core_v1ApiApiKeys = exports.Core_v1ApiApiKeys || (exports.Core_v1ApiApiKeys = {}));
var Core_v1Api = (function () {
    function Core_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Core_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Core_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Core_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Core_v1ApiApiKeys[key]].apiKey = value;
    };
    Core_v1Api.prototype.connectDeleteNamespacedPodProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectDeleteNamespacedPodProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectDeleteNamespacedPodProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectDeleteNamespacedPodProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectDeleteNamespacedPodProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectDeleteNamespacedPodProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectDeleteNamespacedPodProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectDeleteNamespacedServiceProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectDeleteNamespacedServiceProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectDeleteNamespacedServiceProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectDeleteNamespacedServiceProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectDeleteNamespacedServiceProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectDeleteNamespacedServiceProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectDeleteNamespacedServiceProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectDeleteNodeProxy = function (name, path) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectDeleteNodeProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectDeleteNodeProxyWithPath = function (name, path, path2) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectDeleteNodeProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectDeleteNodeProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectGetNamespacedPodAttach = function (name, namespace, container, stderr, stdin, stdout, tty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/attach'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectGetNamespacedPodAttach.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectGetNamespacedPodAttach.');
        }
        if (container !== undefined) {
            queryParameters['container'] = container;
        }
        if (stderr !== undefined) {
            queryParameters['stderr'] = stderr;
        }
        if (stdin !== undefined) {
            queryParameters['stdin'] = stdin;
        }
        if (stdout !== undefined) {
            queryParameters['stdout'] = stdout;
        }
        if (tty !== undefined) {
            queryParameters['tty'] = tty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectGetNamespacedPodExec = function (name, namespace, command, container, stderr, stdin, stdout, tty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/exec'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectGetNamespacedPodExec.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectGetNamespacedPodExec.');
        }
        if (command !== undefined) {
            queryParameters['command'] = command;
        }
        if (container !== undefined) {
            queryParameters['container'] = container;
        }
        if (stderr !== undefined) {
            queryParameters['stderr'] = stderr;
        }
        if (stdin !== undefined) {
            queryParameters['stdin'] = stdin;
        }
        if (stdout !== undefined) {
            queryParameters['stdout'] = stdout;
        }
        if (tty !== undefined) {
            queryParameters['tty'] = tty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectGetNamespacedPodPortforward = function (name, namespace, ports) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/portforward'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectGetNamespacedPodPortforward.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectGetNamespacedPodPortforward.');
        }
        if (ports !== undefined) {
            queryParameters['ports'] = ports;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectGetNamespacedPodProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectGetNamespacedPodProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectGetNamespacedPodProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectGetNamespacedPodProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectGetNamespacedPodProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectGetNamespacedPodProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectGetNamespacedPodProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectGetNamespacedServiceProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectGetNamespacedServiceProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectGetNamespacedServiceProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectGetNamespacedServiceProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectGetNamespacedServiceProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectGetNamespacedServiceProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectGetNamespacedServiceProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectGetNodeProxy = function (name, path) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectGetNodeProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectGetNodeProxyWithPath = function (name, path, path2) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectGetNodeProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectGetNodeProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectHeadNamespacedPodProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectHeadNamespacedPodProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectHeadNamespacedPodProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'HEAD',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectHeadNamespacedPodProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectHeadNamespacedPodProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectHeadNamespacedPodProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectHeadNamespacedPodProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'HEAD',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectHeadNamespacedServiceProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectHeadNamespacedServiceProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectHeadNamespacedServiceProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'HEAD',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectHeadNamespacedServiceProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectHeadNamespacedServiceProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectHeadNamespacedServiceProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectHeadNamespacedServiceProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'HEAD',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectHeadNodeProxy = function (name, path) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectHeadNodeProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'HEAD',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectHeadNodeProxyWithPath = function (name, path, path2) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectHeadNodeProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectHeadNodeProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'HEAD',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectOptionsNamespacedPodProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectOptionsNamespacedPodProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectOptionsNamespacedPodProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'OPTIONS',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectOptionsNamespacedPodProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectOptionsNamespacedPodProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectOptionsNamespacedPodProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectOptionsNamespacedPodProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'OPTIONS',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectOptionsNamespacedServiceProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectOptionsNamespacedServiceProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectOptionsNamespacedServiceProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'OPTIONS',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectOptionsNamespacedServiceProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectOptionsNamespacedServiceProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectOptionsNamespacedServiceProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectOptionsNamespacedServiceProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'OPTIONS',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectOptionsNodeProxy = function (name, path) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectOptionsNodeProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'OPTIONS',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectOptionsNodeProxyWithPath = function (name, path, path2) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectOptionsNodeProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectOptionsNodeProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'OPTIONS',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPatchNamespacedPodProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPatchNamespacedPodProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPatchNamespacedPodProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPatchNamespacedPodProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPatchNamespacedPodProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPatchNamespacedPodProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectPatchNamespacedPodProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPatchNamespacedServiceProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPatchNamespacedServiceProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPatchNamespacedServiceProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPatchNamespacedServiceProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPatchNamespacedServiceProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPatchNamespacedServiceProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectPatchNamespacedServiceProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPatchNodeProxy = function (name, path) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPatchNodeProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPatchNodeProxyWithPath = function (name, path, path2) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPatchNodeProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectPatchNodeProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPostNamespacedPodAttach = function (name, namespace, container, stderr, stdin, stdout, tty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/attach'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPostNamespacedPodAttach.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPostNamespacedPodAttach.');
        }
        if (container !== undefined) {
            queryParameters['container'] = container;
        }
        if (stderr !== undefined) {
            queryParameters['stderr'] = stderr;
        }
        if (stdin !== undefined) {
            queryParameters['stdin'] = stdin;
        }
        if (stdout !== undefined) {
            queryParameters['stdout'] = stdout;
        }
        if (tty !== undefined) {
            queryParameters['tty'] = tty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPostNamespacedPodExec = function (name, namespace, command, container, stderr, stdin, stdout, tty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/exec'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPostNamespacedPodExec.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPostNamespacedPodExec.');
        }
        if (command !== undefined) {
            queryParameters['command'] = command;
        }
        if (container !== undefined) {
            queryParameters['container'] = container;
        }
        if (stderr !== undefined) {
            queryParameters['stderr'] = stderr;
        }
        if (stdin !== undefined) {
            queryParameters['stdin'] = stdin;
        }
        if (stdout !== undefined) {
            queryParameters['stdout'] = stdout;
        }
        if (tty !== undefined) {
            queryParameters['tty'] = tty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPostNamespacedPodPortforward = function (name, namespace, ports) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/portforward'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPostNamespacedPodPortforward.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPostNamespacedPodPortforward.');
        }
        if (ports !== undefined) {
            queryParameters['ports'] = ports;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPostNamespacedPodProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPostNamespacedPodProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPostNamespacedPodProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPostNamespacedPodProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPostNamespacedPodProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPostNamespacedPodProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectPostNamespacedPodProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPostNamespacedServiceProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPostNamespacedServiceProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPostNamespacedServiceProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPostNamespacedServiceProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPostNamespacedServiceProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPostNamespacedServiceProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectPostNamespacedServiceProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPostNodeProxy = function (name, path) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPostNodeProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPostNodeProxyWithPath = function (name, path, path2) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPostNodeProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectPostNodeProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPutNamespacedPodProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPutNamespacedPodProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPutNamespacedPodProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPutNamespacedPodProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPutNamespacedPodProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPutNamespacedPodProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectPutNamespacedPodProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPutNamespacedServiceProxy = function (name, namespace, path) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPutNamespacedServiceProxy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPutNamespacedServiceProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPutNamespacedServiceProxyWithPath = function (name, namespace, path, path2) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPutNamespacedServiceProxyWithPath.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling connectPutNamespacedServiceProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectPutNamespacedServiceProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPutNodeProxy = function (name, path) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPutNodeProxy.');
        }
        if (path !== undefined) {
            queryParameters['path'] = path;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.connectPutNodeProxyWithPath = function (name, path, path2) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/proxy/{path}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'path' + '}', String(path));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling connectPutNodeProxyWithPath.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling connectPutNodeProxyWithPath.');
        }
        if (path2 !== undefined) {
            queryParameters['path'] = path2;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespace = function (body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespace.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedBinding = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/bindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedConfigMap = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/configmaps'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedConfigMap.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedConfigMap.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedEndpoints = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/endpoints'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedEndpoints.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedEndpoints.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedEvent = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/events'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedEvent.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedLimitRange = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/limitranges'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedLimitRange.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedLimitRange.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedPersistentVolumeClaim = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedPersistentVolumeClaim.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedPersistentVolumeClaim.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedPod = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedPod.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedPod.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedPodBinding = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/binding'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling createNamespacedPodBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedPodBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedPodBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedPodEviction = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/eviction'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling createNamespacedPodEviction.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedPodEviction.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedPodEviction.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedPodTemplate = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/podtemplates'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedPodTemplate.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedPodTemplate.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedReplicationController = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedReplicationController.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedReplicationController.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedResourceQuota = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedResourceQuota.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedResourceQuota.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedSecret = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/secrets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedSecret.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedSecret.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedService = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNamespacedServiceAccount = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/serviceaccounts'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedServiceAccount.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedServiceAccount.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createNode = function (body, pretty) {
        var localVarPath = this.basePath + '/api/v1/nodes';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNode.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.createPersistentVolume = function (body, pretty) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPersistentVolume.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedConfigMap = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/configmaps'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedConfigMap.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedEndpoints = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/endpoints'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedEndpoints.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedEvent = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/events'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedLimitRange = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/limitranges'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedLimitRange.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedPersistentVolumeClaim = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedPersistentVolumeClaim.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedPod = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedPod.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedPodTemplate = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/podtemplates'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedPodTemplate.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedReplicationController = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedReplicationController.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedResourceQuota = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedResourceQuota.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedSecret = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/secrets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedSecret.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNamespacedServiceAccount = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/serviceaccounts'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedServiceAccount.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionNode = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/nodes';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteCollectionPersistentVolume = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespace = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespace.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespace.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedConfigMap = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/configmaps/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedConfigMap.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedConfigMap.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedConfigMap.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedEndpoints = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/endpoints/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedEndpoints.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedEndpoints.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedEndpoints.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedEvent = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/events/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedEvent.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedEvent.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedLimitRange = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/limitranges/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedLimitRange.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedLimitRange.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedLimitRange.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedPersistentVolumeClaim = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedPersistentVolumeClaim.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedPersistentVolumeClaim.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedPersistentVolumeClaim.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedPod = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedPod.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedPod.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedPod.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedPodTemplate = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/podtemplates/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedPodTemplate.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedPodTemplate.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedPodTemplate.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedReplicationController = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedReplicationController.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedReplicationController.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedReplicationController.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedResourceQuota = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedResourceQuota.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedResourceQuota.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedResourceQuota.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedSecret = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/secrets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedSecret.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedSecret.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedSecret.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedService = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedService.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNamespacedServiceAccount = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/serviceaccounts/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedServiceAccount.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedServiceAccount.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedServiceAccount.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deleteNode = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNode.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNode.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.deletePersistentVolume = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deletePersistentVolume.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deletePersistentVolume.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/api/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listComponentStatus = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/componentstatuses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listConfigMapForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/configmaps';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listEndpointsForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/endpoints';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listEventForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/events';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listLimitRangeForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/limitranges';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespace = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedConfigMap = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/configmaps'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedConfigMap.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedEndpoints = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/endpoints'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedEndpoints.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedEvent = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/events'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedLimitRange = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/limitranges'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedLimitRange.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedPersistentVolumeClaim = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedPersistentVolumeClaim.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedPod = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedPod.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedPodTemplate = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/podtemplates'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedPodTemplate.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedReplicationController = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedReplicationController.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedResourceQuota = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedResourceQuota.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedSecret = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/secrets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedSecret.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedService = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNamespacedServiceAccount = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/serviceaccounts'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedServiceAccount.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listNode = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/nodes';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listPersistentVolume = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listPersistentVolumeClaimForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumeclaims';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listPodForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/pods';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listPodTemplateForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/podtemplates';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listReplicationControllerForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/replicationcontrollers';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listResourceQuotaForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/resourcequotas';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listSecretForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/secrets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listServiceAccountForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/serviceaccounts';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.listServiceForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/api/v1/services';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespace = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespace.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespace.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespaceStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespaceStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespaceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedConfigMap = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/configmaps/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedConfigMap.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedConfigMap.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedConfigMap.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedEndpoints = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/endpoints/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedEndpoints.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedEndpoints.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedEndpoints.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedEvent = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/events/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedEvent.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedEvent.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedLimitRange = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/limitranges/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedLimitRange.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedLimitRange.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedLimitRange.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedPersistentVolumeClaim = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedPersistentVolumeClaim.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedPersistentVolumeClaim.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedPersistentVolumeClaim.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedPersistentVolumeClaimStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedPersistentVolumeClaimStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedPersistentVolumeClaimStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedPersistentVolumeClaimStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedPod = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedPod.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedPod.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedPod.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedPodStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedPodStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedPodStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedPodStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedPodTemplate = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/podtemplates/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedPodTemplate.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedPodTemplate.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedPodTemplate.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedReplicationController = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicationController.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicationController.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicationController.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedReplicationControllerScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicationControllerScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicationControllerScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicationControllerScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedReplicationControllerStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicationControllerStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicationControllerStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicationControllerStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedResourceQuota = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedResourceQuota.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedResourceQuota.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedResourceQuota.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedResourceQuotaStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedResourceQuotaStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedResourceQuotaStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedResourceQuotaStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedSecret = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/secrets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedSecret.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedSecret.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedSecret.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedService = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedService.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedServiceAccount = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/serviceaccounts/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedServiceAccount.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedServiceAccount.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedServiceAccount.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNamespacedServiceStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedServiceStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedServiceStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedServiceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNode = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNode.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNode.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchNodeStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNodeStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNodeStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchPersistentVolume = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchPersistentVolume.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchPersistentVolume.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.patchPersistentVolumeStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchPersistentVolumeStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchPersistentVolumeStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readComponentStatus = function (name, pretty) {
        var localVarPath = this.basePath + '/api/v1/componentstatuses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readComponentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespace = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespace.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespaceStatus = function (name, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespaceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedConfigMap = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/configmaps/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedConfigMap.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedConfigMap.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedEndpoints = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/endpoints/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedEndpoints.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedEndpoints.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedEvent = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/events/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedEvent.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedLimitRange = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/limitranges/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedLimitRange.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedLimitRange.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedPersistentVolumeClaim = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedPersistentVolumeClaim.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedPersistentVolumeClaim.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedPersistentVolumeClaimStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedPersistentVolumeClaimStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedPersistentVolumeClaimStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedPod = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedPod.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedPod.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedPodLog = function (name, namespace, container, follow, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/log'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedPodLog.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedPodLog.');
        }
        if (container !== undefined) {
            queryParameters['container'] = container;
        }
        if (follow !== undefined) {
            queryParameters['follow'] = follow;
        }
        if (limitBytes !== undefined) {
            queryParameters['limitBytes'] = limitBytes;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (previous !== undefined) {
            queryParameters['previous'] = previous;
        }
        if (sinceSeconds !== undefined) {
            queryParameters['sinceSeconds'] = sinceSeconds;
        }
        if (tailLines !== undefined) {
            queryParameters['tailLines'] = tailLines;
        }
        if (timestamps !== undefined) {
            queryParameters['timestamps'] = timestamps;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedPodStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedPodStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedPodStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedPodTemplate = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/podtemplates/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedPodTemplate.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedPodTemplate.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedReplicationController = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicationController.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicationController.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedReplicationControllerScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicationControllerScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicationControllerScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedReplicationControllerStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicationControllerStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicationControllerStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedResourceQuota = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedResourceQuota.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedResourceQuota.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedResourceQuotaStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedResourceQuotaStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedResourceQuotaStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedSecret = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/secrets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedSecret.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedSecret.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedService = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedService.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedServiceAccount = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/serviceaccounts/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedServiceAccount.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedServiceAccount.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNamespacedServiceStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedServiceStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedServiceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNode = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNode.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readNodeStatus = function (name, pretty) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNodeStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readPersistentVolume = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readPersistentVolume.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.readPersistentVolumeStatus = function (name, pretty) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readPersistentVolumeStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespace = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespace.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespace.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespaceFinalize = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{name}/finalize'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespaceFinalize.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespaceFinalize.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespaceStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespaceStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespaceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedConfigMap = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/configmaps/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedConfigMap.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedConfigMap.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedConfigMap.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedEndpoints = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/endpoints/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedEndpoints.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedEndpoints.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedEndpoints.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedEvent = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/events/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedEvent.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedEvent.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedLimitRange = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/limitranges/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedLimitRange.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedLimitRange.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedLimitRange.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedPersistentVolumeClaim = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedPersistentVolumeClaim.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedPersistentVolumeClaim.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedPersistentVolumeClaim.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedPersistentVolumeClaimStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedPersistentVolumeClaimStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedPersistentVolumeClaimStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedPersistentVolumeClaimStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedPod = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedPod.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedPod.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedPod.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedPodStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/pods/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedPodStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedPodStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedPodStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedPodTemplate = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/podtemplates/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedPodTemplate.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedPodTemplate.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedPodTemplate.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedReplicationController = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicationController.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicationController.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicationController.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedReplicationControllerScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicationControllerScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicationControllerScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicationControllerScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedReplicationControllerStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicationControllerStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicationControllerStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicationControllerStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedResourceQuota = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedResourceQuota.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedResourceQuota.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedResourceQuota.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedResourceQuotaStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedResourceQuotaStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedResourceQuotaStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedResourceQuotaStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedSecret = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/secrets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedSecret.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedSecret.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedSecret.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedService = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedService.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedService.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedService.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedServiceAccount = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/serviceaccounts/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedServiceAccount.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedServiceAccount.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedServiceAccount.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNamespacedServiceStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/namespaces/{namespace}/services/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedServiceStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedServiceStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedServiceStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNode = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNode.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNode.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replaceNodeStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/nodes/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNodeStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNodeStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replacePersistentVolume = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replacePersistentVolume.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replacePersistentVolume.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Core_v1Api.prototype.replacePersistentVolumeStatus = function (name, body, pretty) {
        var localVarPath = this.basePath + '/api/v1/persistentvolumes/{name}/status'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replacePersistentVolumeStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replacePersistentVolumeStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Core_v1Api;
}());
exports.Core_v1Api = Core_v1Api;
var Custom_objectsApiApiKeys;
(function (Custom_objectsApiApiKeys) {
    Custom_objectsApiApiKeys[Custom_objectsApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Custom_objectsApiApiKeys = exports.Custom_objectsApiApiKeys || (exports.Custom_objectsApiApiKeys = {}));
var Custom_objectsApi = (function () {
    function Custom_objectsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Custom_objectsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Custom_objectsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Custom_objectsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Custom_objectsApi.prototype.setApiKey = function (key, value) {
        this.authentications[Custom_objectsApiApiKeys[key]].apiKey = value;
    };
    Custom_objectsApi.prototype.createClusterCustomObject = function (group, version, plural, body, pretty) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/{plural}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'plural' + '}', String(plural));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling createClusterCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling createClusterCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling createClusterCustomObject.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createClusterCustomObject.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.createNamespacedCustomObject = function (group, version, namespace, plural, body, pretty) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'plural' + '}', String(plural));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling createNamespacedCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling createNamespacedCustomObject.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling createNamespacedCustomObject.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedCustomObject.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.deleteClusterCustomObject = function (group, version, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'plural' + '}', String(plural))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling deleteClusterCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling deleteClusterCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling deleteClusterCustomObject.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterCustomObject.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteClusterCustomObject.');
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.deleteNamespacedCustomObject = function (group, version, namespace, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'plural' + '}', String(plural))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling deleteNamespacedCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling deleteNamespacedCustomObject.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling deleteNamespacedCustomObject.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedCustomObject.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedCustomObject.');
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.getClusterCustomObject = function (group, version, plural, name) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'plural' + '}', String(plural))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling getClusterCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getClusterCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling getClusterCustomObject.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getClusterCustomObject.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.getNamespacedCustomObject = function (group, version, namespace, plural, name) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'plural' + '}', String(plural))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling getNamespacedCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getNamespacedCustomObject.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling getNamespacedCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling getNamespacedCustomObject.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getNamespacedCustomObject.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.listClusterCustomObject = function (group, version, plural, pretty, labelSelector, resourceVersion, watch) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/{plural}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'plural' + '}', String(plural));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling listClusterCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling listClusterCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling listClusterCustomObject.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.listNamespacedCustomObject = function (group, version, namespace, plural, pretty, labelSelector, resourceVersion, watch) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'plural' + '}', String(plural));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling listNamespacedCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling listNamespacedCustomObject.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling listNamespacedCustomObject.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.patchClusterCustomObject = function (group, version, plural, name, body) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'plural' + '}', String(plural))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling patchClusterCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling patchClusterCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling patchClusterCustomObject.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterCustomObject.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterCustomObject.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.patchNamespacedCustomObject = function (group, version, namespace, plural, name, body) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'plural' + '}', String(plural))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling patchNamespacedCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling patchNamespacedCustomObject.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling patchNamespacedCustomObject.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedCustomObject.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedCustomObject.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.replaceClusterCustomObject = function (group, version, plural, name, body) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/{plural}/{name}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'plural' + '}', String(plural))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling replaceClusterCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling replaceClusterCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling replaceClusterCustomObject.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterCustomObject.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceClusterCustomObject.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Custom_objectsApi.prototype.replaceNamespacedCustomObject = function (group, version, namespace, plural, name, body) {
        var localVarPath = this.basePath + '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}'
            .replace('{' + 'group' + '}', String(group))
            .replace('{' + 'version' + '}', String(version))
            .replace('{' + 'namespace' + '}', String(namespace))
            .replace('{' + 'plural' + '}', String(plural))
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling replaceNamespacedCustomObject.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling replaceNamespacedCustomObject.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedCustomObject.');
        }
        if (plural === null || plural === undefined) {
            throw new Error('Required parameter plural was null or undefined when calling replaceNamespacedCustomObject.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedCustomObject.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedCustomObject.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Custom_objectsApi;
}());
exports.Custom_objectsApi = Custom_objectsApi;
var EventsApiApiKeys;
(function (EventsApiApiKeys) {
    EventsApiApiKeys[EventsApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(EventsApiApiKeys = exports.EventsApiApiKeys || (exports.EventsApiApiKeys = {}));
var EventsApi = (function () {
    function EventsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(EventsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EventsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    EventsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    EventsApi.prototype.setApiKey = function (key, value) {
        this.authentications[EventsApiApiKeys[key]].apiKey = value;
    };
    EventsApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/events.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return EventsApi;
}());
exports.EventsApi = EventsApi;
var Events_v1beta1ApiApiKeys;
(function (Events_v1beta1ApiApiKeys) {
    Events_v1beta1ApiApiKeys[Events_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Events_v1beta1ApiApiKeys = exports.Events_v1beta1ApiApiKeys || (exports.Events_v1beta1ApiApiKeys = {}));
var Events_v1beta1Api = (function () {
    function Events_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Events_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Events_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Events_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Events_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Events_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Events_v1beta1Api.prototype.createNamespacedEvent = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedEvent.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Events_v1beta1Api.prototype.deleteCollectionNamespacedEvent = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Events_v1beta1Api.prototype.deleteNamespacedEvent = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedEvent.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedEvent.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Events_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/events.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Events_v1beta1Api.prototype.listEventForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/events.k8s.io/v1beta1/events';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Events_v1beta1Api.prototype.listNamespacedEvent = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Events_v1beta1Api.prototype.patchNamespacedEvent = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedEvent.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedEvent.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Events_v1beta1Api.prototype.readNamespacedEvent = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedEvent.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Events_v1beta1Api.prototype.replaceNamespacedEvent = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedEvent.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedEvent.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedEvent.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Events_v1beta1Api;
}());
exports.Events_v1beta1Api = Events_v1beta1Api;
var ExtensionsApiApiKeys;
(function (ExtensionsApiApiKeys) {
    ExtensionsApiApiKeys[ExtensionsApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(ExtensionsApiApiKeys = exports.ExtensionsApiApiKeys || (exports.ExtensionsApiApiKeys = {}));
var ExtensionsApi = (function () {
    function ExtensionsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ExtensionsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExtensionsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ExtensionsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ExtensionsApi.prototype.setApiKey = function (key, value) {
        this.authentications[ExtensionsApiApiKeys[key]].apiKey = value;
    };
    ExtensionsApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/extensions/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ExtensionsApi;
}());
exports.ExtensionsApi = ExtensionsApi;
var Extensions_v1beta1ApiApiKeys;
(function (Extensions_v1beta1ApiApiKeys) {
    Extensions_v1beta1ApiApiKeys[Extensions_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Extensions_v1beta1ApiApiKeys = exports.Extensions_v1beta1ApiApiKeys || (exports.Extensions_v1beta1ApiApiKeys = {}));
var Extensions_v1beta1Api = (function () {
    function Extensions_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Extensions_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Extensions_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Extensions_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Extensions_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Extensions_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Extensions_v1beta1Api.prototype.createNamespacedDaemonSet = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.createNamespacedDeployment = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.createNamespacedDeploymentRollback = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling createNamespacedDeploymentRollback.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedDeploymentRollback.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedDeploymentRollback.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.createNamespacedIngress = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedIngress.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedIngress.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.createNamespacedNetworkPolicy = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedNetworkPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.createNamespacedReplicaSet = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.createPodSecurityPolicy = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/podsecuritypolicies';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteCollectionNamespacedDaemonSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteCollectionNamespacedDeployment = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteCollectionNamespacedIngress = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedIngress.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteCollectionNamespacedNetworkPolicy = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteCollectionNamespacedReplicaSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteCollectionPodSecurityPolicy = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/podsecuritypolicies';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteNamespacedDaemonSet = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteNamespacedDeployment = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteNamespacedIngress = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedIngress.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedIngress.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedIngress.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteNamespacedNetworkPolicy = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedNetworkPolicy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedNetworkPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deleteNamespacedReplicaSet = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.deletePodSecurityPolicy = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/podsecuritypolicies/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deletePodSecurityPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deletePodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listDaemonSetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/daemonsets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listDeploymentForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/deployments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listIngressForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/ingresses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listNamespacedDaemonSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listNamespacedDeployment = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listNamespacedIngress = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedIngress.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listNamespacedNetworkPolicy = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listNamespacedReplicaSet = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listNetworkPolicyForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/networkpolicies';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listPodSecurityPolicy = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/podsecuritypolicies';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.listReplicaSetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/replicasets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedDaemonSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedDaemonSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDaemonSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDaemonSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDaemonSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedDeployment = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedDeploymentScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedDeploymentStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedIngress = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedIngress.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedIngress.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedIngress.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedIngressStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedIngressStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedIngressStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedIngressStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedNetworkPolicy = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedNetworkPolicy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedNetworkPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedReplicaSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedReplicaSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicaSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicaSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicaSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedReplicaSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicaSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicaSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicaSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchNamespacedReplicationControllerDummyScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedReplicationControllerDummyScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedReplicationControllerDummyScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedReplicationControllerDummyScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.patchPodSecurityPolicy = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/podsecuritypolicies/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchPodSecurityPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchPodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedDaemonSet = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedDaemonSetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDaemonSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDaemonSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedDeployment = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedDeploymentScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedDeploymentStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedIngress = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedIngress.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedIngress.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedIngressStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedIngressStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedIngressStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedNetworkPolicy = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedNetworkPolicy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedReplicaSet = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedReplicaSetScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicaSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicaSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedReplicaSetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicaSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicaSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readNamespacedReplicationControllerDummyScale = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedReplicationControllerDummyScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedReplicationControllerDummyScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.readPodSecurityPolicy = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/podsecuritypolicies/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readPodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedDaemonSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDaemonSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDaemonSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDaemonSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedDaemonSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDaemonSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDaemonSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDaemonSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedDeployment = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeployment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedDeploymentScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeploymentScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedDeploymentStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedDeploymentStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedIngress = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedIngress.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedIngress.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedIngress.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedIngressStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedIngressStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedIngressStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedIngressStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedNetworkPolicy = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedNetworkPolicy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedNetworkPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedReplicaSet = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicaSet.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicaSet.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicaSet.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedReplicaSetScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicaSetScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicaSetScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicaSetScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedReplicaSetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicaSetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicaSetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicaSetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replaceNamespacedReplicationControllerDummyScale = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedReplicationControllerDummyScale.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedReplicationControllerDummyScale.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedReplicationControllerDummyScale.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Extensions_v1beta1Api.prototype.replacePodSecurityPolicy = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/extensions/v1beta1/podsecuritypolicies/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replacePodSecurityPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replacePodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Extensions_v1beta1Api;
}());
exports.Extensions_v1beta1Api = Extensions_v1beta1Api;
var LogsApiApiKeys;
(function (LogsApiApiKeys) {
    LogsApiApiKeys[LogsApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(LogsApiApiKeys = exports.LogsApiApiKeys || (exports.LogsApiApiKeys = {}));
var LogsApi = (function () {
    function LogsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(LogsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    LogsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    LogsApi.prototype.setApiKey = function (key, value) {
        this.authentications[LogsApiApiKeys[key]].apiKey = value;
    };
    LogsApi.prototype.logFileHandler = function (logpath) {
        var localVarPath = this.basePath + '/logs/{logpath}'
            .replace('{' + 'logpath' + '}', String(logpath));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (logpath === null || logpath === undefined) {
            throw new Error('Required parameter logpath was null or undefined when calling logFileHandler.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    LogsApi.prototype.logFileListHandler = function () {
        var localVarPath = this.basePath + '/logs/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return LogsApi;
}());
exports.LogsApi = LogsApi;
var NetworkingApiApiKeys;
(function (NetworkingApiApiKeys) {
    NetworkingApiApiKeys[NetworkingApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(NetworkingApiApiKeys = exports.NetworkingApiApiKeys || (exports.NetworkingApiApiKeys = {}));
var NetworkingApi = (function () {
    function NetworkingApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(NetworkingApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NetworkingApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    NetworkingApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    NetworkingApi.prototype.setApiKey = function (key, value) {
        this.authentications[NetworkingApiApiKeys[key]].apiKey = value;
    };
    NetworkingApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return NetworkingApi;
}());
exports.NetworkingApi = NetworkingApi;
var Networking_v1ApiApiKeys;
(function (Networking_v1ApiApiKeys) {
    Networking_v1ApiApiKeys[Networking_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Networking_v1ApiApiKeys = exports.Networking_v1ApiApiKeys || (exports.Networking_v1ApiApiKeys = {}));
var Networking_v1Api = (function () {
    function Networking_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Networking_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Networking_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Networking_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Networking_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Networking_v1ApiApiKeys[key]].apiKey = value;
    };
    Networking_v1Api.prototype.createNamespacedNetworkPolicy = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedNetworkPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Networking_v1Api.prototype.deleteCollectionNamespacedNetworkPolicy = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Networking_v1Api.prototype.deleteNamespacedNetworkPolicy = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedNetworkPolicy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedNetworkPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Networking_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Networking_v1Api.prototype.listNamespacedNetworkPolicy = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Networking_v1Api.prototype.listNetworkPolicyForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/v1/networkpolicies';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Networking_v1Api.prototype.patchNamespacedNetworkPolicy = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedNetworkPolicy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedNetworkPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Networking_v1Api.prototype.readNamespacedNetworkPolicy = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedNetworkPolicy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Networking_v1Api.prototype.replaceNamespacedNetworkPolicy = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedNetworkPolicy.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedNetworkPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedNetworkPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Networking_v1Api;
}());
exports.Networking_v1Api = Networking_v1Api;
var PolicyApiApiKeys;
(function (PolicyApiApiKeys) {
    PolicyApiApiKeys[PolicyApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(PolicyApiApiKeys = exports.PolicyApiApiKeys || (exports.PolicyApiApiKeys = {}));
var PolicyApi = (function () {
    function PolicyApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(PolicyApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PolicyApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    PolicyApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    PolicyApi.prototype.setApiKey = function (key, value) {
        this.authentications[PolicyApiApiKeys[key]].apiKey = value;
    };
    PolicyApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/policy/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return PolicyApi;
}());
exports.PolicyApi = PolicyApi;
var Policy_v1beta1ApiApiKeys;
(function (Policy_v1beta1ApiApiKeys) {
    Policy_v1beta1ApiApiKeys[Policy_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Policy_v1beta1ApiApiKeys = exports.Policy_v1beta1ApiApiKeys || (exports.Policy_v1beta1ApiApiKeys = {}));
var Policy_v1beta1Api = (function () {
    function Policy_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Policy_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Policy_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Policy_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Policy_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Policy_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Policy_v1beta1Api.prototype.createNamespacedPodDisruptionBudget = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedPodDisruptionBudget.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedPodDisruptionBudget.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.createPodSecurityPolicy = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/podsecuritypolicies';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.deleteCollectionNamespacedPodDisruptionBudget = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedPodDisruptionBudget.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.deleteCollectionPodSecurityPolicy = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/podsecuritypolicies';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.deleteNamespacedPodDisruptionBudget = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedPodDisruptionBudget.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedPodDisruptionBudget.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedPodDisruptionBudget.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.deletePodSecurityPolicy = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/podsecuritypolicies/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deletePodSecurityPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deletePodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.listNamespacedPodDisruptionBudget = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedPodDisruptionBudget.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.listPodDisruptionBudgetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/poddisruptionbudgets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.listPodSecurityPolicy = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/podsecuritypolicies';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.patchNamespacedPodDisruptionBudget = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedPodDisruptionBudget.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedPodDisruptionBudget.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedPodDisruptionBudget.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.patchNamespacedPodDisruptionBudgetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedPodDisruptionBudgetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.patchPodSecurityPolicy = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/podsecuritypolicies/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchPodSecurityPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchPodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.readNamespacedPodDisruptionBudget = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedPodDisruptionBudget.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedPodDisruptionBudget.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.readNamespacedPodDisruptionBudgetStatus = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedPodDisruptionBudgetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedPodDisruptionBudgetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.readPodSecurityPolicy = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/podsecuritypolicies/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readPodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.replaceNamespacedPodDisruptionBudget = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedPodDisruptionBudget.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedPodDisruptionBudget.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedPodDisruptionBudget.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.replaceNamespacedPodDisruptionBudgetStatus = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedPodDisruptionBudgetStatus.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Policy_v1beta1Api.prototype.replacePodSecurityPolicy = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/policy/v1beta1/podsecuritypolicies/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replacePodSecurityPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replacePodSecurityPolicy.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Policy_v1beta1Api;
}());
exports.Policy_v1beta1Api = Policy_v1beta1Api;
var RbacAuthorizationApiApiKeys;
(function (RbacAuthorizationApiApiKeys) {
    RbacAuthorizationApiApiKeys[RbacAuthorizationApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(RbacAuthorizationApiApiKeys = exports.RbacAuthorizationApiApiKeys || (exports.RbacAuthorizationApiApiKeys = {}));
var RbacAuthorizationApi = (function () {
    function RbacAuthorizationApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(RbacAuthorizationApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RbacAuthorizationApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    RbacAuthorizationApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    RbacAuthorizationApi.prototype.setApiKey = function (key, value) {
        this.authentications[RbacAuthorizationApiApiKeys[key]].apiKey = value;
    };
    RbacAuthorizationApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return RbacAuthorizationApi;
}());
exports.RbacAuthorizationApi = RbacAuthorizationApi;
var RbacAuthorization_v1ApiApiKeys;
(function (RbacAuthorization_v1ApiApiKeys) {
    RbacAuthorization_v1ApiApiKeys[RbacAuthorization_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(RbacAuthorization_v1ApiApiKeys = exports.RbacAuthorization_v1ApiApiKeys || (exports.RbacAuthorization_v1ApiApiKeys = {}));
var RbacAuthorization_v1Api = (function () {
    function RbacAuthorization_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(RbacAuthorization_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RbacAuthorization_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    RbacAuthorization_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    RbacAuthorization_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[RbacAuthorization_v1ApiApiKeys[key]].apiKey = value;
    };
    RbacAuthorization_v1Api.prototype.createClusterRole = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterroles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.createClusterRoleBinding = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.createNamespacedRole = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.createNamespacedRoleBinding = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.deleteClusterRole = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.deleteClusterRoleBinding = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.deleteCollectionClusterRole = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterroles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.deleteCollectionClusterRoleBinding = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.deleteCollectionNamespacedRole = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.deleteCollectionNamespacedRoleBinding = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.deleteNamespacedRole = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.deleteNamespacedRoleBinding = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.listClusterRole = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterroles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.listClusterRoleBinding = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.listNamespacedRole = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.listNamespacedRoleBinding = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.listRoleBindingForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/rolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.listRoleForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/roles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.patchClusterRole = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.patchClusterRoleBinding = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.patchNamespacedRole = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.patchNamespacedRoleBinding = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.readClusterRole = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.readClusterRoleBinding = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.readNamespacedRole = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.readNamespacedRoleBinding = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.replaceClusterRole = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.replaceClusterRoleBinding = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.replaceNamespacedRole = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1Api.prototype.replaceNamespacedRoleBinding = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return RbacAuthorization_v1Api;
}());
exports.RbacAuthorization_v1Api = RbacAuthorization_v1Api;
var RbacAuthorization_v1alpha1ApiApiKeys;
(function (RbacAuthorization_v1alpha1ApiApiKeys) {
    RbacAuthorization_v1alpha1ApiApiKeys[RbacAuthorization_v1alpha1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(RbacAuthorization_v1alpha1ApiApiKeys = exports.RbacAuthorization_v1alpha1ApiApiKeys || (exports.RbacAuthorization_v1alpha1ApiApiKeys = {}));
var RbacAuthorization_v1alpha1Api = (function () {
    function RbacAuthorization_v1alpha1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(RbacAuthorization_v1alpha1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RbacAuthorization_v1alpha1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    RbacAuthorization_v1alpha1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    RbacAuthorization_v1alpha1Api.prototype.setApiKey = function (key, value) {
        this.authentications[RbacAuthorization_v1alpha1ApiApiKeys[key]].apiKey = value;
    };
    RbacAuthorization_v1alpha1Api.prototype.createClusterRole = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.createClusterRoleBinding = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.createNamespacedRole = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.createNamespacedRoleBinding = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.deleteClusterRole = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.deleteClusterRoleBinding = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.deleteCollectionClusterRole = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.deleteCollectionClusterRoleBinding = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.deleteCollectionNamespacedRole = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.deleteCollectionNamespacedRoleBinding = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.deleteNamespacedRole = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.deleteNamespacedRoleBinding = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.listClusterRole = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.listClusterRoleBinding = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.listNamespacedRole = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.listNamespacedRoleBinding = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.listRoleBindingForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.listRoleForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/roles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.patchClusterRole = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.patchClusterRoleBinding = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.patchNamespacedRole = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.patchNamespacedRoleBinding = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.readClusterRole = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.readClusterRoleBinding = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.readNamespacedRole = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.readNamespacedRoleBinding = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.replaceClusterRole = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.replaceClusterRoleBinding = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.replaceNamespacedRole = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1alpha1Api.prototype.replaceNamespacedRoleBinding = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return RbacAuthorization_v1alpha1Api;
}());
exports.RbacAuthorization_v1alpha1Api = RbacAuthorization_v1alpha1Api;
var RbacAuthorization_v1beta1ApiApiKeys;
(function (RbacAuthorization_v1beta1ApiApiKeys) {
    RbacAuthorization_v1beta1ApiApiKeys[RbacAuthorization_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(RbacAuthorization_v1beta1ApiApiKeys = exports.RbacAuthorization_v1beta1ApiApiKeys || (exports.RbacAuthorization_v1beta1ApiApiKeys = {}));
var RbacAuthorization_v1beta1Api = (function () {
    function RbacAuthorization_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(RbacAuthorization_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RbacAuthorization_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    RbacAuthorization_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    RbacAuthorization_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[RbacAuthorization_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    RbacAuthorization_v1beta1Api.prototype.createClusterRole = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.createClusterRoleBinding = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.createNamespacedRole = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.createNamespacedRoleBinding = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.deleteClusterRole = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.deleteClusterRoleBinding = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.deleteCollectionClusterRole = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.deleteCollectionClusterRoleBinding = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.deleteCollectionNamespacedRole = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.deleteCollectionNamespacedRoleBinding = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.deleteNamespacedRole = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.deleteNamespacedRoleBinding = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.listClusterRole = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.listClusterRoleBinding = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.listNamespacedRole = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.listNamespacedRoleBinding = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.listRoleBindingForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/rolebindings';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.listRoleForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/roles';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.patchClusterRole = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.patchClusterRoleBinding = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.patchNamespacedRole = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.patchNamespacedRoleBinding = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.readClusterRole = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.readClusterRoleBinding = function (name, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.readNamespacedRole = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.readNamespacedRoleBinding = function (name, namespace, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.replaceClusterRole = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceClusterRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.replaceClusterRoleBinding = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceClusterRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.replaceNamespacedRole = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedRole.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedRole.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedRole.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    RbacAuthorization_v1beta1Api.prototype.replaceNamespacedRoleBinding = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedRoleBinding.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedRoleBinding.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedRoleBinding.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return RbacAuthorization_v1beta1Api;
}());
exports.RbacAuthorization_v1beta1Api = RbacAuthorization_v1beta1Api;
var SchedulingApiApiKeys;
(function (SchedulingApiApiKeys) {
    SchedulingApiApiKeys[SchedulingApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(SchedulingApiApiKeys = exports.SchedulingApiApiKeys || (exports.SchedulingApiApiKeys = {}));
var SchedulingApi = (function () {
    function SchedulingApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SchedulingApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SchedulingApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    SchedulingApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SchedulingApi.prototype.setApiKey = function (key, value) {
        this.authentications[SchedulingApiApiKeys[key]].apiKey = value;
    };
    SchedulingApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SchedulingApi;
}());
exports.SchedulingApi = SchedulingApi;
var Scheduling_v1alpha1ApiApiKeys;
(function (Scheduling_v1alpha1ApiApiKeys) {
    Scheduling_v1alpha1ApiApiKeys[Scheduling_v1alpha1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Scheduling_v1alpha1ApiApiKeys = exports.Scheduling_v1alpha1ApiApiKeys || (exports.Scheduling_v1alpha1ApiApiKeys = {}));
var Scheduling_v1alpha1Api = (function () {
    function Scheduling_v1alpha1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Scheduling_v1alpha1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scheduling_v1alpha1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Scheduling_v1alpha1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Scheduling_v1alpha1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Scheduling_v1alpha1ApiApiKeys[key]].apiKey = value;
    };
    Scheduling_v1alpha1Api.prototype.createPriorityClass = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1alpha1/priorityclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1alpha1Api.prototype.deleteCollectionPriorityClass = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1alpha1/priorityclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1alpha1Api.prototype.deletePriorityClass = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deletePriorityClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deletePriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1alpha1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1alpha1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1alpha1Api.prototype.listPriorityClass = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1alpha1/priorityclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1alpha1Api.prototype.patchPriorityClass = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchPriorityClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchPriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1alpha1Api.prototype.readPriorityClass = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readPriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1alpha1Api.prototype.replacePriorityClass = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replacePriorityClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replacePriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Scheduling_v1alpha1Api;
}());
exports.Scheduling_v1alpha1Api = Scheduling_v1alpha1Api;
var Scheduling_v1beta1ApiApiKeys;
(function (Scheduling_v1beta1ApiApiKeys) {
    Scheduling_v1beta1ApiApiKeys[Scheduling_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Scheduling_v1beta1ApiApiKeys = exports.Scheduling_v1beta1ApiApiKeys || (exports.Scheduling_v1beta1ApiApiKeys = {}));
var Scheduling_v1beta1Api = (function () {
    function Scheduling_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Scheduling_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scheduling_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Scheduling_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Scheduling_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Scheduling_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Scheduling_v1beta1Api.prototype.createPriorityClass = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1beta1/priorityclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1beta1Api.prototype.deleteCollectionPriorityClass = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1beta1/priorityclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1beta1Api.prototype.deletePriorityClass = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deletePriorityClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deletePriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1beta1Api.prototype.listPriorityClass = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1beta1/priorityclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1beta1Api.prototype.patchPriorityClass = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchPriorityClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchPriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1beta1Api.prototype.readPriorityClass = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readPriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Scheduling_v1beta1Api.prototype.replacePriorityClass = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replacePriorityClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replacePriorityClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Scheduling_v1beta1Api;
}());
exports.Scheduling_v1beta1Api = Scheduling_v1beta1Api;
var SettingsApiApiKeys;
(function (SettingsApiApiKeys) {
    SettingsApiApiKeys[SettingsApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(SettingsApiApiKeys = exports.SettingsApiApiKeys || (exports.SettingsApiApiKeys = {}));
var SettingsApi = (function () {
    function SettingsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SettingsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    SettingsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SettingsApi.prototype.setApiKey = function (key, value) {
        this.authentications[SettingsApiApiKeys[key]].apiKey = value;
    };
    SettingsApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SettingsApi;
}());
exports.SettingsApi = SettingsApi;
var Settings_v1alpha1ApiApiKeys;
(function (Settings_v1alpha1ApiApiKeys) {
    Settings_v1alpha1ApiApiKeys[Settings_v1alpha1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Settings_v1alpha1ApiApiKeys = exports.Settings_v1alpha1ApiApiKeys || (exports.Settings_v1alpha1ApiApiKeys = {}));
var Settings_v1alpha1Api = (function () {
    function Settings_v1alpha1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Settings_v1alpha1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Settings_v1alpha1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Settings_v1alpha1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Settings_v1alpha1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Settings_v1alpha1ApiApiKeys[key]].apiKey = value;
    };
    Settings_v1alpha1Api.prototype.createNamespacedPodPreset = function (namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createNamespacedPodPreset.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createNamespacedPodPreset.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Settings_v1alpha1Api.prototype.deleteCollectionNamespacedPodPreset = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteCollectionNamespacedPodPreset.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Settings_v1alpha1Api.prototype.deleteNamespacedPodPreset = function (name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteNamespacedPodPreset.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteNamespacedPodPreset.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteNamespacedPodPreset.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Settings_v1alpha1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/v1alpha1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Settings_v1alpha1Api.prototype.listNamespacedPodPreset = function (namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets'
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listNamespacedPodPreset.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Settings_v1alpha1Api.prototype.listPodPresetForAllNamespaces = function (_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/v1alpha1/podpresets';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Settings_v1alpha1Api.prototype.patchNamespacedPodPreset = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchNamespacedPodPreset.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchNamespacedPodPreset.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchNamespacedPodPreset.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Settings_v1alpha1Api.prototype.readNamespacedPodPreset = function (name, namespace, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readNamespacedPodPreset.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readNamespacedPodPreset.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Settings_v1alpha1Api.prototype.replaceNamespacedPodPreset = function (name, namespace, body, pretty) {
        var localVarPath = this.basePath + '/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}'
            .replace('{' + 'name' + '}', String(name))
            .replace('{' + 'namespace' + '}', String(namespace));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceNamespacedPodPreset.');
        }
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceNamespacedPodPreset.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceNamespacedPodPreset.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Settings_v1alpha1Api;
}());
exports.Settings_v1alpha1Api = Settings_v1alpha1Api;
var StorageApiApiKeys;
(function (StorageApiApiKeys) {
    StorageApiApiKeys[StorageApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(StorageApiApiKeys = exports.StorageApiApiKeys || (exports.StorageApiApiKeys = {}));
var StorageApi = (function () {
    function StorageApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(StorageApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StorageApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    StorageApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    StorageApi.prototype.setApiKey = function (key, value) {
        this.authentications[StorageApiApiKeys[key]].apiKey = value;
    };
    StorageApi.prototype.getAPIGroup = function () {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return StorageApi;
}());
exports.StorageApi = StorageApi;
var Storage_v1ApiApiKeys;
(function (Storage_v1ApiApiKeys) {
    Storage_v1ApiApiKeys[Storage_v1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Storage_v1ApiApiKeys = exports.Storage_v1ApiApiKeys || (exports.Storage_v1ApiApiKeys = {}));
var Storage_v1Api = (function () {
    function Storage_v1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Storage_v1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Storage_v1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Storage_v1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Storage_v1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Storage_v1ApiApiKeys[key]].apiKey = value;
    };
    Storage_v1Api.prototype.createStorageClass = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1/storageclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1Api.prototype.deleteCollectionStorageClass = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1/storageclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1Api.prototype.deleteStorageClass = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1/storageclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteStorageClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1Api.prototype.listStorageClass = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1/storageclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1Api.prototype.patchStorageClass = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1/storageclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchStorageClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1Api.prototype.readStorageClass = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1/storageclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1Api.prototype.replaceStorageClass = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1/storageclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceStorageClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Storage_v1Api;
}());
exports.Storage_v1Api = Storage_v1Api;
var Storage_v1alpha1ApiApiKeys;
(function (Storage_v1alpha1ApiApiKeys) {
    Storage_v1alpha1ApiApiKeys[Storage_v1alpha1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Storage_v1alpha1ApiApiKeys = exports.Storage_v1alpha1ApiApiKeys || (exports.Storage_v1alpha1ApiApiKeys = {}));
var Storage_v1alpha1Api = (function () {
    function Storage_v1alpha1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Storage_v1alpha1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Storage_v1alpha1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Storage_v1alpha1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Storage_v1alpha1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Storage_v1alpha1ApiApiKeys[key]].apiKey = value;
    };
    Storage_v1alpha1Api.prototype.createVolumeAttachment = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1alpha1/volumeattachments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1alpha1Api.prototype.deleteCollectionVolumeAttachment = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1alpha1/volumeattachments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1alpha1Api.prototype.deleteVolumeAttachment = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteVolumeAttachment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1alpha1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1alpha1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1alpha1Api.prototype.listVolumeAttachment = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1alpha1/volumeattachments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1alpha1Api.prototype.patchVolumeAttachment = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchVolumeAttachment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1alpha1Api.prototype.readVolumeAttachment = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1alpha1Api.prototype.replaceVolumeAttachment = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceVolumeAttachment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Storage_v1alpha1Api;
}());
exports.Storage_v1alpha1Api = Storage_v1alpha1Api;
var Storage_v1beta1ApiApiKeys;
(function (Storage_v1beta1ApiApiKeys) {
    Storage_v1beta1ApiApiKeys[Storage_v1beta1ApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(Storage_v1beta1ApiApiKeys = exports.Storage_v1beta1ApiApiKeys || (exports.Storage_v1beta1ApiApiKeys = {}));
var Storage_v1beta1Api = (function () {
    function Storage_v1beta1Api(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(Storage_v1beta1Api.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Storage_v1beta1Api.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    Storage_v1beta1Api.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    Storage_v1beta1Api.prototype.setApiKey = function (key, value) {
        this.authentications[Storage_v1beta1ApiApiKeys[key]].apiKey = value;
    };
    Storage_v1beta1Api.prototype.createStorageClass = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/storageclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.createVolumeAttachment = function (body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/volumeattachments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.deleteCollectionStorageClass = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/storageclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.deleteCollectionVolumeAttachment = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/volumeattachments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.deleteStorageClass = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/storageclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteStorageClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.deleteVolumeAttachment = function (name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/volumeattachments/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteVolumeAttachment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = gracePeriodSeconds;
        }
        if (orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = orphanDependents;
        }
        if (propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = propagationPolicy;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.getAPIResources = function () {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.listStorageClass = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/storageclasses';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.listVolumeAttachment = function (pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/volumeattachments';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (_continue !== undefined) {
            queryParameters['continue'] = _continue;
        }
        if (fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = fieldSelector;
        }
        if (includeUninitialized !== undefined) {
            queryParameters['includeUninitialized'] = includeUninitialized;
        }
        if (labelSelector !== undefined) {
            queryParameters['labelSelector'] = labelSelector;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        if (resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = resourceVersion;
        }
        if (timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = timeoutSeconds;
        }
        if (watch !== undefined) {
            queryParameters['watch'] = watch;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.patchStorageClass = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/storageclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchStorageClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.patchVolumeAttachment = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/volumeattachments/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchVolumeAttachment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PATCH',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.readStorageClass = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/storageclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.readVolumeAttachment = function (name, pretty, exact, _export) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/volumeattachments/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        if (exact !== undefined) {
            queryParameters['exact'] = exact;
        }
        if (_export !== undefined) {
            queryParameters['export'] = _export;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.replaceStorageClass = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/storageclasses/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceStorageClass.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceStorageClass.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    Storage_v1beta1Api.prototype.replaceVolumeAttachment = function (name, body, pretty) {
        var localVarPath = this.basePath + '/apis/storage.k8s.io/v1beta1/volumeattachments/{name}'
            .replace('{' + 'name' + '}', String(name));
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceVolumeAttachment.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceVolumeAttachment.');
        }
        if (pretty !== undefined) {
            queryParameters['pretty'] = pretty;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return Storage_v1beta1Api;
}());
exports.Storage_v1beta1Api = Storage_v1beta1Api;
var VersionApiApiKeys;
(function (VersionApiApiKeys) {
    VersionApiApiKeys[VersionApiApiKeys["BearerToken"] = 0] = "BearerToken";
})(VersionApiApiKeys = exports.VersionApiApiKeys || (exports.VersionApiApiKeys = {}));
var VersionApi = (function () {
    function VersionApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BearerToken': new ApiKeyAuth('header', 'authorization'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(VersionApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    VersionApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    VersionApi.prototype.setApiKey = function (key, value) {
        this.authentications[VersionApiApiKeys[key]].apiKey = value;
    };
    VersionApi.prototype.getCode = function () {
        var localVarPath = this.basePath + '/version/';
        var queryParameters = {};
        var headerParams = Object.assign({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BearerToken.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return VersionApi;
}());
exports.VersionApi = VersionApi;
//# sourceMappingURL=api.js.map