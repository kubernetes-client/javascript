/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import V2alpha1JobTemplateSpec from './V2alpha1JobTemplateSpec';





/**
* The V2alpha1CronJobSpec model module.
* @module io.kubernetes.client/io.kubernetes.client.models/V2alpha1CronJobSpec
* @version 0.3-SNAPSHOT
*/
export default class V2alpha1CronJobSpec {
    /**
    * Constructs a new <code>V2alpha1CronJobSpec</code>.
    * CronJobSpec describes how the job execution will look like and when it will actually run.
    * @alias module:io.kubernetes.client/io.kubernetes.client.models/V2alpha1CronJobSpec
    * @class
    * @param jobTemplate {module:io.kubernetes.client/io.kubernetes.client.models/V2alpha1JobTemplateSpec} Specifies the job that will be created when executing a CronJob.
    * @param schedule {String} The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
    */

    constructor(jobTemplate, schedule) {
        

        
        

        this['jobTemplate'] = jobTemplate;this['schedule'] = schedule;

        
    }

    /**
    * Constructs a <code>V2alpha1CronJobSpec</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:io.kubernetes.client/io.kubernetes.client.models/V2alpha1CronJobSpec} obj Optional instance to populate.
    * @return {module:io.kubernetes.client/io.kubernetes.client.models/V2alpha1CronJobSpec} The populated <code>V2alpha1CronJobSpec</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V2alpha1CronJobSpec();

            
            
            

            if (data.hasOwnProperty('concurrencyPolicy')) {
                obj['concurrencyPolicy'] = ApiClient.convertToType(data['concurrencyPolicy'], 'String');
            }
            if (data.hasOwnProperty('failedJobsHistoryLimit')) {
                obj['failedJobsHistoryLimit'] = ApiClient.convertToType(data['failedJobsHistoryLimit'], 'Number');
            }
            if (data.hasOwnProperty('jobTemplate')) {
                obj['jobTemplate'] = V2alpha1JobTemplateSpec.constructFromObject(data['jobTemplate']);
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('startingDeadlineSeconds')) {
                obj['startingDeadlineSeconds'] = ApiClient.convertToType(data['startingDeadlineSeconds'], 'Number');
            }
            if (data.hasOwnProperty('successfulJobsHistoryLimit')) {
                obj['successfulJobsHistoryLimit'] = ApiClient.convertToType(data['successfulJobsHistoryLimit'], 'Number');
            }
            if (data.hasOwnProperty('suspend')) {
                obj['suspend'] = ApiClient.convertToType(data['suspend'], 'Boolean');
            }
        }
        return obj;
    }

    /**
    * Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one
    * @member {String} concurrencyPolicy
    */
    concurrencyPolicy = undefined;
    /**
    * The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
    * @member {Number} failedJobsHistoryLimit
    */
    failedJobsHistoryLimit = undefined;
    /**
    * Specifies the job that will be created when executing a CronJob.
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V2alpha1JobTemplateSpec} jobTemplate
    */
    jobTemplate = undefined;
    /**
    * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
    * @member {String} schedule
    */
    schedule = undefined;
    /**
    * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
    * @member {Number} startingDeadlineSeconds
    */
    startingDeadlineSeconds = undefined;
    /**
    * The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
    * @member {Number} successfulJobsHistoryLimit
    */
    successfulJobsHistoryLimit = undefined;
    /**
    * This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
    * @member {Boolean} suspend
    */
    suspend = undefined;








}


