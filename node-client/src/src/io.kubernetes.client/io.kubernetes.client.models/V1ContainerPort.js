/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The V1ContainerPort model module.
* @module io.kubernetes.client/io.kubernetes.client.models/V1ContainerPort
* @version 0.3-SNAPSHOT
*/
export default class V1ContainerPort {
    /**
    * Constructs a new <code>V1ContainerPort</code>.
    * ContainerPort represents a network port in a single container.
    * @alias module:io.kubernetes.client/io.kubernetes.client.models/V1ContainerPort
    * @class
    * @param containerPort {Number} Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    */

    constructor(containerPort) {
        

        
        

        this['containerPort'] = containerPort;

        
    }

    /**
    * Constructs a <code>V1ContainerPort</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:io.kubernetes.client/io.kubernetes.client.models/V1ContainerPort} obj Optional instance to populate.
    * @return {module:io.kubernetes.client/io.kubernetes.client.models/V1ContainerPort} The populated <code>V1ContainerPort</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1ContainerPort();

            
            
            

            if (data.hasOwnProperty('containerPort')) {
                obj['containerPort'] = ApiClient.convertToType(data['containerPort'], 'Number');
            }
            if (data.hasOwnProperty('hostIP')) {
                obj['hostIP'] = ApiClient.convertToType(data['hostIP'], 'String');
            }
            if (data.hasOwnProperty('hostPort')) {
                obj['hostPort'] = ApiClient.convertToType(data['hostPort'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
        }
        return obj;
    }

    /**
    * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    * @member {Number} containerPort
    */
    containerPort = undefined;
    /**
    * What host IP to bind the external port to.
    * @member {String} hostIP
    */
    hostIP = undefined;
    /**
    * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    * @member {Number} hostPort
    */
    hostPort = undefined;
    /**
    * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    * @member {String} name
    */
    name = undefined;
    /**
    * Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".
    * @member {String} protocol
    */
    protocol = undefined;








}


