/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import AdmissionregistrationV1beta1ServiceReference from './AdmissionregistrationV1beta1ServiceReference';





/**
* The V1beta1WebhookClientConfig model module.
* @module io.kubernetes.client/io.kubernetes.client.models/V1beta1WebhookClientConfig
* @version 0.3-SNAPSHOT
*/
export default class V1beta1WebhookClientConfig {
    /**
    * Constructs a new <code>V1beta1WebhookClientConfig</code>.
    * WebhookClientConfig contains the information to make a TLS connection with the webhook
    * @alias module:io.kubernetes.client/io.kubernetes.client.models/V1beta1WebhookClientConfig
    * @class
    * @param caBundle {Blob} `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. Required.
    */

    constructor(caBundle) {
        

        
        

        this['caBundle'] = caBundle;

        
    }

    /**
    * Constructs a <code>V1beta1WebhookClientConfig</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:io.kubernetes.client/io.kubernetes.client.models/V1beta1WebhookClientConfig} obj Optional instance to populate.
    * @return {module:io.kubernetes.client/io.kubernetes.client.models/V1beta1WebhookClientConfig} The populated <code>V1beta1WebhookClientConfig</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1beta1WebhookClientConfig();

            
            
            

            if (data.hasOwnProperty('caBundle')) {
                obj['caBundle'] = ApiClient.convertToType(data['caBundle'], 'Blob');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = AdmissionregistrationV1beta1ServiceReference.constructFromObject(data['service']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
    * `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. Required.
    * @member {Blob} caBundle
    */
    caBundle = undefined;
    /**
    * `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.  If the webhook is running within the cluster, then you should use `service`.  If there is only one port open for the service, that port will be used. If there are multiple ports open, port 443 will be used if it is open, otherwise it is an error.
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/AdmissionregistrationV1beta1ServiceReference} service
    */
    service = undefined;
    /**
    * `url` gives the location of the webhook, in standard URL form (`[scheme://]host:port/path`). Exactly one of `url` or `service` must be specified.  The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.  Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.  The scheme must be \"https\"; the URL must begin with \"https://\".  A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.  Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.
    * @member {String} url
    */
    url = undefined;








}


