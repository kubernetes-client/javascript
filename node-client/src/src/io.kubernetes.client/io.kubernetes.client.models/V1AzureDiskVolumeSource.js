/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The V1AzureDiskVolumeSource model module.
* @module io.kubernetes.client/io.kubernetes.client.models/V1AzureDiskVolumeSource
* @version 0.3-SNAPSHOT
*/
export default class V1AzureDiskVolumeSource {
    /**
    * Constructs a new <code>V1AzureDiskVolumeSource</code>.
    * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    * @alias module:io.kubernetes.client/io.kubernetes.client.models/V1AzureDiskVolumeSource
    * @class
    * @param diskName {String} The Name of the data disk in the blob storage
    * @param diskURI {String} The URI the data disk in the blob storage
    */

    constructor(diskName, diskURI) {
        

        
        

        this['diskName'] = diskName;this['diskURI'] = diskURI;

        
    }

    /**
    * Constructs a <code>V1AzureDiskVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:io.kubernetes.client/io.kubernetes.client.models/V1AzureDiskVolumeSource} obj Optional instance to populate.
    * @return {module:io.kubernetes.client/io.kubernetes.client.models/V1AzureDiskVolumeSource} The populated <code>V1AzureDiskVolumeSource</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1AzureDiskVolumeSource();

            
            
            

            if (data.hasOwnProperty('cachingMode')) {
                obj['cachingMode'] = ApiClient.convertToType(data['cachingMode'], 'String');
            }
            if (data.hasOwnProperty('diskName')) {
                obj['diskName'] = ApiClient.convertToType(data['diskName'], 'String');
            }
            if (data.hasOwnProperty('diskURI')) {
                obj['diskURI'] = ApiClient.convertToType(data['diskURI'], 'String');
            }
            if (data.hasOwnProperty('fsType')) {
                obj['fsType'] = ApiClient.convertToType(data['fsType'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
        }
        return obj;
    }

    /**
    * Host Caching mode: None, Read Only, Read Write.
    * @member {String} cachingMode
    */
    cachingMode = undefined;
    /**
    * The Name of the data disk in the blob storage
    * @member {String} diskName
    */
    diskName = undefined;
    /**
    * The URI the data disk in the blob storage
    * @member {String} diskURI
    */
    diskURI = undefined;
    /**
    * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    * @member {String} fsType
    */
    fsType = undefined;
    /**
    * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    * @member {String} kind
    */
    kind = undefined;
    /**
    * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    * @member {Boolean} readOnly
    */
    readOnly = undefined;








}


