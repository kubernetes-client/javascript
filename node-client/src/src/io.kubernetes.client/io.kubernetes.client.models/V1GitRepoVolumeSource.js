/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The V1GitRepoVolumeSource model module.
* @module io.kubernetes.client/io.kubernetes.client.models/V1GitRepoVolumeSource
* @version 0.3-SNAPSHOT
*/
export default class V1GitRepoVolumeSource {
    /**
    * Constructs a new <code>V1GitRepoVolumeSource</code>.
    * Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
    * @alias module:io.kubernetes.client/io.kubernetes.client.models/V1GitRepoVolumeSource
    * @class
    * @param repository {String} Repository URL
    */

    constructor(repository) {
        

        
        

        this['repository'] = repository;

        
    }

    /**
    * Constructs a <code>V1GitRepoVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:io.kubernetes.client/io.kubernetes.client.models/V1GitRepoVolumeSource} obj Optional instance to populate.
    * @return {module:io.kubernetes.client/io.kubernetes.client.models/V1GitRepoVolumeSource} The populated <code>V1GitRepoVolumeSource</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1GitRepoVolumeSource();

            
            
            

            if (data.hasOwnProperty('directory')) {
                obj['directory'] = ApiClient.convertToType(data['directory'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
            }
        }
        return obj;
    }

    /**
    * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
    * @member {String} directory
    */
    directory = undefined;
    /**
    * Repository URL
    * @member {String} repository
    */
    repository = undefined;
    /**
    * Commit hash for the specified revision.
    * @member {String} revision
    */
    revision = undefined;








}


