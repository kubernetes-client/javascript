/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import V1AWSElasticBlockStoreVolumeSource from './V1AWSElasticBlockStoreVolumeSource';
import V1AzureDiskVolumeSource from './V1AzureDiskVolumeSource';
import V1AzureFileVolumeSource from './V1AzureFileVolumeSource';
import V1CephFSVolumeSource from './V1CephFSVolumeSource';
import V1CinderVolumeSource from './V1CinderVolumeSource';
import V1ConfigMapVolumeSource from './V1ConfigMapVolumeSource';
import V1DownwardAPIVolumeSource from './V1DownwardAPIVolumeSource';
import V1EmptyDirVolumeSource from './V1EmptyDirVolumeSource';
import V1FCVolumeSource from './V1FCVolumeSource';
import V1FlexVolumeSource from './V1FlexVolumeSource';
import V1FlockerVolumeSource from './V1FlockerVolumeSource';
import V1GCEPersistentDiskVolumeSource from './V1GCEPersistentDiskVolumeSource';
import V1GitRepoVolumeSource from './V1GitRepoVolumeSource';
import V1GlusterfsVolumeSource from './V1GlusterfsVolumeSource';
import V1HostPathVolumeSource from './V1HostPathVolumeSource';
import V1ISCSIVolumeSource from './V1ISCSIVolumeSource';
import V1NFSVolumeSource from './V1NFSVolumeSource';
import V1PersistentVolumeClaimVolumeSource from './V1PersistentVolumeClaimVolumeSource';
import V1PhotonPersistentDiskVolumeSource from './V1PhotonPersistentDiskVolumeSource';
import V1PortworxVolumeSource from './V1PortworxVolumeSource';
import V1ProjectedVolumeSource from './V1ProjectedVolumeSource';
import V1QuobyteVolumeSource from './V1QuobyteVolumeSource';
import V1RBDVolumeSource from './V1RBDVolumeSource';
import V1ScaleIOVolumeSource from './V1ScaleIOVolumeSource';
import V1SecretVolumeSource from './V1SecretVolumeSource';
import V1StorageOSVolumeSource from './V1StorageOSVolumeSource';
import V1VsphereVirtualDiskVolumeSource from './V1VsphereVirtualDiskVolumeSource';





/**
* The V1Volume model module.
* @module io.kubernetes.client/io.kubernetes.client.models/V1Volume
* @version 0.3-SNAPSHOT
*/
export default class V1Volume {
    /**
    * Constructs a new <code>V1Volume</code>.
    * Volume represents a named volume in a pod that may be accessed by any container in the pod.
    * @alias module:io.kubernetes.client/io.kubernetes.client.models/V1Volume
    * @class
    * @param name {String} Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */

    constructor(name) {
        

        
        

        this['name'] = name;

        
    }

    /**
    * Constructs a <code>V1Volume</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:io.kubernetes.client/io.kubernetes.client.models/V1Volume} obj Optional instance to populate.
    * @return {module:io.kubernetes.client/io.kubernetes.client.models/V1Volume} The populated <code>V1Volume</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1Volume();

            
            
            

            if (data.hasOwnProperty('awsElasticBlockStore')) {
                obj['awsElasticBlockStore'] = V1AWSElasticBlockStoreVolumeSource.constructFromObject(data['awsElasticBlockStore']);
            }
            if (data.hasOwnProperty('azureDisk')) {
                obj['azureDisk'] = V1AzureDiskVolumeSource.constructFromObject(data['azureDisk']);
            }
            if (data.hasOwnProperty('azureFile')) {
                obj['azureFile'] = V1AzureFileVolumeSource.constructFromObject(data['azureFile']);
            }
            if (data.hasOwnProperty('cephfs')) {
                obj['cephfs'] = V1CephFSVolumeSource.constructFromObject(data['cephfs']);
            }
            if (data.hasOwnProperty('cinder')) {
                obj['cinder'] = V1CinderVolumeSource.constructFromObject(data['cinder']);
            }
            if (data.hasOwnProperty('configMap')) {
                obj['configMap'] = V1ConfigMapVolumeSource.constructFromObject(data['configMap']);
            }
            if (data.hasOwnProperty('downwardAPI')) {
                obj['downwardAPI'] = V1DownwardAPIVolumeSource.constructFromObject(data['downwardAPI']);
            }
            if (data.hasOwnProperty('emptyDir')) {
                obj['emptyDir'] = V1EmptyDirVolumeSource.constructFromObject(data['emptyDir']);
            }
            if (data.hasOwnProperty('fc')) {
                obj['fc'] = V1FCVolumeSource.constructFromObject(data['fc']);
            }
            if (data.hasOwnProperty('flexVolume')) {
                obj['flexVolume'] = V1FlexVolumeSource.constructFromObject(data['flexVolume']);
            }
            if (data.hasOwnProperty('flocker')) {
                obj['flocker'] = V1FlockerVolumeSource.constructFromObject(data['flocker']);
            }
            if (data.hasOwnProperty('gcePersistentDisk')) {
                obj['gcePersistentDisk'] = V1GCEPersistentDiskVolumeSource.constructFromObject(data['gcePersistentDisk']);
            }
            if (data.hasOwnProperty('gitRepo')) {
                obj['gitRepo'] = V1GitRepoVolumeSource.constructFromObject(data['gitRepo']);
            }
            if (data.hasOwnProperty('glusterfs')) {
                obj['glusterfs'] = V1GlusterfsVolumeSource.constructFromObject(data['glusterfs']);
            }
            if (data.hasOwnProperty('hostPath')) {
                obj['hostPath'] = V1HostPathVolumeSource.constructFromObject(data['hostPath']);
            }
            if (data.hasOwnProperty('iscsi')) {
                obj['iscsi'] = V1ISCSIVolumeSource.constructFromObject(data['iscsi']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nfs')) {
                obj['nfs'] = V1NFSVolumeSource.constructFromObject(data['nfs']);
            }
            if (data.hasOwnProperty('persistentVolumeClaim')) {
                obj['persistentVolumeClaim'] = V1PersistentVolumeClaimVolumeSource.constructFromObject(data['persistentVolumeClaim']);
            }
            if (data.hasOwnProperty('photonPersistentDisk')) {
                obj['photonPersistentDisk'] = V1PhotonPersistentDiskVolumeSource.constructFromObject(data['photonPersistentDisk']);
            }
            if (data.hasOwnProperty('portworxVolume')) {
                obj['portworxVolume'] = V1PortworxVolumeSource.constructFromObject(data['portworxVolume']);
            }
            if (data.hasOwnProperty('projected')) {
                obj['projected'] = V1ProjectedVolumeSource.constructFromObject(data['projected']);
            }
            if (data.hasOwnProperty('quobyte')) {
                obj['quobyte'] = V1QuobyteVolumeSource.constructFromObject(data['quobyte']);
            }
            if (data.hasOwnProperty('rbd')) {
                obj['rbd'] = V1RBDVolumeSource.constructFromObject(data['rbd']);
            }
            if (data.hasOwnProperty('scaleIO')) {
                obj['scaleIO'] = V1ScaleIOVolumeSource.constructFromObject(data['scaleIO']);
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = V1SecretVolumeSource.constructFromObject(data['secret']);
            }
            if (data.hasOwnProperty('storageos')) {
                obj['storageos'] = V1StorageOSVolumeSource.constructFromObject(data['storageos']);
            }
            if (data.hasOwnProperty('vsphereVolume')) {
                obj['vsphereVolume'] = V1VsphereVirtualDiskVolumeSource.constructFromObject(data['vsphereVolume']);
            }
        }
        return obj;
    }

    /**
    * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1AWSElasticBlockStoreVolumeSource} awsElasticBlockStore
    */
    awsElasticBlockStore = undefined;
    /**
    * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1AzureDiskVolumeSource} azureDisk
    */
    azureDisk = undefined;
    /**
    * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1AzureFileVolumeSource} azureFile
    */
    azureFile = undefined;
    /**
    * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1CephFSVolumeSource} cephfs
    */
    cephfs = undefined;
    /**
    * Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1CinderVolumeSource} cinder
    */
    cinder = undefined;
    /**
    * ConfigMap represents a configMap that should populate this volume
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1ConfigMapVolumeSource} configMap
    */
    configMap = undefined;
    /**
    * DownwardAPI represents downward API about the pod that should populate this volume
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1DownwardAPIVolumeSource} downwardAPI
    */
    downwardAPI = undefined;
    /**
    * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1EmptyDirVolumeSource} emptyDir
    */
    emptyDir = undefined;
    /**
    * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1FCVolumeSource} fc
    */
    fc = undefined;
    /**
    * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1FlexVolumeSource} flexVolume
    */
    flexVolume = undefined;
    /**
    * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1FlockerVolumeSource} flocker
    */
    flocker = undefined;
    /**
    * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1GCEPersistentDiskVolumeSource} gcePersistentDisk
    */
    gcePersistentDisk = undefined;
    /**
    * GitRepo represents a git repository at a particular revision.
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1GitRepoVolumeSource} gitRepo
    */
    gitRepo = undefined;
    /**
    * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1GlusterfsVolumeSource} glusterfs
    */
    glusterfs = undefined;
    /**
    * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1HostPathVolumeSource} hostPath
    */
    hostPath = undefined;
    /**
    * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1ISCSIVolumeSource} iscsi
    */
    iscsi = undefined;
    /**
    * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    * @member {String} name
    */
    name = undefined;
    /**
    * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1NFSVolumeSource} nfs
    */
    nfs = undefined;
    /**
    * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1PersistentVolumeClaimVolumeSource} persistentVolumeClaim
    */
    persistentVolumeClaim = undefined;
    /**
    * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1PhotonPersistentDiskVolumeSource} photonPersistentDisk
    */
    photonPersistentDisk = undefined;
    /**
    * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1PortworxVolumeSource} portworxVolume
    */
    portworxVolume = undefined;
    /**
    * Items for all in one resources secrets, configmaps, and downward API
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1ProjectedVolumeSource} projected
    */
    projected = undefined;
    /**
    * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1QuobyteVolumeSource} quobyte
    */
    quobyte = undefined;
    /**
    * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1RBDVolumeSource} rbd
    */
    rbd = undefined;
    /**
    * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1ScaleIOVolumeSource} scaleIO
    */
    scaleIO = undefined;
    /**
    * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1SecretVolumeSource} secret
    */
    secret = undefined;
    /**
    * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1StorageOSVolumeSource} storageos
    */
    storageos = undefined;
    /**
    * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    * @member {module:io.kubernetes.client/io.kubernetes.client.models/V1VsphereVirtualDiskVolumeSource} vsphereVolume
    */
    vsphereVolume = undefined;








}


