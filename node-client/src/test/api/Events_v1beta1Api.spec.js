/**
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesJsClient);
  }
}(this, function(expect, KubernetesJsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesJsClient.Events_v1beta1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Events_v1beta1Api', function() {
    describe('createNamespacedEvent', function() {
      it('should call createNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test createNamespacedEvent
        //instance.createNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedEvent', function() {
      it('should call deleteCollectionNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedEvent
        //instance.deleteCollectionNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedEvent', function() {
      it('should call deleteNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedEvent
        //instance.deleteNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAPIResources', function() {
      it('should call getAPIResources successfully', function(done) {
        //uncomment below and update the code to test getAPIResources
        //instance.getAPIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventForAllNamespaces', function() {
      it('should call listEventForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listEventForAllNamespaces
        //instance.listEventForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedEvent', function() {
      it('should call listNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test listNamespacedEvent
        //instance.listNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedEvent', function() {
      it('should call patchNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedEvent
        //instance.patchNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedEvent', function() {
      it('should call readNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test readNamespacedEvent
        //instance.readNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedEvent', function() {
      it('should call replaceNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedEvent
        //instance.replaceNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
